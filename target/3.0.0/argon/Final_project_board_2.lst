
d:/Labs/Final_project_board_2/target/3.0.0/argon/Final_project_board_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003d64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7d80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e518  000d7d84  0001e518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000270  2003e580  2003e580  0002e580  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7dec  000d7dec  00027dec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7e14  000d7e14  00027e14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001f873d  00000000  00000000  00027e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d63f  00000000  00000000  00220555  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003f90b  00000000  00000000  0023db94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000033e0  00000000  00000000  0027d49f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a478  00000000  00000000  0028087f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000416b7  00000000  00000000  0028acf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004c474  00000000  00000000  002cc3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012f3cb  00000000  00000000  00318822  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000093f0  00000000  00000000  00447bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f949 	bl	d72c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f951 	bl	d72e0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e518 	.word	0x2003e518
   d4048:	000d7d84 	.word	0x000d7d84
   d404c:	2003e580 	.word	0x2003e580
   d4050:	2003e580 	.word	0x2003e580
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f8ed 	bl	d623c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7d58 	.word	0x000d7d58
   d407c:	000d7d7c 	.word	0x000d7d7c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 bc1c 	b.w	d48bc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 fd0d 	bl	d4aa4 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b897 	b.w	d61c0 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 be1d 	b.w	d5cd0 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 be1b 	b.w	d5cd0 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 be21 	b.w	d5ce0 <free>

000d409e <_ZdaPv>:
   d409e:	f001 be1f 	b.w	d5ce0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_Z8callbackPcPhj>:
  memcpy(p, payload, length);
  p[length] = NULL;
  //Serial.printlnf("%s",p);
  
  
}
   d40b2:	4770      	bx	lr

000d40b4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40b6:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40b8:	4608      	mov	r0, r1
   d40ba:	9101      	str	r1, [sp, #4]
   d40bc:	f003 f946 	bl	d734c <strlen>
    if (len + l > buff_size)
   d40c0:	6863      	ldr	r3, [r4, #4]
   d40c2:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40c4:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40c6:	18e8      	adds	r0, r5, r3
   d40c8:	4290      	cmp	r0, r2
   d40ca:	d808      	bhi.n	d40de <_ZN10BlynkParam3addEPKc.part.0.constprop.0+0x2a>
    memcpy(buff+len, b, l);
   d40cc:	6820      	ldr	r0, [r4, #0]
   d40ce:	9901      	ldr	r1, [sp, #4]
   d40d0:	462a      	mov	r2, r5
   d40d2:	4418      	add	r0, r3
   d40d4:	f003 f8f6 	bl	d72c4 <memcpy>
    len += l;
   d40d8:	6860      	ldr	r0, [r4, #4]
   d40da:	4428      	add	r0, r5
   d40dc:	6060      	str	r0, [r4, #4]
}
   d40de:	b003      	add	sp, #12
   d40e0:	bd30      	pop	{r4, r5, pc}
	...

000d40e4 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d40e4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40e6:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40e8:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d40ea:	6003      	str	r3, [r0, #0]
   d40ec:	4605      	mov	r5, r0
   d40ee:	b17c      	cbz	r4, d4110 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40f0:	6863      	ldr	r3, [r4, #4]
   d40f2:	3b01      	subs	r3, #1
   d40f4:	6063      	str	r3, [r4, #4]
   d40f6:	b95b      	cbnz	r3, d4110 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d40f8:	6823      	ldr	r3, [r4, #0]
   d40fa:	4620      	mov	r0, r4
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4100:	68a3      	ldr	r3, [r4, #8]
   d4102:	3b01      	subs	r3, #1
   d4104:	60a3      	str	r3, [r4, #8]
   d4106:	b91b      	cbnz	r3, d4110 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	4620      	mov	r0, r4
   d410c:	68db      	ldr	r3, [r3, #12]
   d410e:	4798      	blx	r3
   d4110:	4628      	mov	r0, r5
   d4112:	bd38      	pop	{r3, r4, r5, pc}
   d4114:	000d7aa4 	.word	0x000d7aa4

000d4118 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d4118:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d411a:	f001 fbd5 	bl	d58c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d411e:	4b03      	ldr	r3, [pc, #12]	; (d412c <_ZN10CloudClass7processEv+0x14>)
   d4120:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d4122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d4126:	f001 bdbb 	b.w	d5ca0 <spark_process>
   d412a:	bf00      	nop
   d412c:	2003e7d4 	.word	0x2003e7d4

000d4130 <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4130:	6803      	ldr	r3, [r0, #0]
   d4132:	b12b      	cbz	r3, d4140 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4134:	6842      	ldr	r2, [r0, #4]
   d4136:	4293      	cmp	r3, r2
   d4138:	d202      	bcs.n	d4140 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d413a:	4618      	mov	r0, r3
   d413c:	f003 b8ac 	b.w	d7298 <atoi>
   d4140:	2000      	movs	r0, #0
   d4142:	4770      	bx	lr

000d4144 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d4144:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4146:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d4148:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d414a:	b145      	cbz	r5, d415e <_ZN10BlynkParam8iteratorppEv+0x1a>
   d414c:	6843      	ldr	r3, [r0, #4]
   d414e:	429d      	cmp	r5, r3
   d4150:	d205      	bcs.n	d415e <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d4152:	4628      	mov	r0, r5
   d4154:	f003 f8fa 	bl	d734c <strlen>
   d4158:	3001      	adds	r0, #1
   d415a:	4405      	add	r5, r0
   d415c:	6025      	str	r5, [r4, #0]
        }
   d415e:	4620      	mov	r0, r4
   d4160:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4164 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4164:	b538      	push	{r3, r4, r5, lr}
   d4166:	4604      	mov	r4, r0
   d4168:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d416a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d416e:	6825      	ldr	r5, [r4, #0]
   d4170:	4a04      	ldr	r2, [pc, #16]	; (d4184 <_ZN10BlynkParam3addEi+0x20>)
   d4172:	1a09      	subs	r1, r1, r0
   d4174:	4428      	add	r0, r5
   d4176:	f001 fdc3 	bl	d5d00 <snprintf>
   d417a:	6863      	ldr	r3, [r4, #4]
   d417c:	3001      	adds	r0, #1
   d417e:	4403      	add	r3, r0
   d4180:	6063      	str	r3, [r4, #4]
    }
   d4182:	bd38      	pop	{r3, r4, r5, pc}
   d4184:	000d74a0 	.word	0x000d74a0

000d4188 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d4188:	b538      	push	{r3, r4, r5, lr}
   d418a:	4604      	mov	r4, r0
   d418c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d418e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d4192:	6825      	ldr	r5, [r4, #0]
   d4194:	4a04      	ldr	r2, [pc, #16]	; (d41a8 <_ZN10BlynkParam3addEl+0x20>)
   d4196:	1a09      	subs	r1, r1, r0
   d4198:	4428      	add	r0, r5
   d419a:	f001 fdb1 	bl	d5d00 <snprintf>
   d419e:	6863      	ldr	r3, [r4, #4]
   d41a0:	3001      	adds	r0, #1
   d41a2:	4403      	add	r3, r0
   d41a4:	6063      	str	r3, [r4, #4]
    }
   d41a6:	bd38      	pop	{r3, r4, r5, pc}
   d41a8:	000d74a3 	.word	0x000d74a3

000d41ac <BlynkWidgetWrite1>:
//allows the blynk text input to be displayed on the MQTT thread
BLYNK_WRITE(V1) {
   d41ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String inputText = param.asStr();
   d41ae:	6809      	ldr	r1, [r1, #0]
   d41b0:	4668      	mov	r0, sp
   d41b2:	f001 fece 	bl	d5f52 <_ZN6StringC1EPKc>
  client.publish("paris", inputText);//paris is the thread we made and it is our initials. Yes, I know, so origional :)
   d41b6:	9a00      	ldr	r2, [sp, #0]
   d41b8:	4904      	ldr	r1, [pc, #16]	; (d41cc <BlynkWidgetWrite1+0x20>)
   d41ba:	4805      	ldr	r0, [pc, #20]	; (d41d0 <BlynkWidgetWrite1+0x24>)
   d41bc:	f001 f939 	bl	d5432 <_ZN4MQTT7publishEPKcS1_>
  String inputText = param.asStr();
   d41c0:	4668      	mov	r0, sp
   d41c2:	f001 fe7b 	bl	d5ebc <_ZN6StringD1Ev>
}
   d41c6:	b005      	add	sp, #20
   d41c8:	f85d fb04 	ldr.w	pc, [sp], #4
   d41cc:	000d74a7 	.word	0x000d74a7
   d41d0:	2003e5e0 	.word	0x2003e5e0

000d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d41d4:	b508      	push	{r3, lr}
        state = CONNECTING;
   d41d6:	2300      	movs	r3, #0
   d41d8:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d41da:	6800      	ldr	r0, [r0, #0]
   d41dc:	f002 fc7e 	bl	d6adc <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d41e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d41e4:	f001 bafa 	b.w	d57dc <BlynkNoOpCbk>

000d41e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d41e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d41ec:	eb01 0902 	add.w	r9, r1, r2
   d41f0:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d41f2:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d41f4:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d41f8:	4680      	mov	r8, r0
   d41fa:	460d      	mov	r5, r1
   d41fc:	4616      	mov	r6, r2
    if (it >= param.end())
   d41fe:	f080 8092 	bcs.w	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d4202:	a805      	add	r0, sp, #20
   d4204:	880f      	ldrh	r7, [r1, #0]
   d4206:	f7ff ff9d 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d420a:	6803      	ldr	r3, [r0, #0]
   d420c:	4599      	cmp	r9, r3
   d420e:	f240 808a 	bls.w	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4212:	a805      	add	r0, sp, #20
   d4214:	f7ff ff8c 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d4218:	f247 2376 	movw	r3, #29302	; 0x7276
   d421c:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d421e:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d4220:	f000 80a9 	beq.w	d4376 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d4224:	d827      	bhi.n	d4276 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d4226:	f247 2361 	movw	r3, #29281	; 0x7261
   d422a:	429f      	cmp	r7, r3
   d422c:	d07e      	beq.n	d432c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d422e:	f247 2364 	movw	r3, #29284	; 0x7264
   d4232:	429f      	cmp	r7, r3
   d4234:	d042      	beq.n	d42bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d4236:	f646 5370 	movw	r3, #28016	; 0x6d70
   d423a:	429f      	cmp	r7, r3
   d423c:	d128      	bne.n	d4290 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d423e:	4e63      	ldr	r6, [pc, #396]	; (d43cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4240:	4f63      	ldr	r7, [pc, #396]	; (d43d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d4242:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d43e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d4246:	9b05      	ldr	r3, [sp, #20]
   d4248:	4599      	cmp	r9, r3
   d424a:	d96c      	bls.n	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d424c:	a805      	add	r0, sp, #20
   d424e:	f7ff ff6f 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>
   d4252:	b2c4      	uxtb	r4, r0
            ++it;
   d4254:	a805      	add	r0, sp, #20
   d4256:	f7ff ff75 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d425a:	9d05      	ldr	r5, [sp, #20]
   d425c:	4631      	mov	r1, r6
   d425e:	4628      	mov	r0, r5
   d4260:	f003 f86a 	bl	d7338 <strcmp>
   d4264:	4601      	mov	r1, r0
   d4266:	b9e0      	cbnz	r0, d42a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d4268:	4620      	mov	r0, r4
   d426a:	f002 fe3f 	bl	d6eec <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d426e:	a805      	add	r0, sp, #20
   d4270:	f7ff ff68 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d4274:	e7e7      	b.n	d4246 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d4276:	f247 7364 	movw	r3, #30564	; 0x7764
   d427a:	429f      	cmp	r7, r3
   d427c:	d03f      	beq.n	d42fe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d427e:	f247 7376 	movw	r3, #30582	; 0x7776
   d4282:	429f      	cmp	r7, r3
   d4284:	f000 8087 	beq.w	d4396 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d4288:	f247 7361 	movw	r3, #30561	; 0x7761
   d428c:	429f      	cmp	r7, r3
   d428e:	d05f      	beq.n	d4350 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4290:	2300      	movs	r3, #0
   d4292:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4296:	2202      	movs	r2, #2
   d4298:	9200      	str	r2, [sp, #0]
   d429a:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d429e:	4619      	mov	r1, r3
   d42a0:	e029      	b.n	d42f6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d42a2:	4639      	mov	r1, r7
   d42a4:	4628      	mov	r0, r5
   d42a6:	f003 f847 	bl	d7338 <strcmp>
   d42aa:	b128      	cbz	r0, d42b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d42ac:	4641      	mov	r1, r8
   d42ae:	4628      	mov	r0, r5
   d42b0:	f003 f842 	bl	d7338 <strcmp>
   d42b4:	2800      	cmp	r0, #0
   d42b6:	d1da      	bne.n	d426e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d42b8:	2101      	movs	r1, #1
   d42ba:	e7d5      	b.n	d4268 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d42bc:	ab0a      	add	r3, sp, #40	; 0x28
   d42be:	4945      	ldr	r1, [pc, #276]	; (d43d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d42c0:	9307      	str	r3, [sp, #28]
   d42c2:	a807      	add	r0, sp, #28
   d42c4:	2310      	movs	r3, #16
   d42c6:	2500      	movs	r5, #0
   d42c8:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d42cc:	f7ff fef2 	bl	d40b4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d42d0:	a807      	add	r0, sp, #28
   d42d2:	4621      	mov	r1, r4
   d42d4:	f7ff ff46 	bl	d4164 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d42d8:	4620      	mov	r0, r4
   d42da:	f002 fe31 	bl	d6f40 <digitalRead>
        rsp.add(analogRead(pin));
   d42de:	4601      	mov	r1, r0
   d42e0:	a807      	add	r0, sp, #28
   d42e2:	f7ff ff51 	bl	d4188 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d42e6:	9b08      	ldr	r3, [sp, #32]
   d42e8:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d42ec:	3b01      	subs	r3, #1
   d42ee:	9300      	str	r3, [sp, #0]
   d42f0:	9b07      	ldr	r3, [sp, #28]
   d42f2:	462a      	mov	r2, r5
   d42f4:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d42f6:	4640      	mov	r0, r8
   d42f8:	f000 fb14 	bl	d4924 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d42fc:	e013      	b.n	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d42fe:	a805      	add	r0, sp, #20
   d4300:	f7ff ff20 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d4304:	6803      	ldr	r3, [r0, #0]
   d4306:	4599      	cmp	r9, r3
   d4308:	d90d      	bls.n	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d430a:	b2a4      	uxth	r4, r4
   d430c:	2101      	movs	r1, #1
   d430e:	4620      	mov	r0, r4
   d4310:	f002 fdec 	bl	d6eec <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4314:	a805      	add	r0, sp, #20
   d4316:	f7ff ff0b 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>
   d431a:	1e01      	subs	r1, r0, #0
   d431c:	bf18      	it	ne
   d431e:	2101      	movne	r1, #1
   d4320:	4620      	mov	r0, r4
   d4322:	f002 fdf4 	bl	d6f0e <digitalWrite>
    }
}
   d4326:	b00f      	add	sp, #60	; 0x3c
   d4328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d432c:	ab0a      	add	r3, sp, #40	; 0x28
   d432e:	9307      	str	r3, [sp, #28]
   d4330:	a807      	add	r0, sp, #28
   d4332:	2310      	movs	r3, #16
   d4334:	4928      	ldr	r1, [pc, #160]	; (d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d4336:	2500      	movs	r5, #0
   d4338:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d433c:	f7ff feba 	bl	d40b4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d4340:	a807      	add	r0, sp, #28
   d4342:	4621      	mov	r1, r4
   d4344:	f7ff ff0e 	bl	d4164 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4348:	4620      	mov	r0, r4
   d434a:	f002 fe0c 	bl	d6f66 <analogRead>
   d434e:	e7c6      	b.n	d42de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d4350:	a805      	add	r0, sp, #20
   d4352:	f7ff fef7 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d4356:	6803      	ldr	r3, [r0, #0]
   d4358:	4599      	cmp	r9, r3
   d435a:	d9e4      	bls.n	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d435c:	b2a4      	uxth	r4, r4
   d435e:	2101      	movs	r1, #1
   d4360:	4620      	mov	r0, r4
   d4362:	f002 fdc3 	bl	d6eec <pinMode>
        analogWrite(pin, it.asInt());
   d4366:	a805      	add	r0, sp, #20
   d4368:	f7ff fee2 	bl	d4130 <_ZNK10BlynkParam8iterator5asIntEv>
   d436c:	4601      	mov	r1, r0
   d436e:	4620      	mov	r0, r4
   d4370:	f002 fe10 	bl	d6f94 <_Z11analogWritetm>
    } break;
   d4374:	e7d7      	b.n	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d4376:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d4378:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d437c:	f001 fa30 	bl	d57e0 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d4380:	4603      	mov	r3, r0
            handler(req);
   d4382:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4384:	b123      	cbz	r3, d4390 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d4386:	4a15      	ldr	r2, [pc, #84]	; (d43dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d4388:	4293      	cmp	r3, r2
   d438a:	d001      	beq.n	d4390 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d438c:	4798      	blx	r3
   d438e:	e7ca      	b.n	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   d4390:	f001 fa22 	bl	d57d8 <BlynkWidgetRead>
        }
    }
   d4394:	e7c7      	b.n	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d4396:	a805      	add	r0, sp, #20
   d4398:	f7ff fed4 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d439c:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d439e:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d43a2:	1b5d      	subs	r5, r3, r5
   d43a4:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d43a6:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d43a8:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d43ac:	950c      	str	r5, [sp, #48]	; 0x30
   d43ae:	f001 fa21 	bl	d57f4 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d43b2:	4603      	mov	r3, r0
            handler(req, param);
   d43b4:	a90a      	add	r1, sp, #40	; 0x28
   d43b6:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d43b8:	b123      	cbz	r3, d43c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d43ba:	4a09      	ldr	r2, [pc, #36]	; (d43e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d43bc:	4293      	cmp	r3, r2
   d43be:	d001      	beq.n	d43c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   d43c0:	4798      	blx	r3
   d43c2:	e7b0      	b.n	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   d43c4:	f001 fa09 	bl	d57da <BlynkWidgetWrite>
    } break;
   d43c8:	e7ad      	b.n	d4326 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d43ca:	bf00      	nop
   d43cc:	000d74ad 	.word	0x000d74ad
   d43d0:	000d74b0 	.word	0x000d74b0
   d43d4:	000d74b8 	.word	0x000d74b8
   d43d8:	000d74bb 	.word	0x000d74bb
   d43dc:	000d57d9 	.word	0x000d57d9
   d43e0:	000d57db 	.word	0x000d57db
   d43e4:	000d74b4 	.word	0x000d74b4

000d43e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d43e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d43ec:	b08c      	sub	sp, #48	; 0x30
   d43ee:	af04      	add	r7, sp, #16
   d43f0:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d43f2:	2205      	movs	r2, #5
   d43f4:	6800      	ldr	r0, [r0, #0]
   d43f6:	1d39      	adds	r1, r7, #4
   d43f8:	f001 fe7e 	bl	d60f8 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d43fc:	b3b8      	cbz	r0, d446e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d43fe:	2805      	cmp	r0, #5
   d4400:	d004      	beq.n	d440c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d4402:	2000      	movs	r0, #0
}
   d4404:	3720      	adds	r7, #32
   d4406:	46bd      	mov	sp, r7
   d4408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d440c:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4410:	0a13      	lsrs	r3, r2, #8
   d4412:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d4416:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d441a:	f8a7 3005 	strh.w	r3, [r7, #5]
   d441e:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d4420:	0a13      	lsrs	r3, r2, #8
   d4422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4426:	fa1f f883 	uxth.w	r8, r3
   d442a:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d442e:	2900      	cmp	r1, #0
   d4430:	d0e7      	beq.n	d4402 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d4432:	793b      	ldrb	r3, [r7, #4]
   d4434:	bb23      	cbnz	r3, d4480 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d4436:	f001 f9cd 	bl	d57d4 <_Z11BlynkMillisv>
   d443a:	4602      	mov	r2, r0
   d443c:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d443e:	7f60      	ldrb	r0, [r4, #29]
   d4440:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4444:	b9c0      	cbnz	r0, d4478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d4446:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d444a:	2901      	cmp	r1, #1
   d444c:	d114      	bne.n	d4478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d444e:	2b09      	cmp	r3, #9
   d4450:	d00f      	beq.n	d4472 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d4452:	2bc8      	cmp	r3, #200	; 0xc8
   d4454:	d001      	beq.n	d445a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d4456:	2b04      	cmp	r3, #4
   d4458:	d1d4      	bne.n	d4404 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d445a:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d445c:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d445e:	4620      	mov	r0, r4
                state = CONNECTED;
   d4460:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d4462:	f000 fb0d 	bl	d4a80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4466:	f7ff fe57 	bl	d4118 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d446a:	f001 f9b7 	bl	d57dc <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d446e:	2001      	movs	r0, #1
   d4470:	e7c8      	b.n	d4404 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d4472:	2303      	movs	r3, #3
   d4474:	7763      	strb	r3, [r4, #29]
                break;
   d4476:	e7c5      	b.n	d4404 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4478:	1f58      	subs	r0, r3, #5
   d447a:	bf18      	it	ne
   d447c:	2001      	movne	r0, #1
   d447e:	e7c1      	b.n	d4404 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d4480:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4484:	d903      	bls.n	d448e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d4486:	4620      	mov	r0, r4
   d4488:	f7ff fea4 	bl	d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d448c:	e7ef      	b.n	d446e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d448e:	f108 0308 	add.w	r3, r8, #8
   d4492:	f023 0307 	bic.w	r3, r3, #7
   d4496:	466e      	mov	r6, sp
   d4498:	ebad 0d03 	sub.w	sp, sp, r3
   d449c:	ad04      	add	r5, sp, #16
   d449e:	6820      	ldr	r0, [r4, #0]
   d44a0:	4642      	mov	r2, r8
   d44a2:	4629      	mov	r1, r5
   d44a4:	f001 fe28 	bl	d60f8 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d44a8:	4580      	cmp	r8, r0
   d44aa:	f04f 0000 	mov.w	r0, #0
   d44ae:	d17f      	bne.n	d45b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d44b0:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d44b4:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d44b6:	f001 f98d 	bl	d57d4 <_Z11BlynkMillisv>
    switch (hdr.type)
   d44ba:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d44bc:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d44be:	2b14      	cmp	r3, #20
   d44c0:	f000 80a6 	beq.w	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d44c4:	d848      	bhi.n	d4558 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d44c6:	2b0f      	cmp	r3, #15
   d44c8:	f000 80a2 	beq.w	d4610 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d44cc:	d807      	bhi.n	d44de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d44ce:	2b02      	cmp	r3, #2
   d44d0:	d048      	beq.n	d4564 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d44d2:	2b06      	cmp	r3, #6
   d44d4:	d051      	beq.n	d457a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d44d6:	4620      	mov	r0, r4
   d44d8:	f7ff fe7c 	bl	d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d44dc:	e058      	b.n	d4590 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d44de:	2b11      	cmp	r3, #17
   d44e0:	d1f9      	bne.n	d44d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d44e2:	2300      	movs	r3, #0
   d44e4:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d44e6:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d44ea:	442b      	add	r3, r5
        if (it >= param.end())
   d44ec:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d44ee:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d44f2:	d24d      	bcs.n	d4590 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d44f4:	f107 000c 	add.w	r0, r7, #12
   d44f8:	f8d5 8000 	ldr.w	r8, [r5]
   d44fc:	f7ff fe22 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d4500:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d4502:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d4506:	1b5d      	subs	r5, r3, r5
   d4508:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d450a:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d450e:	687b      	ldr	r3, [r7, #4]
   d4510:	61fd      	str	r5, [r7, #28]
   d4512:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4516:	8363      	strh	r3, [r4, #26]
   d4518:	4b64      	ldr	r3, [pc, #400]	; (d46ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d451a:	4598      	cmp	r8, r3
   d451c:	f000 80bf 	beq.w	d469e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d4520:	f200 808c 	bhi.w	d463c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d4524:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d4528:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d452c:	4413      	add	r3, r2
   d452e:	4598      	cmp	r8, r3
   d4530:	f000 809d 	beq.w	d466e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d4534:	d879      	bhi.n	d462a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d4536:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d453a:	3b06      	subs	r3, #6
   d453c:	4598      	cmp	r8, r3
   d453e:	f000 809c 	beq.w	d467a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d4542:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4546:	3303      	adds	r3, #3
   d4548:	4598      	cmp	r8, r3
   d454a:	d16b      	bne.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d454c:	f107 0114 	add.w	r1, r7, #20
   d4550:	4638      	mov	r0, r7
   d4552:	f001 f942 	bl	d57da <BlynkWidgetWrite>
   d4556:	e065      	b.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d4558:	2b29      	cmp	r3, #41	; 0x29
   d455a:	d01b      	beq.n	d4594 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d455c:	2b37      	cmp	r3, #55	; 0x37
   d455e:	d017      	beq.n	d4590 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4560:	2b1d      	cmp	r3, #29
   d4562:	d1b8      	bne.n	d44d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4564:	7f63      	ldrb	r3, [r4, #29]
   d4566:	b943      	cbnz	r3, d457a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d4568:	2301      	movs	r3, #1
   d456a:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d456c:	4620      	mov	r0, r4
   d456e:	f000 fa87 	bl	d4a80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d4572:	f7ff fdd1 	bl	d4118 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d4576:	f001 f931 	bl	d57dc <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d457a:	2300      	movs	r3, #0
   d457c:	21c8      	movs	r1, #200	; 0xc8
   d457e:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4582:	9100      	str	r1, [sp, #0]
   d4584:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4588:	4619      	mov	r1, r3
   d458a:	4620      	mov	r0, r4
   d458c:	f000 f9ca 	bl	d4924 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d4590:	2001      	movs	r0, #1
   d4592:	e00d      	b.n	d45b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d4594:	68a3      	ldr	r3, [r4, #8]
   d4596:	b91b      	cbnz	r3, d45a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d4598:	2040      	movs	r0, #64	; 0x40
   d459a:	f001 fb99 	bl	d5cd0 <malloc>
   d459e:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d45a0:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d45a4:	44a8      	add	r8, r5
        if (it >= param.end())
   d45a6:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d45a8:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d45ac:	d302      	bcc.n	d45b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d45ae:	2000      	movs	r0, #0
   d45b0:	46b5      	mov	sp, r6
   d45b2:	e727      	b.n	d4404 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d45b4:	4629      	mov	r1, r5
   d45b6:	2240      	movs	r2, #64	; 0x40
   d45b8:	68a0      	ldr	r0, [r4, #8]
   d45ba:	f002 fecf 	bl	d735c <strncpy>
        redir_serv[63] = '\0';
   d45be:	68a3      	ldr	r3, [r4, #8]
   d45c0:	2500      	movs	r5, #0
   d45c2:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d45c6:	f107 0014 	add.w	r0, r7, #20
   d45ca:	f7ff fdbb 	bl	d4144 <_ZN10BlynkParam8iteratorppEv>
   d45ce:	6803      	ldr	r3, [r0, #0]
   d45d0:	4543      	cmp	r3, r8
   d45d2:	d21b      	bcs.n	d460c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d45d4:	6978      	ldr	r0, [r7, #20]
   d45d6:	b120      	cbz	r0, d45e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d45d8:	69bb      	ldr	r3, [r7, #24]
   d45da:	4298      	cmp	r0, r3
   d45dc:	d214      	bcs.n	d4608 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d45de:	f002 fe5f 	bl	d72a0 <atol>
            redir_port = it.asLong();
   d45e2:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d45e4:	6820      	ldr	r0, [r4, #0]
   d45e6:	f002 fa79 	bl	d6adc <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d45ea:	6823      	ldr	r3, [r4, #0]
   d45ec:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d45ee:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d45f0:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d45f2:	2300      	movs	r3, #0
   d45f4:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d45f6:	f001 f8ed 	bl	d57d4 <_Z11BlynkMillisv>
   d45fa:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d45fe:	3808      	subs	r0, #8
   d4600:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4604:	6160      	str	r0, [r4, #20]
   d4606:	e7c3      	b.n	d4590 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4608:	4628      	mov	r0, r5
   d460a:	e7ea      	b.n	d45e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d460c:	2550      	movs	r5, #80	; 0x50
   d460e:	e7e9      	b.n	d45e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d4610:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d4612:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d4616:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d461a:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d461c:	4629      	mov	r1, r5
   d461e:	4620      	mov	r0, r4
   d4620:	f7ff fde2 	bl	d41e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d4624:	2300      	movs	r3, #0
   d4626:	8363      	strh	r3, [r4, #26]
   d4628:	e7b2      	b.n	d4590 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d462a:	4b21      	ldr	r3, [pc, #132]	; (d46b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d462c:	4598      	cmp	r8, r3
   d462e:	d1f9      	bne.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d4630:	f107 0114 	add.w	r1, r7, #20
   d4634:	4638      	mov	r0, r7
   d4636:	f001 f8d0 	bl	d57da <BlynkWidgetWrite>
   d463a:	e7f3      	b.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d463c:	4b1d      	ldr	r3, [pc, #116]	; (d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d463e:	4598      	cmp	r8, r3
   d4640:	d021      	beq.n	d4686 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d4642:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d4646:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d464a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d464e:	4598      	cmp	r8, r3
   d4650:	d01f      	beq.n	d4692 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d4652:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d4656:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d465a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d465e:	4598      	cmp	r8, r3
   d4660:	d1e0      	bne.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d4662:	f107 0114 	add.w	r1, r7, #20
   d4666:	4638      	mov	r0, r7
   d4668:	f001 f8b7 	bl	d57da <BlynkWidgetWrite>
   d466c:	e7da      	b.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d466e:	f107 0114 	add.w	r1, r7, #20
   d4672:	4638      	mov	r0, r7
   d4674:	f001 f8b1 	bl	d57da <BlynkWidgetWrite>
   d4678:	e7d4      	b.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d467a:	f107 0114 	add.w	r1, r7, #20
   d467e:	4638      	mov	r0, r7
   d4680:	f001 f8ab 	bl	d57da <BlynkWidgetWrite>
   d4684:	e7ce      	b.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d4686:	f107 0114 	add.w	r1, r7, #20
   d468a:	4638      	mov	r0, r7
   d468c:	f001 f8a5 	bl	d57da <BlynkWidgetWrite>
   d4690:	e7c8      	b.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d4692:	f107 0114 	add.w	r1, r7, #20
   d4696:	4638      	mov	r0, r7
   d4698:	f001 f89f 	bl	d57da <BlynkWidgetWrite>
   d469c:	e7c2      	b.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d469e:	f107 0114 	add.w	r1, r7, #20
   d46a2:	4638      	mov	r0, r7
   d46a4:	f001 f899 	bl	d57da <BlynkWidgetWrite>
   d46a8:	e7bc      	b.n	d4624 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d46aa:	bf00      	nop
   d46ac:	00736676 	.word	0x00736676
   d46b0:	00676264 	.word	0x00676264
   d46b4:	6e6f6361 	.word	0x6e6f6361

000d46b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d46b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46bc:	4604      	mov	r4, r0
   d46be:	b08c      	sub	sp, #48	; 0x30
   d46c0:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d46c2:	f7ff fd29 	bl	d4118 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d46c6:	7f63      	ldrb	r3, [r4, #29]
   d46c8:	2b02      	cmp	r3, #2
   d46ca:	f000 80a8 	beq.w	d481e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d46ce:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d46d0:	8b62      	ldrh	r2, [r4, #26]
   d46d2:	3301      	adds	r3, #1
   d46d4:	b2db      	uxtb	r3, r3
   d46d6:	7723      	strb	r3, [r4, #28]
   d46d8:	b10a      	cbz	r2, d46de <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d46da:	2501      	movs	r5, #1
   d46dc:	e016      	b.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d46de:	2b02      	cmp	r3, #2
   d46e0:	d8fb      	bhi.n	d46da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d46e2:	6820      	ldr	r0, [r4, #0]
   d46e4:	f002 f818 	bl	d6718 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d46e8:	b1b8      	cbz	r0, d471a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d46ea:	b925      	cbnz	r5, d46f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d46ec:	6820      	ldr	r0, [r4, #0]
   d46ee:	f002 f99b 	bl	d6a28 <_ZN9TCPClient9availableEv>
   d46f2:	2800      	cmp	r0, #0
   d46f4:	dd11      	ble.n	d471a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d46f6:	4620      	mov	r0, r4
   d46f8:	f7ff fe76 	bl	d43e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d46fc:	4605      	mov	r5, r0
   d46fe:	2800      	cmp	r0, #0
   d4700:	d1f4      	bne.n	d46ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d4702:	6820      	ldr	r0, [r4, #0]
   d4704:	f002 f9ea 	bl	d6adc <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d4708:	f001 f868 	bl	d57dc <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d470c:	7f23      	ldrb	r3, [r4, #28]
   d470e:	3b01      	subs	r3, #1
   d4710:	7723      	strb	r3, [r4, #28]
}
   d4712:	4628      	mov	r0, r5
   d4714:	b00c      	add	sp, #48	; 0x30
   d4716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d471a:	f001 f85b 	bl	d57d4 <_Z11BlynkMillisv>
   d471e:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d4720:	6820      	ldr	r0, [r4, #0]
   d4722:	f001 fff9 	bl	d6718 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d4726:	7f67      	ldrb	r7, [r4, #29]
   d4728:	2f01      	cmp	r7, #1
   d472a:	4605      	mov	r5, r0
   d472c:	d129      	bne.n	d4782 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d472e:	b920      	cbnz	r0, d473a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d4730:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d4732:	4620      	mov	r0, r4
   d4734:	f7ff fd4e 	bl	d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4738:	e7e8      	b.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d473a:	68e3      	ldr	r3, [r4, #12]
   d473c:	f24f 6218 	movw	r2, #63000	; 0xf618
   d4740:	1af3      	subs	r3, r6, r3
   d4742:	4293      	cmp	r3, r2
   d4744:	d904      	bls.n	d4750 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d4746:	4620      	mov	r0, r4
   d4748:	f7ff fd44 	bl	d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d474c:	2500      	movs	r5, #0
   d474e:	e7dd      	b.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4750:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d4754:	4293      	cmp	r3, r2
   d4756:	d803      	bhi.n	d4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4758:	6923      	ldr	r3, [r4, #16]
   d475a:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d475c:	4293      	cmp	r3, r2
   d475e:	d9bc      	bls.n	d46da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4760:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4762:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4766:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4768:	4293      	cmp	r3, r2
   d476a:	d9b6      	bls.n	d46da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d476c:	2300      	movs	r3, #0
   d476e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4772:	9300      	str	r3, [sp, #0]
   d4774:	461a      	mov	r2, r3
   d4776:	2106      	movs	r1, #6
   d4778:	4620      	mov	r0, r4
   d477a:	f000 f8d3 	bl	d4924 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d477e:	6166      	str	r6, [r4, #20]
   d4780:	e7ab      	b.n	d46da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d4782:	2f00      	cmp	r7, #0
   d4784:	d1a9      	bne.n	d46da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4786:	6962      	ldr	r2, [r4, #20]
   d4788:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d478a:	b140      	cbz	r0, d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d478c:	f241 7370 	movw	r3, #6000	; 0x1770
   d4790:	429a      	cmp	r2, r3
   d4792:	d9a2      	bls.n	d46da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4794:	6820      	ldr	r0, [r4, #0]
   d4796:	f002 f9a1 	bl	d6adc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d479a:	7767      	strb	r7, [r4, #29]
   d479c:	e7d6      	b.n	d474c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d479e:	f241 3388 	movw	r3, #5000	; 0x1388
   d47a2:	429a      	cmp	r2, r3
   d47a4:	d999      	bls.n	d46da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d47a6:	6820      	ldr	r0, [r4, #0]
   d47a8:	f002 f998 	bl	d6adc <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d47ac:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d47b0:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d47b4:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d47b8:	f1be 0f00 	cmp.w	lr, #0
   d47bc:	d00b      	beq.n	d47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d47be:	462b      	mov	r3, r5
   d47c0:	4642      	mov	r2, r8
   d47c2:	4671      	mov	r1, lr
   d47c4:	4660      	mov	r0, ip
   d47c6:	f002 f9e7 	bl	d6b98 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d47ca:	1e43      	subs	r3, r0, #1
   d47cc:	425d      	negs	r5, r3
   d47ce:	415d      	adcs	r5, r3
   d47d0:	b98d      	cbnz	r5, d47f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d47d2:	6166      	str	r6, [r4, #20]
                return false;
   d47d4:	e79a      	b.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d47d6:	4b13      	ldr	r3, [pc, #76]	; (d4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d47d8:	9306      	str	r3, [sp, #24]
   d47da:	f10c 0720 	add.w	r7, ip, #32
   d47de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d47e0:	ad07      	add	r5, sp, #28
   d47e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d47e4:	683b      	ldr	r3, [r7, #0]
   d47e6:	702b      	strb	r3, [r5, #0]
   d47e8:	4642      	mov	r2, r8
   d47ea:	4673      	mov	r3, lr
   d47ec:	a906      	add	r1, sp, #24
   d47ee:	4660      	mov	r0, ip
   d47f0:	f002 f89f 	bl	d6932 <_ZN9TCPClient7connectE9IPAddresstm>
   d47f4:	e7e9      	b.n	d47ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d47f6:	6863      	ldr	r3, [r4, #4]
   d47f8:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d47fa:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d47fc:	4618      	mov	r0, r3
            msgIdOut = 1;
   d47fe:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4800:	f002 fda4 	bl	d734c <strlen>
   d4804:	2200      	movs	r2, #0
   d4806:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d480a:	9b05      	ldr	r3, [sp, #20]
   d480c:	9000      	str	r0, [sp, #0]
   d480e:	4632      	mov	r2, r6
   d4810:	211d      	movs	r1, #29
   d4812:	4620      	mov	r0, r4
   d4814:	f000 f886 	bl	d4924 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4818:	6923      	ldr	r3, [r4, #16]
   d481a:	6163      	str	r3, [r4, #20]
            return true;
   d481c:	e776      	b.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d481e:	2500      	movs	r5, #0
   d4820:	e777      	b.n	d4712 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d4822:	bf00      	nop
   d4824:	000d79d4 	.word	0x000d79d4

000d4828 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d482c:	4615      	mov	r5, r2
   d482e:	b08c      	sub	sp, #48	; 0x30
   d4830:	4604      	mov	r4, r0
   d4832:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4834:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d4838:	460f      	mov	r7, r1
   d483a:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d483c:	f000 ffc8 	bl	d57d0 <_Z10BlynkDelaym>
   d4840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4842:	ae01      	add	r6, sp, #4
   d4844:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4846:	682b      	ldr	r3, [r5, #0]
   d4848:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d484a:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d484c:	f000 ffc2 	bl	d57d4 <_Z11BlynkMillisv>
   d4850:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4854:	3808      	subs	r0, #8
   d4856:	af01      	add	r7, sp, #4
   d4858:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d485c:	6160      	str	r0, [r4, #20]
   d485e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4860:	ae07      	add	r6, sp, #28
   d4862:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4864:	683b      	ldr	r3, [r7, #0]
   d4866:	7033      	strb	r3, [r6, #0]
   d4868:	af07      	add	r7, sp, #28
   d486a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d486c:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d486e:	f04f 0c00 	mov.w	ip, #0
   d4872:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d4876:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d487a:	3520      	adds	r5, #32
   d487c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d487e:	6833      	ldr	r3, [r6, #0]
   d4880:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d4882:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d4884:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d4888:	6820      	ldr	r0, [r4, #0]
   d488a:	f002 f927 	bl	d6adc <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d488e:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d4890:	f000 ffa0 	bl	d57d4 <_Z11BlynkMillisv>
   d4894:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d4896:	7f63      	ldrb	r3, [r4, #29]
   d4898:	2b01      	cmp	r3, #1
   d489a:	d00c      	beq.n	d48b6 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d489c:	f000 ff9a 	bl	d57d4 <_Z11BlynkMillisv>
   d48a0:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d48a2:	42b8      	cmp	r0, r7
   d48a4:	d804      	bhi.n	d48b0 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d48a6:	2100      	movs	r1, #0
   d48a8:	4620      	mov	r0, r4
   d48aa:	f7ff ff05 	bl	d46b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d48ae:	e7f2      	b.n	d4896 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d48b0:	7f63      	ldrb	r3, [r4, #29]
   d48b2:	2b01      	cmp	r3, #1
   d48b4:	d1e8      	bne.n	d4888 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d48b6:	b00c      	add	sp, #48	; 0x30
   d48b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d48bc <setup>:
void setup() {
   d48bc:	b510      	push	{r4, lr}
   d48be:	b088      	sub	sp, #32
  Serial.begin(9600);
   d48c0:	f001 fde4 	bl	d648c <_Z16_fetch_usbserialv>
   d48c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d48c8:	f001 fdd4 	bl	d6474 <_ZN9USBSerial5beginEl>

  pinMode(D7, OUTPUT); // blue light
   d48cc:	2101      	movs	r1, #1
   d48ce:	2007      	movs	r0, #7
   d48d0:	f002 fb0c 	bl	d6eec <pinMode>
  Blynk.begin("DISy_9aRsQHnyt8mtvZXh09rT-tdy72R", IPAddress(167, 172, 234, 162), 9090);
   d48d4:	23a2      	movs	r3, #162	; 0xa2
   d48d6:	9300      	str	r3, [sp, #0]
   d48d8:	22ac      	movs	r2, #172	; 0xac
   d48da:	23ea      	movs	r3, #234	; 0xea
   d48dc:	21a7      	movs	r1, #167	; 0xa7
   d48de:	a802      	add	r0, sp, #8
   d48e0:	f001 fd5c 	bl	d639c <_ZN9IPAddressC1Ehhhh>
   d48e4:	f242 3382 	movw	r3, #9090	; 0x2382
   d48e8:	aa02      	add	r2, sp, #8
   d48ea:	490b      	ldr	r1, [pc, #44]	; (d4918 <setup+0x5c>)
   d48ec:	480b      	ldr	r0, [pc, #44]	; (d491c <setup+0x60>)
  
  sensor.begin(); //turns on the proximity sensor
   d48ee:	4c0c      	ldr	r4, [pc, #48]	; (d4920 <setup+0x64>)
  Blynk.begin("DISy_9aRsQHnyt8mtvZXh09rT-tdy72R", IPAddress(167, 172, 234, 162), 9090);
   d48f0:	f7ff ff9a 	bl	d4828 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  sensor.begin(); //turns on the proximity sensor
   d48f4:	f002 fb8c 	bl	d7010 <_Z19__fetch_global_Wirev>
   d48f8:	4601      	mov	r1, r0
   d48fa:	4620      	mov	r0, r4
   d48fc:	f000 faa4 	bl	d4e48 <_ZN8VCNL40405beginER7TwoWire>
  Wire.begin(); //Join i2c bus
   d4900:	f002 fb86 	bl	d7010 <_Z19__fetch_global_Wirev>
   d4904:	f001 fea8 	bl	d6658 <_ZN7TwoWire5beginEv>
  sensor.powerOnProximity();
   d4908:	4620      	mov	r0, r4
   d490a:	f000 fa53 	bl	d4db4 <_ZN8VCNL404016powerOnProximityEv>
  sensor.powerOnAmbient();
   d490e:	4620      	mov	r0, r4
   d4910:	f000 fa2d 	bl	d4d6e <_ZN8VCNL404014powerOnAmbientEv>
}
   d4914:	b008      	add	sp, #32
   d4916:	bd10      	pop	{r4, pc}
   d4918:	000d74be 	.word	0x000d74be
   d491c:	2003e584 	.word	0x2003e584
   d4920:	2003e640 	.word	0x2003e640

000d4924 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4928:	b083      	sub	sp, #12
   d492a:	af00      	add	r7, sp, #0
   d492c:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d492e:	6800      	ldr	r0, [r0, #0]
   d4930:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d4932:	4688      	mov	r8, r1
   d4934:	4616      	mov	r6, r2
   d4936:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4938:	46eb      	mov	fp, sp
   d493a:	f001 feed 	bl	d6718 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d493e:	2800      	cmp	r0, #0
   d4940:	d07f      	beq.n	d4a42 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4942:	f1b8 0f1d 	cmp.w	r8, #29
   d4946:	d804      	bhi.n	d4952 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d4948:	4b4c      	ldr	r3, [pc, #304]	; (d4a7c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d494a:	fa23 f308 	lsr.w	r3, r3, r8
   d494e:	07db      	lsls	r3, r3, #31
   d4950:	d402      	bmi.n	d4958 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d4952:	7f63      	ldrb	r3, [r4, #29]
   d4954:	2b01      	cmp	r3, #1
   d4956:	d174      	bne.n	d4a42 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d4958:	b946      	cbnz	r6, d496c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d495a:	8b66      	ldrh	r6, [r4, #26]
   d495c:	b936      	cbnz	r6, d496c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d495e:	8b23      	ldrh	r3, [r4, #24]
   d4960:	3301      	adds	r3, #1
   d4962:	b29b      	uxth	r3, r3
   d4964:	2b00      	cmp	r3, #0
   d4966:	d071      	beq.n	d4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d4968:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d496a:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d496c:	f1a8 030c 	sub.w	r3, r8, #12
   d4970:	2b08      	cmp	r3, #8
   d4972:	d816      	bhi.n	d49a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4974:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d4978:	4293      	cmp	r3, r2
   d497a:	bf38      	it	cc
   d497c:	4613      	movcc	r3, r2
   d497e:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4982:	f000 ff27 	bl	d57d4 <_Z11BlynkMillisv>
   d4986:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d498a:	2800      	cmp	r0, #0
   d498c:	db60      	blt.n	d4a50 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d498e:	2100      	movs	r1, #0
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff fe91 	bl	d46b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4996:	f000 ff1d 	bl	d57d4 <_Z11BlynkMillisv>
   d499a:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d499e:	2800      	cmp	r0, #0
   d49a0:	daf5      	bge.n	d498e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d49a2:	f1b9 0f00 	cmp.w	r9, #0
   d49a6:	d05a      	beq.n	d4a5e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d49a8:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d49aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d49ac:	2a00      	cmp	r2, #0
   d49ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d49b0:	bf08      	it	eq
   d49b2:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d49b4:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d49b8:	f10a 0307 	add.w	r3, sl, #7
   d49bc:	f023 0307 	bic.w	r3, r3, #7
   d49c0:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d49c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d49c6:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d49ca:	18ea      	adds	r2, r5, r3
   d49cc:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d49d0:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d49d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d49d6:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d49da:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d49de:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d49e2:	f1b9 0f00 	cmp.w	r9, #0
   d49e6:	d03c      	beq.n	d4a62 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d49e8:	2d00      	cmp	r5, #0
   d49ea:	d03a      	beq.n	d4a62 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d49ec:	462a      	mov	r2, r5
   d49ee:	4649      	mov	r1, r9
   d49f0:	f10d 0005 	add.w	r0, sp, #5
   d49f4:	f002 fc66 	bl	d72c4 <memcpy>
        pos += length;
   d49f8:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d49fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d49fc:	b13b      	cbz	r3, d4a0e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d49fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4a00:	b12b      	cbz	r3, d4a0e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4a02:	461a      	mov	r2, r3
   d4a04:	687b      	ldr	r3, [r7, #4]
   d4a06:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4a08:	4418      	add	r0, r3
   d4a0a:	f002 fc5b 	bl	d72c4 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4a0e:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4a10:	4555      	cmp	r5, sl
   d4a12:	d22a      	bcs.n	d4a6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4a14:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4a18:	687b      	ldr	r3, [r7, #4]
   d4a1a:	6820      	ldr	r0, [r4, #0]
   d4a1c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4a20:	bf28      	it	cs
   d4a22:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4a26:	1959      	adds	r1, r3, r5
   d4a28:	f001 fe60 	bl	d66ec <_ZN9TCPClient5writeEPKhj>
   d4a2c:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4a2e:	2000      	movs	r0, #0
   d4a30:	f000 fece 	bl	d57d0 <_Z10BlynkDelaym>
        if (w == 0) {
   d4a34:	b9be      	cbnz	r6, d4a66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4a36:	6820      	ldr	r0, [r4, #0]
   d4a38:	f002 f850 	bl	d6adc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4a3c:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4a3e:	f000 fecd 	bl	d57dc <BlynkNoOpCbk>
}
   d4a42:	370c      	adds	r7, #12
   d4a44:	46dd      	mov	sp, fp
   d4a46:	46bd      	mov	sp, r7
   d4a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4a4c:	2301      	movs	r3, #1
   d4a4e:	e78b      	b.n	d4968 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4a50:	7f21      	ldrb	r1, [r4, #28]
   d4a52:	2900      	cmp	r1, #0
   d4a54:	d1a5      	bne.n	d49a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4a56:	4620      	mov	r0, r4
   d4a58:	f7ff fe2e 	bl	d46b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4a5c:	e7a1      	b.n	d49a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a5e:	2305      	movs	r3, #5
   d4a60:	e7a3      	b.n	d49aa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4a62:	2005      	movs	r0, #5
   d4a64:	e7c9      	b.n	d49fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4a66:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4a68:	e7d2      	b.n	d4a10 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4a6a:	d003      	beq.n	d4a74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	f7ff fbb1 	bl	d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4a72:	e7e6      	b.n	d4a42 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4a74:	f000 feae 	bl	d57d4 <_Z11BlynkMillisv>
   d4a78:	6120      	str	r0, [r4, #16]
   d4a7a:	e7e2      	b.n	d4a42 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4a7c:	20000045 	.word	0x20000045

000d4a80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4a80:	b500      	push	{lr}
   d4a82:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4a84:	ab04      	add	r3, sp, #16
   d4a86:	2200      	movs	r2, #0
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	2349      	movs	r3, #73	; 0x49
   d4a8c:	9300      	str	r3, [sp, #0]
   d4a8e:	9202      	str	r2, [sp, #8]
   d4a90:	4b03      	ldr	r3, [pc, #12]	; (d4aa0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4a92:	2111      	movs	r1, #17
   d4a94:	f7ff ff46 	bl	d4924 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4a98:	b015      	add	sp, #84	; 0x54
   d4a9a:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a9e:	bf00      	nop
   d4aa0:	000d750c 	.word	0x000d750c

000d4aa4 <loop>:

void loop() {
   d4aa4:	b500      	push	{lr}
  Blynk.run();
   d4aa6:	2100      	movs	r1, #0
void loop() {
   d4aa8:	b08d      	sub	sp, #52	; 0x34
  Blynk.run();
   d4aaa:	4829      	ldr	r0, [pc, #164]	; (d4b50 <loop+0xac>)
   d4aac:	f7ff fe04 	bl	d46b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  
  unsigned int proxValue = sensor.getProximity(); 
   d4ab0:	4828      	ldr	r0, [pc, #160]	; (d4b54 <loop+0xb0>)
   d4ab2:	f000 f8dd 	bl	d4c70 <_ZN8VCNL404012getProximityEv>
  String z = (String)proxValue;
   d4ab6:	220a      	movs	r2, #10
  unsigned int proxValue = sensor.getProximity(); 
   d4ab8:	4601      	mov	r1, r0
  String z = (String)proxValue;
   d4aba:	4668      	mov	r0, sp
   d4abc:	f001 fa6f 	bl	d5f9e <_ZN6StringC1Ejh>
  Serial.println(z);
   d4ac0:	f001 fce4 	bl	d648c <_Z16_fetch_usbserialv>
   d4ac4:	9900      	ldr	r1, [sp, #0]
   d4ac6:	f001 fada 	bl	d607e <_ZN5Print7printlnEPKc>
  client.publish("tjProximity", z);
   d4aca:	9a00      	ldr	r2, [sp, #0]
   d4acc:	4922      	ldr	r1, [pc, #136]	; (d4b58 <loop+0xb4>)
   d4ace:	4823      	ldr	r0, [pc, #140]	; (d4b5c <loop+0xb8>)
   d4ad0:	f000 fcaf 	bl	d5432 <_ZN4MQTT7publishEPKcS1_>
  client.subscribe("paris");
   d4ad4:	4922      	ldr	r1, [pc, #136]	; (d4b60 <loop+0xbc>)
   d4ad6:	4821      	ldr	r0, [pc, #132]	; (d4b5c <loop+0xb8>)
   d4ad8:	f000 fe4f 	bl	d577a <_ZN4MQTT9subscribeEPKc>
  unsigned int ambientValue = sensor.getAmbient();
   d4adc:	481d      	ldr	r0, [pc, #116]	; (d4b54 <loop+0xb0>)
   d4ade:	f000 f8ca 	bl	d4c76 <_ZN8VCNL404010getAmbientEv>
  String x = (String)ambientValue;
   d4ae2:	220a      	movs	r2, #10
  unsigned int ambientValue = sensor.getAmbient();
   d4ae4:	4601      	mov	r1, r0
  String x = (String)ambientValue;
   d4ae6:	a804      	add	r0, sp, #16
   d4ae8:	f001 fa59 	bl	d5f9e <_ZN6StringC1Ejh>
  Serial.println(x);
   d4aec:	f001 fcce 	bl	d648c <_Z16_fetch_usbserialv>
   d4af0:	9904      	ldr	r1, [sp, #16]
   d4af2:	f001 fac4 	bl	d607e <_ZN5Print7printlnEPKc>
  client.publish("tjAmbient", x);
   d4af6:	9a04      	ldr	r2, [sp, #16]
   d4af8:	491a      	ldr	r1, [pc, #104]	; (d4b64 <loop+0xc0>)
   d4afa:	4818      	ldr	r0, [pc, #96]	; (d4b5c <loop+0xb8>)
   d4afc:	f000 fc99 	bl	d5432 <_ZN4MQTT7publishEPKcS1_>
  client.subscribe("paris");
   d4b00:	4917      	ldr	r1, [pc, #92]	; (d4b60 <loop+0xbc>)
   d4b02:	4816      	ldr	r0, [pc, #88]	; (d4b5c <loop+0xb8>)
   d4b04:	f000 fe39 	bl	d577a <_ZN4MQTT9subscribeEPKc>
  

  if (client.isConnected()) {
   d4b08:	4814      	ldr	r0, [pc, #80]	; (d4b5c <loop+0xb8>)
   d4b0a:	f000 fb16 	bl	d513a <_ZN4MQTT11isConnectedEv>
   d4b0e:	b198      	cbz	r0, d4b38 <loop+0x94>
    
    client.subscribe("paris");//subscribes to the thread so it can recieve messages. 
   d4b10:	4913      	ldr	r1, [pc, #76]	; (d4b60 <loop+0xbc>)
   d4b12:	4812      	ldr	r0, [pc, #72]	; (d4b5c <loop+0xb8>)
   d4b14:	f000 fe31 	bl	d577a <_ZN4MQTT9subscribeEPKc>
    client.loop();
   d4b18:	4810      	ldr	r0, [pc, #64]	; (d4b5c <loop+0xb8>)
   d4b1a:	f000 fce6 	bl	d54ea <_ZN4MQTT4loopEv>
  } else {
    client.connect(System.deviceID());
  }
  delay(1000);
   d4b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4b22:	f001 fb13 	bl	d614c <delay>
  String x = (String)ambientValue;
   d4b26:	a804      	add	r0, sp, #16
   d4b28:	f001 f9c8 	bl	d5ebc <_ZN6StringD1Ev>
  String z = (String)proxValue;
   d4b2c:	4668      	mov	r0, sp
   d4b2e:	f001 f9c5 	bl	d5ebc <_ZN6StringD1Ev>


   d4b32:	b00d      	add	sp, #52	; 0x34
   d4b34:	f85d fb04 	ldr.w	pc, [sp], #4
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4b38:	a808      	add	r0, sp, #32
   d4b3a:	f001 f8b9 	bl	d5cb0 <spark_deviceID>
    client.connect(System.deviceID());
   d4b3e:	9908      	ldr	r1, [sp, #32]
   d4b40:	4806      	ldr	r0, [pc, #24]	; (d4b5c <loop+0xb8>)
   d4b42:	f000 fbeb 	bl	d531c <_ZN4MQTT7connectEPKc>
   d4b46:	a808      	add	r0, sp, #32
   d4b48:	f001 f9b8 	bl	d5ebc <_ZN6StringD1Ev>
   d4b4c:	e7e7      	b.n	d4b1e <loop+0x7a>
   d4b4e:	bf00      	nop
   d4b50:	2003e584 	.word	0x2003e584
   d4b54:	2003e640 	.word	0x2003e640
   d4b58:	000d74df 	.word	0x000d74df
   d4b5c:	2003e5e0 	.word	0x2003e5e0
   d4b60:	000d74a7 	.word	0x000d74a7
   d4b64:	000d74eb 	.word	0x000d74eb

000d4b68 <_GLOBAL__sub_I_Blynk>:
   d4b68:	b573      	push	{r0, r1, r4, r5, r6, lr}
        : domain(NULL), port(0)
   d4b6a:	4d19      	ldr	r5, [pc, #100]	; (d4bd0 <_GLOBAL__sub_I_Blynk+0x68>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4b6c:	4e19      	ldr	r6, [pc, #100]	; (d4bd4 <_GLOBAL__sub_I_Blynk+0x6c>)
   d4b6e:	4628      	mov	r0, r5
   d4b70:	2400      	movs	r4, #0
   d4b72:	f001 fffd 	bl	d6b70 <_ZN9TCPClientC1Ev>
   d4b76:	f105 001c 	add.w	r0, r5, #28
   d4b7a:	f001 fbcb 	bl	d6314 <_ZN9IPAddressC1Ev>
   d4b7e:	4632      	mov	r2, r6
   d4b80:	636c      	str	r4, [r5, #52]	; 0x34
   d4b82:	872c      	strh	r4, [r5, #56]	; 0x38
   d4b84:	4914      	ldr	r1, [pc, #80]	; (d4bd8 <_GLOBAL__sub_I_Blynk+0x70>)
   d4b86:	4628      	mov	r0, r5
   d4b88:	f002 fa6a 	bl	d7060 <__aeabi_atexit>
        , state(CONNECTING)
   d4b8c:	4b13      	ldr	r3, [pc, #76]	; (d4bdc <_GLOBAL__sub_I_Blynk+0x74>)
SYSTEM_THREAD(ENABLED);
   d4b8e:	4621      	mov	r1, r4
   d4b90:	e9c3 5400 	strd	r5, r4, [r3]
   d4b94:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4b98:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4b9c:	619c      	str	r4, [r3, #24]
   d4b9e:	839c      	strh	r4, [r3, #28]
MQTT client("lab.thewcl.com", 1883, callback);//which connection it should connect to
   d4ba0:	4d0f      	ldr	r5, [pc, #60]	; (d4be0 <_GLOBAL__sub_I_Blynk+0x78>)
SYSTEM_THREAD(ENABLED);
   d4ba2:	2001      	movs	r0, #1
   d4ba4:	f001 f800 	bl	d5ba8 <system_thread_set_state>
VCNL4040 sensor;
   d4ba8:	480e      	ldr	r0, [pc, #56]	; (d4be4 <_GLOBAL__sub_I_Blynk+0x7c>)
   d4baa:	f000 f827 	bl	d4bfc <_ZN8VCNL4040C1Ev>
MQTT client("lab.thewcl.com", 1883, callback);//which connection it should connect to
   d4bae:	4b0e      	ldr	r3, [pc, #56]	; (d4be8 <_GLOBAL__sub_I_Blynk+0x80>)
   d4bb0:	490e      	ldr	r1, [pc, #56]	; (d4bec <_GLOBAL__sub_I_Blynk+0x84>)
   d4bb2:	9400      	str	r4, [sp, #0]
   d4bb4:	f240 725b 	movw	r2, #1883	; 0x75b
   d4bb8:	4628      	mov	r0, r5
   d4bba:	f000 f9b5 	bl	d4f28 <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d4bbe:	490c      	ldr	r1, [pc, #48]	; (d4bf0 <_GLOBAL__sub_I_Blynk+0x88>)
   d4bc0:	4632      	mov	r2, r6
   d4bc2:	4628      	mov	r0, r5
   d4bc4:	b002      	add	sp, #8
   d4bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
MQTT client("lab.thewcl.com", 1883, callback);//which connection it should connect to
   d4bca:	f002 ba49 	b.w	d7060 <__aeabi_atexit>
   d4bce:	bf00      	nop
   d4bd0:	2003e5a4 	.word	0x2003e5a4
   d4bd4:	2003e580 	.word	0x2003e580
   d4bd8:	000d40e5 	.word	0x000d40e5
   d4bdc:	2003e584 	.word	0x2003e584
   d4be0:	2003e5e0 	.word	0x2003e5e0
   d4be4:	2003e640 	.word	0x2003e640
   d4be8:	000d40b3 	.word	0x000d40b3
   d4bec:	000d74f5 	.word	0x000d74f5
   d4bf0:	000d5781 	.word	0x000d5781

000d4bf4 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4bf4:	6803      	ldr	r3, [r0, #0]
   d4bf6:	b2c9      	uxtb	r1, r1
   d4bf8:	689b      	ldr	r3, [r3, #8]
   d4bfa:	4718      	bx	r3

000d4bfc <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   d4bfc:	4770      	bx	lr

000d4bfe <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   d4bfe:	b510      	push	{r4, lr}
   d4c00:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   d4c02:	2160      	movs	r1, #96	; 0x60
   d4c04:	6800      	ldr	r0, [r0, #0]
   d4c06:	f001 fd59 	bl	d66bc <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   d4c0a:	6820      	ldr	r0, [r4, #0]
   d4c0c:	f001 fd5e 	bl	d66cc <_ZN7TwoWire15endTransmissionEv>
}
   d4c10:	fab0 f080 	clz	r0, r0
   d4c14:	0940      	lsrs	r0, r0, #5
   d4c16:	bd10      	pop	{r4, pc}

000d4c18 <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   d4c18:	b538      	push	{r3, r4, r5, lr}
   d4c1a:	4605      	mov	r5, r0
   d4c1c:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d4c1e:	6800      	ldr	r0, [r0, #0]
   d4c20:	2160      	movs	r1, #96	; 0x60
   d4c22:	f001 fd4b 	bl	d66bc <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d4c26:	6828      	ldr	r0, [r5, #0]
   d4c28:	6803      	ldr	r3, [r0, #0]
   d4c2a:	4621      	mov	r1, r4
   d4c2c:	689b      	ldr	r3, [r3, #8]
   d4c2e:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d4c30:	6828      	ldr	r0, [r5, #0]
   d4c32:	2100      	movs	r1, #0
   d4c34:	f001 fd46 	bl	d66c4 <_ZN7TwoWire15endTransmissionEh>
   d4c38:	b108      	cbz	r0, d4c3e <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   d4c3a:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   d4c3c:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   d4c3e:	6828      	ldr	r0, [r5, #0]
   d4c40:	2202      	movs	r2, #2
   d4c42:	2160      	movs	r1, #96	; 0x60
   d4c44:	f001 fd37 	bl	d66b6 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d4c48:	6828      	ldr	r0, [r5, #0]
   d4c4a:	6803      	ldr	r3, [r0, #0]
   d4c4c:	691b      	ldr	r3, [r3, #16]
   d4c4e:	4798      	blx	r3
   d4c50:	2800      	cmp	r0, #0
   d4c52:	d0f2      	beq.n	d4c3a <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   d4c54:	6828      	ldr	r0, [r5, #0]
   d4c56:	6803      	ldr	r3, [r0, #0]
   d4c58:	695b      	ldr	r3, [r3, #20]
   d4c5a:	4798      	blx	r3
   d4c5c:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   d4c5e:	6828      	ldr	r0, [r5, #0]
   d4c60:	6803      	ldr	r3, [r0, #0]
   d4c62:	695b      	ldr	r3, [r3, #20]
   d4c64:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d4c66:	b2e4      	uxtb	r4, r4
   d4c68:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d4c6c:	b280      	uxth	r0, r0
   d4c6e:	e7e5      	b.n	d4c3c <_ZN8VCNL404011readCommandEh+0x24>

000d4c70 <_ZN8VCNL404012getProximityEv>:
  return (readCommand(VCNL4040_PS_DATA));
   d4c70:	2108      	movs	r1, #8
   d4c72:	f7ff bfd1 	b.w	d4c18 <_ZN8VCNL404011readCommandEh>

000d4c76 <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   d4c76:	2109      	movs	r1, #9
   d4c78:	f7ff bfce 	b.w	d4c18 <_ZN8VCNL404011readCommandEh>

000d4c7c <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   d4c7c:	210c      	movs	r1, #12
   d4c7e:	f7ff bfcb 	b.w	d4c18 <_ZN8VCNL404011readCommandEh>

000d4c82 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   d4c82:	b570      	push	{r4, r5, r6, lr}
   d4c84:	4604      	mov	r4, r0
   d4c86:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d4c88:	6800      	ldr	r0, [r0, #0]
   d4c8a:	2160      	movs	r1, #96	; 0x60
{
   d4c8c:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d4c8e:	f001 fd15 	bl	d66bc <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d4c92:	6820      	ldr	r0, [r4, #0]
   d4c94:	6803      	ldr	r3, [r0, #0]
   d4c96:	4631      	mov	r1, r6
   d4c98:	689b      	ldr	r3, [r3, #8]
   d4c9a:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   d4c9c:	b2e9      	uxtb	r1, r5
   d4c9e:	6820      	ldr	r0, [r4, #0]
   d4ca0:	f7ff ffa8 	bl	d4bf4 <_ZN7TwoWire5writeEi>
  _i2cPort->write(value >> 8); //MSB
   d4ca4:	0a29      	lsrs	r1, r5, #8
   d4ca6:	6820      	ldr	r0, [r4, #0]
   d4ca8:	f7ff ffa4 	bl	d4bf4 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d4cac:	6820      	ldr	r0, [r4, #0]
   d4cae:	f001 fd0d 	bl	d66cc <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   d4cb2:	fab0 f080 	clz	r0, r0
   d4cb6:	0940      	lsrs	r0, r0, #5
   d4cb8:	bd70      	pop	{r4, r5, r6, pc}

000d4cba <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   d4cba:	b570      	push	{r4, r5, r6, lr}
   d4cbc:	4604      	mov	r4, r0
   d4cbe:	460d      	mov	r5, r1
   d4cc0:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d4cc2:	f7ff ffa9 	bl	d4c18 <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   d4cc6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   d4cca:	ea40 0206 	orr.w	r2, r0, r6
   d4cce:	4629      	mov	r1, r5
   d4cd0:	4620      	mov	r0, r4
}
   d4cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d4cd6:	f7ff bfd4 	b.w	d4c82 <_ZN8VCNL404012writeCommandEht>

000d4cda <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   d4cda:	b570      	push	{r4, r5, r6, lr}
   d4cdc:	4604      	mov	r4, r0
   d4cde:	460d      	mov	r5, r1
   d4ce0:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d4ce2:	f7ff ff99 	bl	d4c18 <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   d4ce6:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   d4ce8:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   d4cec:	4629      	mov	r1, r5
   d4cee:	4620      	mov	r0, r4
}
   d4cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d4cf4:	f7ff bfc5 	b.w	d4c82 <_ZN8VCNL404012writeCommandEht>

000d4cf8 <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   d4cf8:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   d4cfa:	f7ff ff8d 	bl	d4c18 <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   d4cfe:	f3c0 2007 	ubfx	r0, r0, #8, #8
   d4d02:	bd08      	pop	{r3, pc}

000d4d04 <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   d4d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d08:	4604      	mov	r4, r0
   d4d0a:	f89d 7018 	ldrb.w	r7, [sp, #24]
   d4d0e:	460d      	mov	r5, r1
   d4d10:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   d4d12:	4616      	mov	r6, r2
   d4d14:	b16a      	cbz	r2, d4d32 <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   d4d16:	f7ff ff7f 	bl	d4c18 <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   d4d1a:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   d4d1c:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   d4d20:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d4d24:	4629      	mov	r1, r5
   d4d26:	4620      	mov	r0, r4
   d4d28:	b136      	cbz	r6, d4d38 <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   d4d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d4d2e:	f7ff bfc4 	b.w	d4cba <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   d4d32:	f7ff ffe1 	bl	d4cf8 <_ZN8VCNL404016readCommandUpperEh>
   d4d36:	e7f1      	b.n	d4d1c <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   d4d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   d4d3c:	f7ff bfcd 	b.w	d4cda <_ZN8VCNL404017writeCommandUpperEhh>

000d4d40 <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d4d40:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   d4d44:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d4d46:	d20e      	bcs.n	d4d66 <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d4d48:	299f      	cmp	r1, #159	; 0x9f
   d4d4a:	d80e      	bhi.n	d4d6a <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else if(dutyValue > 80 - 1) dutyValue = VCNL4040_PS_DUTY_80;
   d4d4c:	294f      	cmp	r1, #79	; 0x4f
  else dutyValue = VCNL4040_PS_DUTY_40;
   d4d4e:	bf8c      	ite	hi
   d4d50:	2340      	movhi	r3, #64	; 0x40
   d4d52:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   d4d54:	9300      	str	r3, [sp, #0]
   d4d56:	2201      	movs	r2, #1
   d4d58:	233f      	movs	r3, #63	; 0x3f
   d4d5a:	2103      	movs	r1, #3
   d4d5c:	f7ff ffd2 	bl	d4d04 <_ZN8VCNL40407bitMaskEhbhh>
}
   d4d60:	b003      	add	sp, #12
   d4d62:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d4d66:	23c0      	movs	r3, #192	; 0xc0
   d4d68:	e7f4      	b.n	d4d54 <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d4d6a:	2380      	movs	r3, #128	; 0x80
   d4d6c:	e7f2      	b.n	d4d54 <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000d4d6e <_ZN8VCNL404014powerOnAmbientEv>:
{
   d4d6e:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   d4d70:	2100      	movs	r1, #0
   d4d72:	9100      	str	r1, [sp, #0]
   d4d74:	23fe      	movs	r3, #254	; 0xfe
   d4d76:	2201      	movs	r2, #1
   d4d78:	f7ff ffc4 	bl	d4d04 <_ZN8VCNL40407bitMaskEhbhh>
}
   d4d7c:	b003      	add	sp, #12
   d4d7e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d82 <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d4d82:	2907      	cmp	r1, #7
{
   d4d84:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d4d86:	d80f      	bhi.n	d4da8 <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d4d88:	2903      	cmp	r1, #3
   d4d8a:	d80f      	bhi.n	d4dac <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d4d8c:	d010      	beq.n	d4db0 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else if(timeValue > 2 - 1) timeValue = VCNL4040_PS_IT_2T;
   d4d8e:	2902      	cmp	r1, #2
  else timeValue = VCNL4040_PS_IT_1T;
   d4d90:	bf0c      	ite	eq
   d4d92:	2304      	moveq	r3, #4
   d4d94:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   d4d96:	9300      	str	r3, [sp, #0]
   d4d98:	2201      	movs	r2, #1
   d4d9a:	23f1      	movs	r3, #241	; 0xf1
   d4d9c:	2103      	movs	r1, #3
   d4d9e:	f7ff ffb1 	bl	d4d04 <_ZN8VCNL40407bitMaskEhbhh>
}
   d4da2:	b003      	add	sp, #12
   d4da4:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d4da8:	230e      	movs	r3, #14
   d4daa:	e7f4      	b.n	d4d96 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d4dac:	230c      	movs	r3, #12
   d4dae:	e7f2      	b.n	d4d96 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d4db0:	2308      	movs	r3, #8
   d4db2:	e7f0      	b.n	d4d96 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000d4db4 <_ZN8VCNL404016powerOnProximityEv>:
{
   d4db4:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   d4db6:	2300      	movs	r3, #0
   d4db8:	9300      	str	r3, [sp, #0]
   d4dba:	2201      	movs	r2, #1
   d4dbc:	23fe      	movs	r3, #254	; 0xfe
   d4dbe:	2103      	movs	r1, #3
   d4dc0:	f7ff ffa0 	bl	d4d04 <_ZN8VCNL40407bitMaskEhbhh>
}
   d4dc4:	b003      	add	sp, #12
   d4dc6:	f85d fb04 	ldr.w	pc, [sp], #4

000d4dca <_ZN8VCNL404017setProxResolutionEh>:
{
   d4dca:	b507      	push	{r0, r1, r2, lr}
	if(resolutionValue > 16 - 1) resolutionValue = VCNL4040_PS_HD_16_BIT;
   d4dcc:	290f      	cmp	r1, #15
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   d4dce:	bf8c      	ite	hi
   d4dd0:	2308      	movhi	r3, #8
   d4dd2:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   d4dd4:	9300      	str	r3, [sp, #0]
   d4dd6:	2200      	movs	r2, #0
   d4dd8:	23f7      	movs	r3, #247	; 0xf7
   d4dda:	2103      	movs	r1, #3
   d4ddc:	f7ff ff92 	bl	d4d04 <_ZN8VCNL40407bitMaskEhbhh>
}
   d4de0:	b003      	add	sp, #12
   d4de2:	f85d fb04 	ldr.w	pc, [sp], #4

000d4de6 <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   d4de6:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   d4de8:	2302      	movs	r3, #2
   d4dea:	9300      	str	r3, [sp, #0]
   d4dec:	2201      	movs	r2, #1
   d4dee:	23ef      	movs	r3, #239	; 0xef
   d4df0:	2104      	movs	r1, #4
   d4df2:	f7ff ff87 	bl	d4d04 <_ZN8VCNL40407bitMaskEhbhh>
}
   d4df6:	b003      	add	sp, #12
   d4df8:	f85d fb04 	ldr.w	pc, [sp], #4

000d4dfc <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d4dfc:	29c7      	cmp	r1, #199	; 0xc7
{
   d4dfe:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d4e00:	d816      	bhi.n	d4e30 <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d4e02:	29b3      	cmp	r1, #179	; 0xb3
   d4e04:	d816      	bhi.n	d4e34 <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d4e06:	299f      	cmp	r1, #159	; 0x9f
   d4e08:	d816      	bhi.n	d4e38 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d4e0a:	298b      	cmp	r1, #139	; 0x8b
   d4e0c:	d816      	bhi.n	d4e3c <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d4e0e:	2977      	cmp	r1, #119	; 0x77
   d4e10:	d816      	bhi.n	d4e40 <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d4e12:	2963      	cmp	r1, #99	; 0x63
   d4e14:	d816      	bhi.n	d4e44 <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d4e16:	294a      	cmp	r1, #74	; 0x4a
   d4e18:	bf94      	ite	ls
   d4e1a:	2100      	movls	r1, #0
   d4e1c:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   d4e1e:	9100      	str	r1, [sp, #0]
   d4e20:	23f8      	movs	r3, #248	; 0xf8
   d4e22:	2200      	movs	r2, #0
   d4e24:	2104      	movs	r1, #4
   d4e26:	f7ff ff6d 	bl	d4d04 <_ZN8VCNL40407bitMaskEhbhh>
}
   d4e2a:	b003      	add	sp, #12
   d4e2c:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d4e30:	2107      	movs	r1, #7
   d4e32:	e7f4      	b.n	d4e1e <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d4e34:	2106      	movs	r1, #6
   d4e36:	e7f2      	b.n	d4e1e <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d4e38:	2105      	movs	r1, #5
   d4e3a:	e7f0      	b.n	d4e1e <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d4e3c:	2104      	movs	r1, #4
   d4e3e:	e7ee      	b.n	d4e1e <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d4e40:	2103      	movs	r1, #3
   d4e42:	e7ec      	b.n	d4e1e <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d4e44:	2102      	movs	r1, #2
   d4e46:	e7ea      	b.n	d4e1e <_ZN8VCNL404013setLEDCurrentEh+0x22>

000d4e48 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   d4e48:	b538      	push	{r3, r4, r5, lr}
   d4e4a:	4604      	mov	r4, r0
   d4e4c:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d4e4e:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   d4e50:	f001 fc02 	bl	d6658 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   d4e54:	4620      	mov	r0, r4
   d4e56:	f7ff fed2 	bl	d4bfe <_ZN8VCNL404011isConnectedEv>
   d4e5a:	4605      	mov	r5, r0
   d4e5c:	b910      	cbnz	r0, d4e64 <_ZN8VCNL40405beginER7TwoWire+0x1c>
   d4e5e:	2500      	movs	r5, #0
}
   d4e60:	4628      	mov	r0, r5
   d4e62:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   d4e64:	4620      	mov	r0, r4
   d4e66:	f7ff ff09 	bl	d4c7c <_ZN8VCNL40405getIDEv>
   d4e6a:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   d4e6e:	d1f6      	bne.n	d4e5e <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   d4e70:	4620      	mov	r0, r4
   d4e72:	21c8      	movs	r1, #200	; 0xc8
   d4e74:	f7ff ffc2 	bl	d4dfc <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   d4e78:	4620      	mov	r0, r4
   d4e7a:	2128      	movs	r1, #40	; 0x28
   d4e7c:	f7ff ff60 	bl	d4d40 <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   d4e80:	4620      	mov	r0, r4
   d4e82:	2108      	movs	r1, #8
   d4e84:	f7ff ff7d 	bl	d4d82 <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   d4e88:	2110      	movs	r1, #16
   d4e8a:	4620      	mov	r0, r4
   d4e8c:	f7ff ff9d 	bl	d4dca <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   d4e90:	4620      	mov	r0, r4
   d4e92:	f7ff ffa8 	bl	d4de6 <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   d4e96:	4620      	mov	r0, r4
   d4e98:	f7ff ff8c 	bl	d4db4 <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   d4e9c:	e7e0      	b.n	d4e60 <_ZN8VCNL40405beginER7TwoWire+0x18>

000d4e9e <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d4e9e:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d4ea2:	b510      	push	{r4, lr}
   d4ea4:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d4ea6:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d4ea8:	b113      	cbz	r3, d4eb0 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d4eaa:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d4eac:	f000 fd1c 	bl	d58e8 <os_mutex_lock>
#endif
#endif
#endif
        }
   d4eb0:	4620      	mov	r0, r4
   d4eb2:	bd10      	pop	{r4, pc}

000d4eb4 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d4eb4:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d4eb6:	6803      	ldr	r3, [r0, #0]
   d4eb8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d4ebc:	4604      	mov	r4, r0
            if (mqtt->thread)
   d4ebe:	b112      	cbz	r2, d4ec6 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d4ec0:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d4ec2:	f000 fd19 	bl	d58f8 <os_mutex_unlock>
#endif
#endif
#endif
        }
   d4ec6:	4620      	mov	r0, r4
   d4ec8:	bd10      	pop	{r4, pc}

000d4eca <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d4eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ecc:	461f      	mov	r7, r3
   d4ece:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d4ed2:	4604      	mov	r4, r0
   d4ed4:	460d      	mov	r5, r1
   d4ed6:	4616      	mov	r6, r2
    if (thread) {
   d4ed8:	b12b      	cbz	r3, d4ee6 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d4eda:	2301      	movs	r3, #1
   d4edc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d4ee0:	3058      	adds	r0, #88	; 0x58
   d4ee2:	f000 fcf9 	bl	d58d8 <os_mutex_create>
    }
    this->callback = callback;
   d4ee6:	9b08      	ldr	r3, [sp, #32]
   d4ee8:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d4eea:	2300      	movs	r3, #0
   d4eec:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d4eee:	b106      	cbz	r6, d4ef2 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d4ef0:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d4ef2:	b125      	cbz	r5, d4efe <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d4ef4:	4629      	mov	r1, r5
   d4ef6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4efa:	f001 f83e 	bl	d5f7a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4efe:	9b06      	ldr	r3, [sp, #24]
   d4f00:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4f02:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d4f04:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d4f06:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4f0a:	2bff      	cmp	r3, #255	; 0xff
   d4f0c:	bfb8      	it	lt
   d4f0e:	23ff      	movlt	r3, #255	; 0xff
   d4f10:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d4f14:	b108      	cbz	r0, d4f1a <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d4f16:	f7ff f8c2 	bl	d409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4f1a:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d4f1e:	f7ff f8ba 	bl	d4096 <_Znaj>
   d4f22:	61e0      	str	r0, [r4, #28]
}
   d4f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4f28 <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4f28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4f2c:	4604      	mov	r4, r0
            bool thread) {
   d4f2e:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4f30:	4617      	mov	r7, r2
   d4f32:	4698      	mov	r8, r3
   d4f34:	460e      	mov	r6, r1
            bool thread) {
   d4f36:	f001 fe1b 	bl	d6b70 <_ZN9TCPClientC1Ev>
   d4f3a:	490d      	ldr	r1, [pc, #52]	; (d4f70 <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d4f3c:	61e5      	str	r5, [r4, #28]
   d4f3e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4f42:	f001 f806 	bl	d5f52 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4f46:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d4f4a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4f4c:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d4f50:	22ff      	movs	r2, #255	; 0xff
   d4f52:	230f      	movs	r3, #15
   d4f54:	e9cd 3200 	strd	r3, r2, [sp]
   d4f58:	4620      	mov	r0, r4
            bool thread) {
   d4f5a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4f5e:	463b      	mov	r3, r7
   d4f60:	462a      	mov	r2, r5
   d4f62:	4631      	mov	r1, r6
   d4f64:	f7ff ffb1 	bl	d4eca <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d4f68:	4620      	mov	r0, r4
   d4f6a:	b004      	add	sp, #16
   d4f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f70:	000d74de 	.word	0x000d74de

000d4f74 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4f74:	b510      	push	{r4, lr}
   d4f76:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d4f78:	4620      	mov	r0, r4
   d4f7a:	f001 fd55 	bl	d6a28 <_ZN9TCPClient9availableEv>
   d4f7e:	2800      	cmp	r0, #0
   d4f80:	d0fa      	beq.n	d4f78 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d4f82:	4620      	mov	r0, r4
   d4f84:	f001 fc89 	bl	d689a <_ZN9TCPClient4readEv>
}
   d4f88:	b2c0      	uxtb	r0, r0
   d4f8a:	bd10      	pop	{r4, pc}

000d4f8c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4f90:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4f92:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4f94:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d4f96:	f7ff ffed 	bl	d4f74 <_ZN4MQTT8readByteEv>
   d4f9a:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4f9c:	69eb      	ldr	r3, [r5, #28]
   d4f9e:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d4fa2:	f04f 0901 	mov.w	r9, #1
   d4fa6:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d4faa:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d4fae:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d4fb0:	4628      	mov	r0, r5
   d4fb2:	f7ff ffdf 	bl	d4f74 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4fb6:	4626      	mov	r6, r4
   d4fb8:	69eb      	ldr	r3, [r5, #28]
   d4fba:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4fbc:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4fc0:	fb13 f309 	smulbb	r3, r3, r9
   d4fc4:	4498      	add	r8, r3
        buffer[len++] = digit;
   d4fc6:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4fc8:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d4fca:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4fcc:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d4fd0:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d4fd4:	d4ec      	bmi.n	d4fb0 <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d4fd6:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4fd8:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d4fdc:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d4fde:	d124      	bne.n	d502a <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4fe0:	4628      	mov	r0, r5
   d4fe2:	69ef      	ldr	r7, [r5, #28]
   d4fe4:	f7ff ffc6 	bl	d4f74 <_ZN4MQTT8readByteEv>
   d4fe8:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d4fea:	4628      	mov	r0, r5
   d4fec:	69ef      	ldr	r7, [r5, #28]
   d4fee:	1cf4      	adds	r4, r6, #3
   d4ff0:	f7ff ffc0 	bl	d4f74 <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d4ff4:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d4ff6:	b2b6      	uxth	r6, r6
   d4ff8:	b2a4      	uxth	r4, r4
   d4ffa:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4ffc:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4ffe:	b2b6      	uxth	r6, r6
   d5000:	46b1      	mov	r9, r6
   d5002:	4627      	mov	r7, r4
   d5004:	45c1      	cmp	r9, r8
   d5006:	d212      	bcs.n	d502e <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d5008:	4628      	mov	r0, r5
   d500a:	f7ff ffb3 	bl	d4f74 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d500e:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d5012:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d5014:	bf88      	it	hi
   d5016:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d5018:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d501c:	bf88      	it	hi
   d501e:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d5020:	3701      	adds	r7, #1
   d5022:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d5024:	fa1f f989 	uxth.w	r9, r9
   d5028:	e7ec      	b.n	d5004 <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d502a:	2600      	movs	r6, #0
   d502c:	e7e7      	b.n	d4ffe <_ZN4MQTT10readPacketEPh+0x72>
   d502e:	eba8 0006 	sub.w	r0, r8, r6
   d5032:	45b0      	cmp	r8, r6
   d5034:	bf2c      	ite	cs
   d5036:	4606      	movcs	r6, r0
   d5038:	2600      	movcc	r6, #0
   d503a:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d503c:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d5040:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d5042:	42a0      	cmp	r0, r4
   d5044:	bf2c      	ite	cs
   d5046:	4620      	movcs	r0, r4
   d5048:	2000      	movcc	r0, #0
   d504a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d504e <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d504e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5050:	468c      	mov	ip, r1
   d5052:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d5054:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d5056:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d5058:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d505a:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d505c:	a802      	add	r0, sp, #8
        digit = len % 128;
   d505e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d5062:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d5066:	f103 0401 	add.w	r4, r3, #1
   d506a:	4403      	add	r3, r0
            digit |= 0x80;
   d506c:	bf88      	it	hi
   d506e:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d5072:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d5076:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d507a:	b2e4      	uxtb	r4, r4
   d507c:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d5080:	d810      	bhi.n	d50a4 <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d5082:	f1c4 0304 	rsb	r3, r4, #4
   d5086:	18d1      	adds	r1, r2, r3
   d5088:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d508c:	f1c4 0305 	rsb	r3, r4, #5
   d5090:	4413      	add	r3, r2
   d5092:	a801      	add	r0, sp, #4
   d5094:	3205      	adds	r2, #5
   d5096:	4293      	cmp	r3, r2
   d5098:	d006      	beq.n	d50a8 <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d509a:	f810 5b01 	ldrb.w	r5, [r0], #1
   d509e:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d50a2:	e7f8      	b.n	d5096 <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d50a4:	4623      	mov	r3, r4
   d50a6:	e7d8      	b.n	d505a <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d50a8:	1c72      	adds	r2, r6, #1
   d50aa:	4422      	add	r2, r4
   d50ac:	4638      	mov	r0, r7
   d50ae:	f001 fb1d 	bl	d66ec <_ZN9TCPClient5writeEPKhj>
   d50b2:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d50b4:	f000 fc08 	bl	d58c8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d50b8:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d50ba:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d50bc:	4432      	add	r2, r6
   d50be:	b2a8      	uxth	r0, r5
}
   d50c0:	1a13      	subs	r3, r2, r0
   d50c2:	4258      	negs	r0, r3
   d50c4:	4158      	adcs	r0, r3
   d50c6:	b003      	add	sp, #12
   d50c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50ca <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d50ca:	b513      	push	{r0, r1, r4, lr}
   d50cc:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d50ce:	4601      	mov	r1, r0
   d50d0:	a801      	add	r0, sp, #4
   d50d2:	f7ff fee4 	bl	d4e9e <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d50d6:	69e3      	ldr	r3, [r4, #28]
   d50d8:	22e0      	movs	r2, #224	; 0xe0
   d50da:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d50dc:	69e3      	ldr	r3, [r4, #28]
   d50de:	2200      	movs	r2, #0
   d50e0:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d50e2:	69e1      	ldr	r1, [r4, #28]
   d50e4:	2202      	movs	r2, #2
   d50e6:	4620      	mov	r0, r4
   d50e8:	f001 fb00 	bl	d66ec <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d50ec:	4620      	mov	r0, r4
   d50ee:	f001 fcf5 	bl	d6adc <_ZN9TCPClient4stopEv>
   d50f2:	f000 fbe9 	bl	d58c8 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d50f6:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d50fa:	a801      	add	r0, sp, #4
   d50fc:	f7ff feda 	bl	d4eb4 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5100:	b002      	add	sp, #8
   d5102:	bd10      	pop	{r4, pc}

000d5104 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5104:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d5106:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5108:	4604      	mov	r4, r0
    pos += 2;
   d510a:	b298      	uxth	r0, r3
   d510c:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d510e:	5ccd      	ldrb	r5, [r1, r3]
   d5110:	b155      	cbz	r5, d5128 <_ZN4MQTT11writeStringEPKcPht+0x24>
   d5112:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d5116:	4286      	cmp	r6, r0
   d5118:	f103 0701 	add.w	r7, r3, #1
   d511c:	d904      	bls.n	d5128 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d511e:	1c46      	adds	r6, r0, #1
   d5120:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d5122:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d5124:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d5126:	e7f2      	b.n	d510e <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d5128:	b299      	uxth	r1, r3
   d512a:	1a44      	subs	r4, r0, r1
   d512c:	4422      	add	r2, r4
   d512e:	1209      	asrs	r1, r1, #8
   d5130:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d5134:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d5138:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d513a <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d513a:	b538      	push	{r3, r4, r5, lr}
   d513c:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d513e:	f001 faeb 	bl	d6718 <_ZN9TCPClient9connectedEv>
   d5142:	2800      	cmp	r0, #0
   d5144:	bf14      	ite	ne
   d5146:	2501      	movne	r5, #1
   d5148:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d514a:	d102      	bne.n	d5152 <_ZN4MQTT11isConnectedEv+0x18>
   d514c:	4620      	mov	r0, r4
   d514e:	f001 fcc5 	bl	d6adc <_ZN9TCPClient4stopEv>
    return rc;
}
   d5152:	4628      	mov	r0, r5
   d5154:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5158 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d5158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d515c:	b088      	sub	sp, #32
   d515e:	4604      	mov	r4, r0
   d5160:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d5164:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d5168:	4689      	mov	r9, r1
   d516a:	4617      	mov	r7, r2
   d516c:	461e      	mov	r6, r3
    if (!isConnected()) {
   d516e:	f7ff ffe4 	bl	d513a <_ZN4MQTT11isConnectedEv>
   d5172:	4605      	mov	r5, r0
   d5174:	2800      	cmp	r0, #0
   d5176:	f040 80cb 	bne.w	d5310 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d517a:	4621      	mov	r1, r4
   d517c:	a801      	add	r0, sp, #4
   d517e:	f7ff fe8e 	bl	d4e9e <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d5182:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5184:	2900      	cmp	r1, #0
   d5186:	f040 8087 	bne.w	d5298 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d518a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d518e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5190:	462b      	mov	r3, r5
   d5192:	4620      	mov	r0, r4
   d5194:	f001 fd00 	bl	d6b98 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d5198:	2800      	cmp	r0, #0
   d519a:	d079      	beq.n	d5290 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d519c:	2301      	movs	r3, #1
   d519e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d51a0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d51a4:	69e2      	ldr	r2, [r4, #28]
   d51a6:	2b04      	cmp	r3, #4
   d51a8:	f040 8081 	bne.w	d52ae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d51ac:	4b59      	ldr	r3, [pc, #356]	; (d5314 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d51ae:	6818      	ldr	r0, [r3, #0]
   d51b0:	8899      	ldrh	r1, [r3, #4]
   d51b2:	799b      	ldrb	r3, [r3, #6]
   d51b4:	f8ad 100c 	strh.w	r1, [sp, #12]
   d51b8:	f88d 300e 	strb.w	r3, [sp, #14]
   d51bc:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d51be:	f8c2 0005 	str.w	r0, [r2, #5]
   d51c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d51c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d51ca:	f8a2 1009 	strh.w	r1, [r2, #9]
   d51ce:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d51d0:	230c      	movs	r3, #12
            if (willTopic) {
   d51d2:	f1b8 0f00 	cmp.w	r8, #0
   d51d6:	d07f      	beq.n	d52d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d51d8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d51dc:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d51e0:	0140      	lsls	r0, r0, #5
   d51e2:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d51e6:	f040 0006 	orr.w	r0, r0, #6
   d51ea:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d51ec:	f1ba 0f00 	cmp.w	sl, #0
   d51f0:	d101      	bne.n	d51f6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d51f2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d51f6:	b11f      	cbz	r7, d5200 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d51f8:	2e00      	cmp	r6, #0
   d51fa:	d16f      	bne.n	d52dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d51fc:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d5200:	69e2      	ldr	r2, [r4, #28]
   d5202:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d5204:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5206:	69e1      	ldr	r1, [r4, #28]
   d5208:	1c58      	adds	r0, r3, #1
   d520a:	1212      	asrs	r2, r2, #8
   d520c:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d520e:	1c9a      	adds	r2, r3, #2
   d5210:	69e1      	ldr	r1, [r4, #28]
   d5212:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5214:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5216:	3303      	adds	r3, #3
   d5218:	69e2      	ldr	r2, [r4, #28]
   d521a:	4649      	mov	r1, r9
   d521c:	4620      	mov	r0, r4
   d521e:	f7ff ff71 	bl	d5104 <_ZN4MQTT11writeStringEPKcPht>
   d5222:	4603      	mov	r3, r0
            if (willTopic) {
   d5224:	f1b8 0f00 	cmp.w	r8, #0
   d5228:	d00b      	beq.n	d5242 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d522a:	69e2      	ldr	r2, [r4, #28]
   d522c:	4641      	mov	r1, r8
   d522e:	4620      	mov	r0, r4
   d5230:	f7ff ff68 	bl	d5104 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5234:	69e2      	ldr	r2, [r4, #28]
   d5236:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d5238:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d523a:	4620      	mov	r0, r4
   d523c:	f7ff ff62 	bl	d5104 <_ZN4MQTT11writeStringEPKcPht>
   d5240:	4603      	mov	r3, r0
            if(user != NULL) {
   d5242:	b167      	cbz	r7, d525e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d5244:	69e2      	ldr	r2, [r4, #28]
   d5246:	4639      	mov	r1, r7
   d5248:	4620      	mov	r0, r4
   d524a:	f7ff ff5b 	bl	d5104 <_ZN4MQTT11writeStringEPKcPht>
   d524e:	4603      	mov	r3, r0
                if(pass != NULL) {
   d5250:	b12e      	cbz	r6, d525e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d5252:	69e2      	ldr	r2, [r4, #28]
   d5254:	4631      	mov	r1, r6
   d5256:	4620      	mov	r0, r4
   d5258:	f7ff ff54 	bl	d5104 <_ZN4MQTT11writeStringEPKcPht>
   d525c:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d525e:	3b05      	subs	r3, #5
   d5260:	69e2      	ldr	r2, [r4, #28]
   d5262:	b29b      	uxth	r3, r3
   d5264:	2110      	movs	r1, #16
   d5266:	4620      	mov	r0, r4
   d5268:	f7ff fef1 	bl	d504e <_ZN4MQTT5writeEhPht>
   d526c:	f000 fb2c 	bl	d58c8 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d5270:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5274:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d5278:	4620      	mov	r0, r4
   d527a:	f001 fbd5 	bl	d6a28 <_ZN9TCPClient9availableEv>
   d527e:	bb80      	cbnz	r0, d52e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d5280:	f000 fb22 	bl	d58c8 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5286:	1ac0      	subs	r0, r0, r3
   d5288:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d528a:	4373      	muls	r3, r6
   d528c:	4298      	cmp	r0, r3
   d528e:	d9f3      	bls.n	d5278 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d5290:	4620      	mov	r0, r4
   d5292:	f001 fc23 	bl	d6adc <_ZN9TCPClient4stopEv>
   d5296:	e034      	b.n	d5302 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d5298:	a802      	add	r0, sp, #8
   d529a:	f001 f88b 	bl	d63b4 <_ZN9IPAddressC1EPKh>
   d529e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d52a2:	462b      	mov	r3, r5
   d52a4:	a902      	add	r1, sp, #8
   d52a6:	4620      	mov	r0, r4
   d52a8:	f001 fb43 	bl	d6932 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d52ac:	e774      	b.n	d5198 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d52ae:	4b1a      	ldr	r3, [pc, #104]	; (d5318 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d52b0:	6818      	ldr	r0, [r3, #0]
   d52b2:	6859      	ldr	r1, [r3, #4]
   d52b4:	7a1b      	ldrb	r3, [r3, #8]
   d52b6:	f10d 0c08 	add.w	ip, sp, #8
   d52ba:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d52be:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d52c2:	ab02      	add	r3, sp, #8
   d52c4:	cb03      	ldmia	r3!, {r0, r1}
   d52c6:	f8c2 0005 	str.w	r0, [r2, #5]
   d52ca:	f8c2 1009 	str.w	r1, [r2, #9]
   d52ce:	f89c 3000 	ldrb.w	r3, [ip]
   d52d2:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d52d4:	230e      	movs	r3, #14
   d52d6:	e77c      	b.n	d51d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d52d8:	2002      	movs	r0, #2
   d52da:	e787      	b.n	d51ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d52dc:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d52e0:	e78e      	b.n	d5200 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d52e2:	a902      	add	r1, sp, #8
   d52e4:	4620      	mov	r0, r4
   d52e6:	f7ff fe51 	bl	d4f8c <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d52ea:	2804      	cmp	r0, #4
   d52ec:	d1d0      	bne.n	d5290 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d52ee:	69e3      	ldr	r3, [r4, #28]
   d52f0:	78de      	ldrb	r6, [r3, #3]
   d52f2:	2e00      	cmp	r6, #0
   d52f4:	d1cc      	bne.n	d5290 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d52f6:	f000 fae7 	bl	d58c8 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d52fa:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d52fc:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d52fe:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d5302:	a801      	add	r0, sp, #4
   d5304:	f7ff fdd6 	bl	d4eb4 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5308:	4628      	mov	r0, r5
   d530a:	b008      	add	sp, #32
   d530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d5310:	2500      	movs	r5, #0
   d5312:	e7f9      	b.n	d5308 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d5314:	000d7557 	.word	0x000d7557
   d5318:	000d755e 	.word	0x000d755e

000d531c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   d531c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d531e:	2301      	movs	r3, #1
   d5320:	2204      	movs	r2, #4
   d5322:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d5326:	2300      	movs	r3, #0
   d5328:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d532c:	e9cd 3300 	strd	r3, r3, [sp]
   d5330:	461a      	mov	r2, r3
   d5332:	f7ff ff11 	bl	d5158 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5336:	b007      	add	sp, #28
   d5338:	f85d fb04 	ldr.w	pc, [sp], #4

000d533c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d533c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5340:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d5344:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d5348:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d534c:	4604      	mov	r4, r0
   d534e:	468b      	mov	fp, r1
   d5350:	4616      	mov	r6, r2
   d5352:	461f      	mov	r7, r3
    if (isConnected()) {
   d5354:	f7ff fef1 	bl	d513a <_ZN4MQTT11isConnectedEv>
   d5358:	4682      	mov	sl, r0
   d535a:	2800      	cmp	r0, #0
   d535c:	d051      	beq.n	d5402 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   d535e:	4621      	mov	r1, r4
   d5360:	a801      	add	r0, sp, #4
   d5362:	f7ff fd9c 	bl	d4e9e <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   d5366:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d536a:	69e0      	ldr	r0, [r4, #28]
   d536c:	2100      	movs	r1, #0
   d536e:	f001 ffb7 	bl	d72e0 <memset>
        length = writeString(topic, buffer, length);
   d5372:	2305      	movs	r3, #5
   d5374:	69e2      	ldr	r2, [r4, #28]
   d5376:	4659      	mov	r1, fp
   d5378:	4620      	mov	r0, r4
   d537a:	f7ff fec3 	bl	d5104 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   d537e:	1e6b      	subs	r3, r5, #1
   d5380:	2b01      	cmp	r3, #1
   d5382:	d815      	bhi.n	d53b0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   d5384:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5386:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   d5388:	3101      	adds	r1, #1
   d538a:	b289      	uxth	r1, r1
   d538c:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d538e:	1209      	asrs	r1, r1, #8
   d5390:	5419      	strb	r1, [r3, r0]
   d5392:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   d5394:	69e3      	ldr	r3, [r4, #28]
   d5396:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5398:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   d539a:	3002      	adds	r0, #2
   d539c:	5499      	strb	r1, [r3, r2]
   d539e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d53a0:	f1b8 0f00 	cmp.w	r8, #0
   d53a4:	d004      	beq.n	d53b0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   d53a6:	8c23      	ldrh	r3, [r4, #32]
   d53a8:	1c5a      	adds	r2, r3, #1
   d53aa:	8422      	strh	r2, [r4, #32]
   d53ac:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d53b0:	2100      	movs	r1, #0
   d53b2:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d53b4:	428f      	cmp	r7, r1
   d53b6:	69e2      	ldr	r2, [r4, #28]
   d53b8:	b29b      	uxth	r3, r3
   d53ba:	d90a      	bls.n	d53d2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   d53bc:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   d53c0:	459c      	cmp	ip, r3
   d53c2:	d906      	bls.n	d53d2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   d53c4:	f816 c001 	ldrb.w	ip, [r6, r1]
   d53c8:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d53cc:	3101      	adds	r1, #1
   d53ce:	b289      	uxth	r1, r1
   d53d0:	e7ef      	b.n	d53b2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   d53d2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   d53d6:	2900      	cmp	r1, #0
   d53d8:	bf0c      	ite	eq
   d53da:	2130      	moveq	r1, #48	; 0x30
   d53dc:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   d53de:	f1b9 0f00 	cmp.w	r9, #0
   d53e2:	d001      	beq.n	d53e8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   d53e4:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   d53e8:	2d02      	cmp	r5, #2
   d53ea:	d10e      	bne.n	d540a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   d53ec:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   d53f0:	3b05      	subs	r3, #5
   d53f2:	b29b      	uxth	r3, r3
   d53f4:	4620      	mov	r0, r4
   d53f6:	f7ff fe2a 	bl	d504e <_ZN4MQTT5writeEhPht>
   d53fa:	4682      	mov	sl, r0
        MutexLocker lock(this);
   d53fc:	a801      	add	r0, sp, #4
   d53fe:	f7ff fd59 	bl	d4eb4 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5402:	4650      	mov	r0, sl
   d5404:	b003      	add	sp, #12
   d5406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   d540a:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d540c:	bf08      	it	eq
   d540e:	f041 0102 	orreq.w	r1, r1, #2
   d5412:	e7ed      	b.n	d53f0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000d5414 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d5414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5416:	9c08      	ldr	r4, [sp, #32]
   d5418:	9403      	str	r4, [sp, #12]
   d541a:	2400      	movs	r4, #0
   d541c:	9402      	str	r4, [sp, #8]
   d541e:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d5422:	9401      	str	r4, [sp, #4]
   d5424:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5428:	9400      	str	r4, [sp, #0]
   d542a:	f7ff ff87 	bl	d533c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d542e:	b004      	add	sp, #16
   d5430:	bd10      	pop	{r4, pc}

000d5432 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   d5432:	b530      	push	{r4, r5, lr}
   d5434:	b087      	sub	sp, #28
   d5436:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5438:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   d543a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d543c:	9204      	str	r2, [sp, #16]
   d543e:	f001 ff85 	bl	d734c <strlen>
   d5442:	2500      	movs	r5, #0
   d5444:	4603      	mov	r3, r0
   d5446:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d544a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d544e:	9500      	str	r5, [sp, #0]
   d5450:	4620      	mov	r0, r4
   d5452:	f7ff ffdf 	bl	d5414 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d5456:	b007      	add	sp, #28
   d5458:	bd30      	pop	{r4, r5, pc}

000d545a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d545a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d545c:	4604      	mov	r4, r0
   d545e:	460e      	mov	r6, r1
    if (isConnected()) {
   d5460:	f7ff fe6b 	bl	d513a <_ZN4MQTT11isConnectedEv>
   d5464:	4605      	mov	r5, r0
   d5466:	b1c8      	cbz	r0, d549c <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d5468:	4621      	mov	r1, r4
   d546a:	a801      	add	r0, sp, #4
   d546c:	f7ff fd17 	bl	d4e9e <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d5470:	69e3      	ldr	r3, [r4, #28]
   d5472:	2262      	movs	r2, #98	; 0x62
   d5474:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5476:	69e3      	ldr	r3, [r4, #28]
   d5478:	2202      	movs	r2, #2
   d547a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d547c:	69e3      	ldr	r3, [r4, #28]
   d547e:	1232      	asrs	r2, r6, #8
   d5480:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5482:	69e3      	ldr	r3, [r4, #28]
   d5484:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d5486:	69e1      	ldr	r1, [r4, #28]
   d5488:	2204      	movs	r2, #4
   d548a:	4620      	mov	r0, r4
   d548c:	f001 f92e 	bl	d66ec <_ZN9TCPClient5writeEPKhj>
   d5490:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d5492:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d5494:	bf18      	it	ne
   d5496:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d5498:	f7ff fd0c 	bl	d4eb4 <_ZN4MQTT11MutexLockerD1Ev>
}
   d549c:	4628      	mov	r0, r5
   d549e:	b002      	add	sp, #8
   d54a0:	bd70      	pop	{r4, r5, r6, pc}

000d54a2 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d54a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d54a4:	4604      	mov	r4, r0
   d54a6:	460e      	mov	r6, r1
    if (isConnected()) {
   d54a8:	f7ff fe47 	bl	d513a <_ZN4MQTT11isConnectedEv>
   d54ac:	4605      	mov	r5, r0
   d54ae:	b1c8      	cbz	r0, d54e4 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d54b0:	4621      	mov	r1, r4
   d54b2:	a801      	add	r0, sp, #4
   d54b4:	f7ff fcf3 	bl	d4e9e <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d54b8:	69e3      	ldr	r3, [r4, #28]
   d54ba:	2272      	movs	r2, #114	; 0x72
   d54bc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d54be:	69e3      	ldr	r3, [r4, #28]
   d54c0:	2202      	movs	r2, #2
   d54c2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d54c4:	69e3      	ldr	r3, [r4, #28]
   d54c6:	1232      	asrs	r2, r6, #8
   d54c8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d54ca:	69e3      	ldr	r3, [r4, #28]
   d54cc:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d54ce:	69e1      	ldr	r1, [r4, #28]
   d54d0:	2204      	movs	r2, #4
   d54d2:	4620      	mov	r0, r4
   d54d4:	f001 f90a 	bl	d66ec <_ZN9TCPClient5writeEPKhj>
   d54d8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d54da:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d54dc:	bf18      	it	ne
   d54de:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d54e0:	f7ff fce8 	bl	d4eb4 <_ZN4MQTT11MutexLockerD1Ev>
}
   d54e4:	4628      	mov	r0, r5
   d54e6:	b002      	add	sp, #8
   d54e8:	bd70      	pop	{r4, r5, r6, pc}

000d54ea <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d54ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54ee:	ed2d 8b02 	vpush	{d8}
   d54f2:	b087      	sub	sp, #28
   d54f4:	af00      	add	r7, sp, #0
   d54f6:	4604      	mov	r4, r0
    if (isConnected()) {
   d54f8:	f7ff fe1f 	bl	d513a <_ZN4MQTT11isConnectedEv>
   d54fc:	4681      	mov	r9, r0
   d54fe:	b1f8      	cbz	r0, d5540 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d5500:	4621      	mov	r1, r4
   d5502:	f107 0014 	add.w	r0, r7, #20
   d5506:	f7ff fcca 	bl	d4e9e <_ZN4MQTT11MutexLockerC1EPS_>
   d550a:	f000 f9dd 	bl	d58c8 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d550e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5514:	4353      	muls	r3, r2
   d5516:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d5518:	1a82      	subs	r2, r0, r2
   d551a:	429a      	cmp	r2, r3
   d551c:	4606      	mov	r6, r0
   d551e:	d803      	bhi.n	d5528 <_ZN4MQTT4loopEv+0x3e>
   d5520:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5522:	1a82      	subs	r2, r0, r2
   d5524:	4293      	cmp	r3, r2
   d5526:	d221      	bcs.n	d556c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d5528:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d552c:	b17b      	cbz	r3, d554e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d552e:	4620      	mov	r0, r4
   d5530:	f001 fad4 	bl	d6adc <_ZN9TCPClient4stopEv>
                return false;
   d5534:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d5538:	f107 0014 	add.w	r0, r7, #20
   d553c:	f7ff fcba 	bl	d4eb4 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5540:	4648      	mov	r0, r9
   d5542:	371c      	adds	r7, #28
   d5544:	46bd      	mov	sp, r7
   d5546:	ecbd 8b02 	vpop	{d8}
   d554a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d554e:	69e2      	ldr	r2, [r4, #28]
   d5550:	21c0      	movs	r1, #192	; 0xc0
   d5552:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5554:	69e2      	ldr	r2, [r4, #28]
   d5556:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d5558:	69e1      	ldr	r1, [r4, #28]
   d555a:	2202      	movs	r2, #2
   d555c:	4620      	mov	r0, r4
   d555e:	f001 f8c5 	bl	d66ec <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d5562:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d5566:	2301      	movs	r3, #1
   d5568:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d556c:	4620      	mov	r0, r4
   d556e:	f001 fa5b 	bl	d6a28 <_ZN9TCPClient9availableEv>
   d5572:	2800      	cmp	r0, #0
   d5574:	d0e0      	beq.n	d5538 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d5576:	f107 0113 	add.w	r1, r7, #19
   d557a:	4620      	mov	r0, r4
   d557c:	f7ff fd06 	bl	d4f8c <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d5580:	4683      	mov	fp, r0
   d5582:	2800      	cmp	r0, #0
   d5584:	d0d8      	beq.n	d5538 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d5586:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d5588:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d558a:	7819      	ldrb	r1, [r3, #0]
   d558c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d5590:	2a30      	cmp	r2, #48	; 0x30
   d5592:	d17f      	bne.n	d5694 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d5594:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d5598:	f1ba 0f00 	cmp.w	sl, #0
   d559c:	d0cc      	beq.n	d5538 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d559e:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d55a2:	466a      	mov	r2, sp
   d55a4:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d55a8:	eb03 020c 	add.w	r2, r3, ip
   d55ac:	7855      	ldrb	r5, [r2, #1]
   d55ae:	7891      	ldrb	r1, [r2, #2]
   d55b0:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d55b4:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d55b6:	f105 0208 	add.w	r2, r5, #8
   d55ba:	4669      	mov	r1, sp
   d55bc:	08d2      	lsrs	r2, r2, #3
   d55be:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d55c2:	4695      	mov	sp, r2
   d55c4:	f10c 0203 	add.w	r2, ip, #3
   d55c8:	60fa      	str	r2, [r7, #12]
   d55ca:	eb03 0e02 	add.w	lr, r3, r2
   d55ce:	eb0d 0205 	add.w	r2, sp, r5
   d55d2:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d55d4:	f8c7 d008 	str.w	sp, [r7, #8]
   d55d8:	607a      	str	r2, [r7, #4]
   d55da:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d55de:	428a      	cmp	r2, r1
   d55e0:	d006      	beq.n	d55f0 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d55e2:	460a      	mov	r2, r1
   d55e4:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d55e8:	f802 8b01 	strb.w	r8, [r2], #1
   d55ec:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d55ee:	e7f4      	b.n	d55da <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d55f0:	2200      	movs	r2, #0
   d55f2:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d55f4:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d55f8:	68f9      	ldr	r1, [r7, #12]
   d55fa:	f008 0806 	and.w	r8, r8, #6
   d55fe:	ebab 020c 	sub.w	r2, fp, ip
   d5602:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5604:	f1b8 0f02 	cmp.w	r8, #2
   d5608:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d560c:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d560e:	d125      	bne.n	d565c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5610:	f813 e001 	ldrb.w	lr, [r3, r1]
   d5614:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d5616:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5618:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d561c:	f10c 0105 	add.w	r1, ip, #5
   d5620:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d5622:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5624:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d5628:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d562a:	69e3      	ldr	r3, [r4, #28]
   d562c:	2240      	movs	r2, #64	; 0x40
   d562e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d5630:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5632:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d5636:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d563a:	69e3      	ldr	r3, [r4, #28]
   d563c:	ea4f 222b 	mov.w	r2, fp, asr #8
   d5640:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d5642:	69e3      	ldr	r3, [r4, #28]
   d5644:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d5648:	69e1      	ldr	r1, [r4, #28]
   d564a:	2204      	movs	r2, #4
   d564c:	4620      	mov	r0, r4
   d564e:	f001 f84d 	bl	d66ec <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d5652:	6266      	str	r6, [r4, #36]	; 0x24
   d5654:	ee18 3a10 	vmov	r3, s16
   d5658:	469d      	mov	sp, r3
   d565a:	e76d      	b.n	d5538 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d565c:	f1b8 0f04 	cmp.w	r8, #4
   d5660:	d115      	bne.n	d568e <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5662:	f813 e001 	ldrb.w	lr, [r3, r1]
   d5666:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5668:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d566a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d566e:	f10c 0105 	add.w	r1, ip, #5
   d5672:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5674:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5676:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d567a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d567c:	69e3      	ldr	r3, [r4, #28]
   d567e:	2250      	movs	r2, #80	; 0x50
   d5680:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d5682:	69e3      	ldr	r3, [r4, #28]
   d5684:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5686:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d568a:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d568c:	e7d5      	b.n	d563a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d568e:	4419      	add	r1, r3
   d5690:	47d0      	blx	sl
   d5692:	e7df      	b.n	d5654 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d5694:	2a50      	cmp	r2, #80	; 0x50
   d5696:	d108      	bne.n	d56aa <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d5698:	789a      	ldrb	r2, [r3, #2]
   d569a:	78d9      	ldrb	r1, [r3, #3]
   d569c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d56a0:	b289      	uxth	r1, r1
   d56a2:	4620      	mov	r0, r4
   d56a4:	f7ff fed9 	bl	d545a <_ZN4MQTT14publishReleaseEt>
   d56a8:	e746      	b.n	d5538 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d56aa:	2a40      	cmp	r2, #64	; 0x40
   d56ac:	d112      	bne.n	d56d4 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d56ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d56b0:	2a00      	cmp	r2, #0
   d56b2:	f43f af41 	beq.w	d5538 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d56b6:	f1bb 0f04 	cmp.w	fp, #4
   d56ba:	f47f af3d 	bne.w	d5538 <_ZN4MQTT4loopEv+0x4e>
   d56be:	f011 0f06 	tst.w	r1, #6
   d56c2:	f47f af39 	bne.w	d5538 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d56c6:	7899      	ldrb	r1, [r3, #2]
   d56c8:	78d8      	ldrb	r0, [r3, #3]
   d56ca:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d56ce:	b280      	uxth	r0, r0
   d56d0:	4790      	blx	r2
   d56d2:	e731      	b.n	d5538 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d56d4:	2a60      	cmp	r2, #96	; 0x60
   d56d6:	d108      	bne.n	d56ea <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d56d8:	789a      	ldrb	r2, [r3, #2]
   d56da:	78d9      	ldrb	r1, [r3, #3]
   d56dc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d56e0:	b289      	uxth	r1, r1
   d56e2:	4620      	mov	r0, r4
   d56e4:	f7ff fedd 	bl	d54a2 <_ZN4MQTT15publishCompleteEt>
   d56e8:	e726      	b.n	d5538 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d56ea:	2a70      	cmp	r2, #112	; 0x70
   d56ec:	d0df      	beq.n	d56ae <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d56ee:	2a90      	cmp	r2, #144	; 0x90
   d56f0:	f43f af22 	beq.w	d5538 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d56f4:	2ac0      	cmp	r2, #192	; 0xc0
   d56f6:	d10a      	bne.n	d570e <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d56f8:	22d0      	movs	r2, #208	; 0xd0
   d56fa:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d56fc:	69e3      	ldr	r3, [r4, #28]
   d56fe:	2200      	movs	r2, #0
   d5700:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d5702:	69e1      	ldr	r1, [r4, #28]
   d5704:	2202      	movs	r2, #2
   d5706:	4620      	mov	r0, r4
   d5708:	f000 fff0 	bl	d66ec <_ZN9TCPClient5writeEPKhj>
   d570c:	e714      	b.n	d5538 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d570e:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d5710:	bf04      	itt	eq
   d5712:	2300      	moveq	r3, #0
   d5714:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d5718:	e70e      	b.n	d5538 <_ZN4MQTT4loopEv+0x4e>

000d571a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d571a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d571c:	4604      	mov	r4, r0
   d571e:	460f      	mov	r7, r1
   d5720:	4616      	mov	r6, r2
    if (isConnected()) {
   d5722:	f7ff fd0a 	bl	d513a <_ZN4MQTT11isConnectedEv>
   d5726:	4605      	mov	r5, r0
   d5728:	b310      	cbz	r0, d5770 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   d572a:	4621      	mov	r1, r4
   d572c:	a801      	add	r0, sp, #4
   d572e:	f7ff fbb6 	bl	d4e9e <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   d5732:	8c23      	ldrh	r3, [r4, #32]
   d5734:	3301      	adds	r3, #1
   d5736:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5738:	b1eb      	cbz	r3, d5776 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   d573a:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   d573c:	8c23      	ldrh	r3, [r4, #32]
   d573e:	69e2      	ldr	r2, [r4, #28]
   d5740:	121b      	asrs	r3, r3, #8
   d5742:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5744:	69e3      	ldr	r3, [r4, #28]
   d5746:	8c22      	ldrh	r2, [r4, #32]
   d5748:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d574a:	69e2      	ldr	r2, [r4, #28]
   d574c:	2307      	movs	r3, #7
   d574e:	4639      	mov	r1, r7
   d5750:	4620      	mov	r0, r4
   d5752:	f7ff fcd7 	bl	d5104 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5756:	69e3      	ldr	r3, [r4, #28]
   d5758:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d575a:	3804      	subs	r0, #4
   d575c:	b283      	uxth	r3, r0
   d575e:	69e2      	ldr	r2, [r4, #28]
   d5760:	2182      	movs	r1, #130	; 0x82
   d5762:	4620      	mov	r0, r4
   d5764:	f7ff fc73 	bl	d504e <_ZN4MQTT5writeEhPht>
   d5768:	4605      	mov	r5, r0
        MutexLocker lock(this);
   d576a:	a801      	add	r0, sp, #4
   d576c:	f7ff fba2 	bl	d4eb4 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5770:	4628      	mov	r0, r5
   d5772:	b003      	add	sp, #12
   d5774:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   d5776:	2301      	movs	r3, #1
   d5778:	e7df      	b.n	d573a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000d577a <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   d577a:	2200      	movs	r2, #0
   d577c:	f7ff bfcd 	b.w	d571a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d5780 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d5780:	b538      	push	{r3, r4, r5, lr}
   d5782:	4605      	mov	r5, r0
    if (isConnected()) {
   d5784:	f7ff fcd9 	bl	d513a <_ZN4MQTT11isConnectedEv>
   d5788:	b110      	cbz	r0, d5790 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d578a:	4628      	mov	r0, r5
   d578c:	f7ff fc9d 	bl	d50ca <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d5790:	69e8      	ldr	r0, [r5, #28]
   d5792:	b108      	cbz	r0, d5798 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d5794:	f7fe fc83 	bl	d409e <_ZdaPv>
MQTT::~MQTT() {
   d5798:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d579c:	f000 fb8e 	bl	d5ebc <_ZN6StringD1Ev>
	if (_M_pi != nullptr)
   d57a0:	69ac      	ldr	r4, [r5, #24]
   d57a2:	4b0a      	ldr	r3, [pc, #40]	; (d57cc <_ZN4MQTTD1Ev+0x4c>)
   d57a4:	602b      	str	r3, [r5, #0]
   d57a6:	b17c      	cbz	r4, d57c8 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d57a8:	6863      	ldr	r3, [r4, #4]
   d57aa:	3b01      	subs	r3, #1
   d57ac:	6063      	str	r3, [r4, #4]
   d57ae:	b95b      	cbnz	r3, d57c8 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d57b0:	6823      	ldr	r3, [r4, #0]
   d57b2:	4620      	mov	r0, r4
   d57b4:	689b      	ldr	r3, [r3, #8]
   d57b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d57b8:	68a3      	ldr	r3, [r4, #8]
   d57ba:	3b01      	subs	r3, #1
   d57bc:	60a3      	str	r3, [r4, #8]
   d57be:	b91b      	cbnz	r3, d57c8 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d57c0:	6823      	ldr	r3, [r4, #0]
   d57c2:	4620      	mov	r0, r4
   d57c4:	68db      	ldr	r3, [r3, #12]
   d57c6:	4798      	blx	r3
}
   d57c8:	4628      	mov	r0, r5
   d57ca:	bd38      	pop	{r3, r4, r5, pc}
   d57cc:	000d7aa4 	.word	0x000d7aa4

000d57d0 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d57d0:	f000 bcbc 	b.w	d614c <delay>

000d57d4 <_Z11BlynkMillisv>:
   d57d4:	f000 b878 	b.w	d58c8 <HAL_Timer_Get_Milli_Seconds>

000d57d8 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d57d8:	4770      	bx	lr

000d57da <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d57da:	4770      	bx	lr

000d57dc <BlynkNoOpCbk>:
{}
   d57dc:	4770      	bx	lr
	...

000d57e0 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d57e0:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d57e2:	bf5a      	itte	pl
   d57e4:	4b02      	ldrpl	r3, [pc, #8]	; (d57f0 <GetReadHandler+0x10>)
   d57e6:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d57ea:	2000      	movmi	r0, #0
#endif
}
   d57ec:	4770      	bx	lr
   d57ee:	bf00      	nop
   d57f0:	000d7568 	.word	0x000d7568

000d57f4 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d57f4:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d57f6:	bf5a      	itte	pl
   d57f8:	4b02      	ldrpl	r3, [pc, #8]	; (d5804 <GetWriteHandler+0x10>)
   d57fa:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d57fe:	2000      	movmi	r0, #0
#endif
}
   d5800:	4770      	bx	lr
   d5802:	bf00      	nop
   d5804:	000d7768 	.word	0x000d7768

000d5808 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <netdb_freeaddrinfo+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	689b      	ldr	r3, [r3, #8]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	00030268 	.word	0x00030268

000d5818 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <netdb_getaddrinfo+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	68db      	ldr	r3, [r3, #12]
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030268 	.word	0x00030268

000d5828 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <HAL_Validate_Pin_Function+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	685b      	ldr	r3, [r3, #4]
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	0003022c 	.word	0x0003022c

000d5838 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <HAL_Pin_Mode+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	689b      	ldr	r3, [r3, #8]
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	0003022c 	.word	0x0003022c

000d5848 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <HAL_Get_Pin_Mode+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	68db      	ldr	r3, [r3, #12]
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	0003022c 	.word	0x0003022c

000d5858 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <HAL_GPIO_Write+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	691b      	ldr	r3, [r3, #16]
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	0003022c 	.word	0x0003022c

000d5868 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <HAL_GPIO_Read+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	695b      	ldr	r3, [r3, #20]
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	0003022c 	.word	0x0003022c

000d5878 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <HAL_DAC_Write+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	0003022c 	.word	0x0003022c

000d5888 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <hal_adc_read+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	0003022c 	.word	0x0003022c

000d5898 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <hal_pwm_write_ext+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	0003022c 	.word	0x0003022c

000d58a8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <if_index_to_name+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	695b      	ldr	r3, [r3, #20]
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003026c 	.word	0x0003026c

000d58b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <HAL_RNG_GetRandomNumber+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	685b      	ldr	r3, [r3, #4]
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	00030218 	.word	0x00030218

000d58c8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d58c8:	b508      	push	{r3, lr}
   d58ca:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d58cc:	681b      	ldr	r3, [r3, #0]
   d58ce:	695b      	ldr	r3, [r3, #20]
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	bd08      	pop	{r3, pc}
   d58d4:	00030218 	.word	0x00030218

000d58d8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <os_mutex_create+0xc>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58e0:	9301      	str	r3, [sp, #4]
   d58e2:	bd08      	pop	{r3, pc}
   d58e4:	00030248 	.word	0x00030248

000d58e8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <os_mutex_lock+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	00030248 	.word	0x00030248

000d58f8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <os_mutex_unlock+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	00030248 	.word	0x00030248

000d5908 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <os_mutex_recursive_create+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	00030248 	.word	0x00030248

000d5918 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b02      	ldr	r3, [pc, #8]	; (d5924 <os_mutex_recursive_destroy+0xc>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5920:	9301      	str	r3, [sp, #4]
   d5922:	bd08      	pop	{r3, pc}
   d5924:	00030248 	.word	0x00030248

000d5928 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <inet_inet_ntop+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	695b      	ldr	r3, [r3, #20]
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	00030264 	.word	0x00030264

000d5938 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <inet_htonl+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	6a1b      	ldr	r3, [r3, #32]
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	00030264 	.word	0x00030264

000d5948 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <inet_htons+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	00030264 	.word	0x00030264

000d5958 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <hal_usart_init+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	681b      	ldr	r3, [r3, #0]
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	0003023c 	.word	0x0003023c

000d5968 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <hal_usart_write+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	68db      	ldr	r3, [r3, #12]
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	0003023c 	.word	0x0003023c

000d5978 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <hal_usart_available+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	691b      	ldr	r3, [r3, #16]
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	0003023c 	.word	0x0003023c

000d5988 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <hal_usart_read+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	695b      	ldr	r3, [r3, #20]
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	0003023c 	.word	0x0003023c

000d5998 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <hal_usart_peek+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	699b      	ldr	r3, [r3, #24]
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	0003023c 	.word	0x0003023c

000d59a8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <hal_usart_flush+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	69db      	ldr	r3, [r3, #28]
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	0003023c 	.word	0x0003023c

000d59b8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <hal_usart_is_enabled+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	6a1b      	ldr	r3, [r3, #32]
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	0003023c 	.word	0x0003023c

000d59c8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <hal_usart_available_data_for_write+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	0003023c 	.word	0x0003023c

000d59d8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <hal_i2c_begin+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	68db      	ldr	r3, [r3, #12]
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	00030228 	.word	0x00030228

000d59e8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <hal_i2c_begin_transmission+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	699b      	ldr	r3, [r3, #24]
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	00030228 	.word	0x00030228

000d59f8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <hal_i2c_end_transmission+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	69db      	ldr	r3, [r3, #28]
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	00030228 	.word	0x00030228

000d5a08 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <hal_i2c_write+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	6a1b      	ldr	r3, [r3, #32]
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	00030228 	.word	0x00030228

000d5a18 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <hal_i2c_available+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	00030228 	.word	0x00030228

000d5a28 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <hal_i2c_read+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	00030228 	.word	0x00030228

000d5a38 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b02      	ldr	r3, [pc, #8]	; (d5a44 <hal_i2c_peek+0xc>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a40:	9301      	str	r3, [sp, #4]
   d5a42:	bd08      	pop	{r3, pc}
   d5a44:	00030228 	.word	0x00030228

000d5a48 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5a48:	b508      	push	{r3, lr}
   d5a4a:	4b02      	ldr	r3, [pc, #8]	; (d5a54 <hal_i2c_flush+0xc>)
   d5a4c:	681b      	ldr	r3, [r3, #0]
   d5a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a50:	9301      	str	r3, [sp, #4]
   d5a52:	bd08      	pop	{r3, pc}
   d5a54:	00030228 	.word	0x00030228

000d5a58 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <hal_i2c_is_enabled+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	00030228 	.word	0x00030228

000d5a68 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <hal_i2c_init+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	00030228 	.word	0x00030228

000d5a78 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <hal_i2c_request_ex+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	00030228 	.word	0x00030228

000d5a88 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <sock_setsockopt+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	699b      	ldr	r3, [r3, #24]
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	00030238 	.word	0x00030238

000d5a98 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <sock_close+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	69db      	ldr	r3, [r3, #28]
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	00030238 	.word	0x00030238

000d5aa8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <sock_connect+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	6a1b      	ldr	r3, [r3, #32]
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	00030238 	.word	0x00030238

000d5ab8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <sock_recv+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030238 	.word	0x00030238

000d5ac8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <sock_send+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	00030238 	.word	0x00030238

000d5ad8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <sock_socket+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	00030238 	.word	0x00030238

000d5ae8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <hal_spi_init+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	69db      	ldr	r3, [r3, #28]
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	00030230 	.word	0x00030230

000d5af8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <hal_spi_is_enabled+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	6a1b      	ldr	r3, [r3, #32]
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	00030230 	.word	0x00030230

000d5b08 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <HAL_USB_USART_Init+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	681b      	ldr	r3, [r3, #0]
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	0003024c 	.word	0x0003024c

000d5b18 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <HAL_USB_USART_Begin+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	685b      	ldr	r3, [r3, #4]
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	0003024c 	.word	0x0003024c

000d5b28 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <HAL_USB_USART_Available_Data+0xc>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	691b      	ldr	r3, [r3, #16]
   d5b30:	9301      	str	r3, [sp, #4]
   d5b32:	bd08      	pop	{r3, pc}
   d5b34:	0003024c 	.word	0x0003024c

000d5b38 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5b38:	b508      	push	{r3, lr}
   d5b3a:	4b02      	ldr	r3, [pc, #8]	; (d5b44 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	695b      	ldr	r3, [r3, #20]
   d5b40:	9301      	str	r3, [sp, #4]
   d5b42:	bd08      	pop	{r3, pc}
   d5b44:	0003024c 	.word	0x0003024c

000d5b48 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b48:	b508      	push	{r3, lr}
   d5b4a:	4b02      	ldr	r3, [pc, #8]	; (d5b54 <HAL_USB_USART_Receive_Data+0xc>)
   d5b4c:	681b      	ldr	r3, [r3, #0]
   d5b4e:	699b      	ldr	r3, [r3, #24]
   d5b50:	9301      	str	r3, [sp, #4]
   d5b52:	bd08      	pop	{r3, pc}
   d5b54:	0003024c 	.word	0x0003024c

000d5b58 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b58:	b508      	push	{r3, lr}
   d5b5a:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <HAL_USB_USART_Send_Data+0xc>)
   d5b5c:	681b      	ldr	r3, [r3, #0]
   d5b5e:	69db      	ldr	r3, [r3, #28]
   d5b60:	9301      	str	r3, [sp, #4]
   d5b62:	bd08      	pop	{r3, pc}
   d5b64:	0003024c 	.word	0x0003024c

000d5b68 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <HAL_USB_USART_Flush_Data+0xc>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	6a1b      	ldr	r3, [r3, #32]
   d5b70:	9301      	str	r3, [sp, #4]
   d5b72:	bd08      	pop	{r3, pc}
   d5b74:	0003024c 	.word	0x0003024c

000d5b78 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5b78:	b508      	push	{r3, lr}
   d5b7a:	4b02      	ldr	r3, [pc, #8]	; (d5b84 <log_message+0xc>)
   d5b7c:	681b      	ldr	r3, [r3, #0]
   d5b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	bd08      	pop	{r3, pc}
   d5b84:	00030260 	.word	0x00030260

000d5b88 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <set_system_mode+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	685b      	ldr	r3, [r3, #4]
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	00030220 	.word	0x00030220

000d5b98 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <system_delay_ms+0xc>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	695b      	ldr	r3, [r3, #20]
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	bd08      	pop	{r3, pc}
   d5ba4:	00030220 	.word	0x00030220

000d5ba8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5ba8:	b508      	push	{r3, lr}
   d5baa:	4b02      	ldr	r3, [pc, #8]	; (d5bb4 <system_thread_set_state+0xc>)
   d5bac:	681b      	ldr	r3, [r3, #0]
   d5bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bb0:	9301      	str	r3, [sp, #4]
   d5bb2:	bd08      	pop	{r3, pc}
   d5bb4:	00030220 	.word	0x00030220

000d5bb8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b03      	ldr	r3, [pc, #12]	; (d5bc8 <system_ctrl_set_app_request_handler+0x10>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5bc2:	9301      	str	r3, [sp, #4]
   d5bc4:	bd08      	pop	{r3, pc}
   d5bc6:	0000      	.short	0x0000
   d5bc8:	00030220 	.word	0x00030220

000d5bcc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b03      	ldr	r3, [pc, #12]	; (d5bdc <system_ctrl_set_result+0x10>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5bd6:	9301      	str	r3, [sp, #4]
   d5bd8:	bd08      	pop	{r3, pc}
   d5bda:	0000      	.short	0x0000
   d5bdc:	00030220 	.word	0x00030220

000d5be0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <network_connect+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	685b      	ldr	r3, [r3, #4]
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	00030240 	.word	0x00030240

000d5bf0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <network_connecting+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	689b      	ldr	r3, [r3, #8]
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	00030240 	.word	0x00030240

000d5c00 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <network_disconnect+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	68db      	ldr	r3, [r3, #12]
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	00030240 	.word	0x00030240

000d5c10 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <network_ready+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	691b      	ldr	r3, [r3, #16]
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	00030240 	.word	0x00030240

000d5c20 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <network_on+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	695b      	ldr	r3, [r3, #20]
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	00030240 	.word	0x00030240

000d5c30 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <network_off+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	699b      	ldr	r3, [r3, #24]
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	00030240 	.word	0x00030240

000d5c40 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <network_listen+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	69db      	ldr	r3, [r3, #28]
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	00030240 	.word	0x00030240

000d5c50 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <network_listening+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	6a1b      	ldr	r3, [r3, #32]
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	00030240 	.word	0x00030240

000d5c60 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <network_set_listen_timeout+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	00030240 	.word	0x00030240

000d5c70 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <network_get_listen_timeout+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	00030240 	.word	0x00030240

000d5c80 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <network_is_on+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	00030240 	.word	0x00030240

000d5c90 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <network_is_off+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	00030240 	.word	0x00030240

000d5ca0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <spark_process+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	689b      	ldr	r3, [r3, #8]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	00030244 	.word	0x00030244

000d5cb0 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <spark_deviceID+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	69db      	ldr	r3, [r3, #28]
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	00030244 	.word	0x00030244

000d5cc0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <spark_set_random_seed_from_cloud_handler+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	00030244 	.word	0x00030244

000d5cd0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <malloc+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	681b      	ldr	r3, [r3, #0]
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	0003021c 	.word	0x0003021c

000d5ce0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <free+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	685b      	ldr	r3, [r3, #4]
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	0003021c 	.word	0x0003021c

000d5cf0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <realloc+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	689b      	ldr	r3, [r3, #8]
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	0003021c 	.word	0x0003021c

000d5d00 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <snprintf+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	69db      	ldr	r3, [r3, #28]
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	0003021c 	.word	0x0003021c

000d5d10 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <__errno+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	0003021c 	.word	0x0003021c

000d5d20 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <newlib_impure_ptr_callback+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	0003021c 	.word	0x0003021c

000d5d30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d30:	2200      	movs	r2, #0
   d5d32:	6840      	ldr	r0, [r0, #4]
   d5d34:	4611      	mov	r1, r2
   d5d36:	f7ff bf8b 	b.w	d5c50 <network_listening>

000d5d3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5d3a:	2200      	movs	r2, #0
   d5d3c:	6840      	ldr	r0, [r0, #4]
   d5d3e:	4611      	mov	r1, r2
   d5d40:	f7ff bf96 	b.w	d5c70 <network_get_listen_timeout>

000d5d44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5d44:	6840      	ldr	r0, [r0, #4]
   d5d46:	2200      	movs	r2, #0
   d5d48:	f7ff bf8a 	b.w	d5c60 <network_set_listen_timeout>

000d5d4c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d4c:	6840      	ldr	r0, [r0, #4]
   d5d4e:	2200      	movs	r2, #0
   d5d50:	f081 0101 	eor.w	r1, r1, #1
   d5d54:	f7ff bf74 	b.w	d5c40 <network_listen>

000d5d58 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d58:	2300      	movs	r3, #0
   d5d5a:	6840      	ldr	r0, [r0, #4]
   d5d5c:	461a      	mov	r2, r3
   d5d5e:	4619      	mov	r1, r3
   d5d60:	f7ff bf66 	b.w	d5c30 <network_off>

000d5d64 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5d64:	2300      	movs	r3, #0
   d5d66:	6840      	ldr	r0, [r0, #4]
   d5d68:	461a      	mov	r2, r3
   d5d6a:	4619      	mov	r1, r3
   d5d6c:	f7ff bf58 	b.w	d5c20 <network_on>

000d5d70 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d70:	2200      	movs	r2, #0
   d5d72:	6840      	ldr	r0, [r0, #4]
   d5d74:	4611      	mov	r1, r2
   d5d76:	f7ff bf4b 	b.w	d5c10 <network_ready>

000d5d7a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d7a:	2200      	movs	r2, #0
   d5d7c:	6840      	ldr	r0, [r0, #4]
   d5d7e:	4611      	mov	r1, r2
   d5d80:	f7ff bf36 	b.w	d5bf0 <network_connecting>

000d5d84 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d84:	6840      	ldr	r0, [r0, #4]
   d5d86:	2200      	movs	r2, #0
   d5d88:	2102      	movs	r1, #2
   d5d8a:	f7ff bf39 	b.w	d5c00 <network_disconnect>

000d5d8e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d8e:	2300      	movs	r3, #0
   d5d90:	6840      	ldr	r0, [r0, #4]
   d5d92:	461a      	mov	r2, r3
   d5d94:	f7ff bf24 	b.w	d5be0 <network_connect>

000d5d98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5d98:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5d9a:	2203      	movs	r2, #3
   d5d9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5d9e:	4a02      	ldr	r2, [pc, #8]	; (d5da8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5da0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5da2:	4770      	bx	lr
   d5da4:	2003e650 	.word	0x2003e650
   d5da8:	000d7970 	.word	0x000d7970

000d5dac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5dac:	b510      	push	{r4, lr}
   d5dae:	4604      	mov	r4, r0
   d5db0:	4608      	mov	r0, r1
{
    _spi = spi;
   d5db2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5db4:	f7ff fe98 	bl	d5ae8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5db8:	2300      	movs	r3, #0
   d5dba:	6063      	str	r3, [r4, #4]
}
   d5dbc:	4620      	mov	r0, r4
   d5dbe:	bd10      	pop	{r4, pc}

000d5dc0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5dc0:	b510      	push	{r4, lr}
   d5dc2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5dc4:	6800      	ldr	r0, [r0, #0]
   d5dc6:	b118      	cbz	r0, d5dd0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5dc8:	f7ff ff8a 	bl	d5ce0 <free>
            wakeupSource_ = nullptr;
   d5dcc:	2300      	movs	r3, #0
   d5dce:	6023      	str	r3, [r4, #0]
        }
    }
   d5dd0:	bd10      	pop	{r4, pc}

000d5dd2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5dd2:	b510      	push	{r4, lr}
   d5dd4:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5dd6:	f7ff fff3 	bl	d5dc0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5dda:	4620      	mov	r0, r4
   d5ddc:	bd10      	pop	{r4, pc}
	...

000d5de0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5de0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5de2:	4b09      	ldr	r3, [pc, #36]	; (d5e08 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5de4:	4c09      	ldr	r4, [pc, #36]	; (d5e0c <_GLOBAL__sub_I_System+0x2c>)
   d5de6:	2202      	movs	r2, #2
   d5de8:	2000      	movs	r0, #0
   d5dea:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5dec:	4b08      	ldr	r3, [pc, #32]	; (d5e10 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5dee:	6020      	str	r0, [r4, #0]
   d5df0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5df2:	71a0      	strb	r0, [r4, #6]
   d5df4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5df6:	f7ff fec7 	bl	d5b88 <set_system_mode>
SystemClass System;
   d5dfa:	4620      	mov	r0, r4
   d5dfc:	4a05      	ldr	r2, [pc, #20]	; (d5e14 <_GLOBAL__sub_I_System+0x34>)
   d5dfe:	4906      	ldr	r1, [pc, #24]	; (d5e18 <_GLOBAL__sub_I_System+0x38>)
   d5e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5e04:	f001 b92c 	b.w	d7060 <__aeabi_atexit>
   d5e08:	2003e664 	.word	0x2003e664
   d5e0c:	2003e658 	.word	0x2003e658
   d5e10:	ffff0000 	.word	0xffff0000
   d5e14:	2003e580 	.word	0x2003e580
   d5e18:	000d5dd3 	.word	0x000d5dd3

000d5e1c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5e1c:	b510      	push	{r4, lr}
   d5e1e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5e20:	f001 fa94 	bl	d734c <strlen>
   d5e24:	3801      	subs	r0, #1
   d5e26:	1823      	adds	r3, r4, r0
   d5e28:	4620      	mov	r0, r4
	while(i<j){
   d5e2a:	4283      	cmp	r3, r0
   d5e2c:	d906      	bls.n	d5e3c <_Z11str_reversePc+0x20>
		c = *i;
   d5e2e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5e30:	7819      	ldrb	r1, [r3, #0]
   d5e32:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5e36:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d5e3a:	e7f6      	b.n	d5e2a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d5e3c:	bd10      	pop	{r4, pc}

000d5e3e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5e3e:	b570      	push	{r4, r5, r6, lr}
   d5e40:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5e42:	1e91      	subs	r1, r2, #2
   d5e44:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5e46:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5e48:	d822      	bhi.n	d5e90 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5e4a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5e4c:	b16d      	cbz	r5, d5e6a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5e4e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d5e52:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d5e56:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5e58:	2d09      	cmp	r5, #9
                *ptr += '0';
   d5e5a:	bf94      	ite	ls
   d5e5c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5e5e:	3157      	addhi	r1, #87	; 0x57
   d5e60:	b2c9      	uxtb	r1, r1
   d5e62:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d5e66:	4635      	mov	r5, r6
	while(a){
   d5e68:	e7f0      	b.n	d5e4c <ultoa+0xe>
   d5e6a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d5e6c:	4423      	add	r3, r4
            *ptr++ = '0';
   d5e6e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d5e70:	4293      	cmp	r3, r2
   d5e72:	d902      	bls.n	d5e7a <ultoa+0x3c>
            *ptr++ = '0';
   d5e74:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5e78:	e7fa      	b.n	d5e70 <ultoa+0x32>
   d5e7a:	1a1a      	subs	r2, r3, r0
   d5e7c:	4283      	cmp	r3, r0
   d5e7e:	bf38      	it	cc
   d5e80:	2200      	movcc	r2, #0

	*ptr = '\0';
   d5e82:	2300      	movs	r3, #0
   d5e84:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d5e86:	4620      	mov	r0, r4
   d5e88:	f7ff ffc8 	bl	d5e1c <_Z11str_reversePc>
	return buffer;
   d5e8c:	4620      	mov	r0, r4
}
   d5e8e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d5e90:	2000      	movs	r0, #0
   d5e92:	e7fc      	b.n	d5e8e <ultoa+0x50>

000d5e94 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d5e94:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d5e96:	2301      	movs	r3, #1
   d5e98:	f7ff ffd1 	bl	d5e3e <ultoa>
}
   d5e9c:	bd08      	pop	{r3, pc}

000d5e9e <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d5e9e:	b570      	push	{r4, r5, r6, lr}
   d5ea0:	b086      	sub	sp, #24
   d5ea2:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d5ea4:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d5ea6:	4668      	mov	r0, sp
   d5ea8:	f000 fa84 	bl	d63b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5eae:	1d34      	adds	r4, r6, #4
   d5eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5eb2:	682b      	ldr	r3, [r5, #0]
   d5eb4:	7023      	strb	r3, [r4, #0]
    }
   d5eb6:	4630      	mov	r0, r6
   d5eb8:	b006      	add	sp, #24
   d5eba:	bd70      	pop	{r4, r5, r6, pc}

000d5ebc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5ebc:	b510      	push	{r4, lr}
   d5ebe:	4604      	mov	r4, r0
{
	free(buffer);
   d5ec0:	6800      	ldr	r0, [r0, #0]
   d5ec2:	f7ff ff0d 	bl	d5ce0 <free>
}
   d5ec6:	4620      	mov	r0, r4
   d5ec8:	bd10      	pop	{r4, pc}

000d5eca <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5eca:	b510      	push	{r4, lr}
   d5ecc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5ece:	6800      	ldr	r0, [r0, #0]
   d5ed0:	b108      	cbz	r0, d5ed6 <_ZN6String10invalidateEv+0xc>
   d5ed2:	f7ff ff05 	bl	d5ce0 <free>
	buffer = NULL;
   d5ed6:	2300      	movs	r3, #0
	capacity = len = 0;
   d5ed8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5edc:	6023      	str	r3, [r4, #0]
}
   d5ede:	bd10      	pop	{r4, pc}

000d5ee0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5ee0:	b538      	push	{r3, r4, r5, lr}
   d5ee2:	4604      	mov	r4, r0
   d5ee4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5ee6:	6800      	ldr	r0, [r0, #0]
   d5ee8:	3101      	adds	r1, #1
   d5eea:	f7ff ff01 	bl	d5cf0 <realloc>
	if (newbuffer) {
   d5eee:	b110      	cbz	r0, d5ef6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5ef0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5ef4:	2001      	movs	r0, #1
	}
	return 0;
}
   d5ef6:	bd38      	pop	{r3, r4, r5, pc}

000d5ef8 <_ZN6String7reserveEj>:
{
   d5ef8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5efa:	6803      	ldr	r3, [r0, #0]
{
   d5efc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5efe:	b123      	cbz	r3, d5f0a <_ZN6String7reserveEj+0x12>
   d5f00:	6843      	ldr	r3, [r0, #4]
   d5f02:	428b      	cmp	r3, r1
   d5f04:	d301      	bcc.n	d5f0a <_ZN6String7reserveEj+0x12>
   d5f06:	2001      	movs	r0, #1
}
   d5f08:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5f0a:	4620      	mov	r0, r4
   d5f0c:	f7ff ffe8 	bl	d5ee0 <_ZN6String12changeBufferEj>
   d5f10:	2800      	cmp	r0, #0
   d5f12:	d0f9      	beq.n	d5f08 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5f14:	68a3      	ldr	r3, [r4, #8]
   d5f16:	2b00      	cmp	r3, #0
   d5f18:	d1f5      	bne.n	d5f06 <_ZN6String7reserveEj+0xe>
   d5f1a:	6822      	ldr	r2, [r4, #0]
   d5f1c:	7013      	strb	r3, [r2, #0]
   d5f1e:	e7f2      	b.n	d5f06 <_ZN6String7reserveEj+0xe>

000d5f20 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f22:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5f24:	4611      	mov	r1, r2
   d5f26:	9201      	str	r2, [sp, #4]
{
   d5f28:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5f2a:	f7ff ffe5 	bl	d5ef8 <_ZN6String7reserveEj>
   d5f2e:	9a01      	ldr	r2, [sp, #4]
   d5f30:	b928      	cbnz	r0, d5f3e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5f32:	4620      	mov	r0, r4
   d5f34:	f7ff ffc9 	bl	d5eca <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5f38:	4620      	mov	r0, r4
   d5f3a:	b003      	add	sp, #12
   d5f3c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5f3e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5f40:	4629      	mov	r1, r5
   d5f42:	6820      	ldr	r0, [r4, #0]
   d5f44:	f001 f9be 	bl	d72c4 <memcpy>
	buffer[len] = 0;
   d5f48:	6822      	ldr	r2, [r4, #0]
   d5f4a:	68a3      	ldr	r3, [r4, #8]
   d5f4c:	2100      	movs	r1, #0
   d5f4e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5f50:	e7f2      	b.n	d5f38 <_ZN6String4copyEPKcj+0x18>

000d5f52 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5f52:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5f54:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5f56:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5f5a:	4604      	mov	r4, r0
	len = 0;
   d5f5c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f5e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5f60:	b141      	cbz	r1, d5f74 <_ZN6StringC1EPKc+0x22>
   d5f62:	4608      	mov	r0, r1
   d5f64:	9101      	str	r1, [sp, #4]
   d5f66:	f001 f9f1 	bl	d734c <strlen>
   d5f6a:	9901      	ldr	r1, [sp, #4]
   d5f6c:	4602      	mov	r2, r0
   d5f6e:	4620      	mov	r0, r4
   d5f70:	f7ff ffd6 	bl	d5f20 <_ZN6String4copyEPKcj>
}
   d5f74:	4620      	mov	r0, r4
   d5f76:	b002      	add	sp, #8
   d5f78:	bd10      	pop	{r4, pc}

000d5f7a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5f7a:	b513      	push	{r0, r1, r4, lr}
   d5f7c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5f7e:	b159      	cbz	r1, d5f98 <_ZN6StringaSEPKc+0x1e>
   d5f80:	4608      	mov	r0, r1
   d5f82:	9101      	str	r1, [sp, #4]
   d5f84:	f001 f9e2 	bl	d734c <strlen>
   d5f88:	9901      	ldr	r1, [sp, #4]
   d5f8a:	4602      	mov	r2, r0
   d5f8c:	4620      	mov	r0, r4
   d5f8e:	f7ff ffc7 	bl	d5f20 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5f92:	4620      	mov	r0, r4
   d5f94:	b002      	add	sp, #8
   d5f96:	bd10      	pop	{r4, pc}
	else invalidate();
   d5f98:	f7ff ff97 	bl	d5eca <_ZN6String10invalidateEv>
   d5f9c:	e7f9      	b.n	d5f92 <_ZN6StringaSEPKc+0x18>

000d5f9e <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   d5f9e:	b510      	push	{r4, lr}
   d5fa0:	4604      	mov	r4, r0
   d5fa2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5fa4:	2300      	movs	r3, #0
	capacity = 0;
   d5fa6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d5faa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5fac:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
   d5fae:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d5fb0:	a901      	add	r1, sp, #4
   d5fb2:	f7ff ff6f 	bl	d5e94 <utoa>
	*this = buf;
   d5fb6:	a901      	add	r1, sp, #4
   d5fb8:	4620      	mov	r0, r4
   d5fba:	f7ff ffde 	bl	d5f7a <_ZN6StringaSEPKc>
}
   d5fbe:	4620      	mov	r0, r4
   d5fc0:	b00a      	add	sp, #40	; 0x28
   d5fc2:	bd10      	pop	{r4, pc}

000d5fc4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5fc4:	b510      	push	{r4, lr}
   d5fc6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5fc8:	6800      	ldr	r0, [r0, #0]
   d5fca:	b108      	cbz	r0, d5fd0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5fcc:	f7ff fca4 	bl	d5918 <os_mutex_recursive_destroy>
    }
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	bd10      	pop	{r4, pc}

000d5fd4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5fd4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5fd6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5fd8:	4604      	mov	r4, r0
      if (_M_manager)
   d5fda:	b113      	cbz	r3, d5fe2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5fdc:	2203      	movs	r2, #3
   d5fde:	4601      	mov	r1, r0
   d5fe0:	4798      	blx	r3
    }
   d5fe2:	4620      	mov	r0, r4
   d5fe4:	bd10      	pop	{r4, pc}
	...

000d5fe8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5fe8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5fea:	4c06      	ldr	r4, [pc, #24]	; (d6004 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5fec:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5fee:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5ff0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5ff2:	f7ff fc89 	bl	d5908 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	4a03      	ldr	r2, [pc, #12]	; (d6008 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5ffa:	4904      	ldr	r1, [pc, #16]	; (d600c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6000:	f001 b82e 	b.w	d7060 <__aeabi_atexit>
   d6004:	2003e668 	.word	0x2003e668
   d6008:	2003e580 	.word	0x2003e580
   d600c:	000d5fc5 	.word	0x000d5fc5

000d6010 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6012:	4606      	mov	r6, r0
   d6014:	460d      	mov	r5, r1
  size_t n = 0;
   d6016:	188f      	adds	r7, r1, r2
   d6018:	2400      	movs	r4, #0
  while (size--) {
   d601a:	42bd      	cmp	r5, r7
   d601c:	d00c      	beq.n	d6038 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d601e:	6833      	ldr	r3, [r6, #0]
   d6020:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6024:	689b      	ldr	r3, [r3, #8]
   d6026:	4630      	mov	r0, r6
   d6028:	4798      	blx	r3
     if (chunk>=0)
   d602a:	1e03      	subs	r3, r0, #0
   d602c:	db01      	blt.n	d6032 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d602e:	441c      	add	r4, r3
  while (size--) {
   d6030:	e7f3      	b.n	d601a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6032:	2c00      	cmp	r4, #0
   d6034:	bf08      	it	eq
   d6036:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6038:	4620      	mov	r0, r4
   d603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d603c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d603c:	b513      	push	{r0, r1, r4, lr}
   d603e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6040:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6042:	b159      	cbz	r1, d605c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6044:	9101      	str	r1, [sp, #4]
   d6046:	f001 f981 	bl	d734c <strlen>
   d604a:	6823      	ldr	r3, [r4, #0]
   d604c:	9901      	ldr	r1, [sp, #4]
   d604e:	68db      	ldr	r3, [r3, #12]
   d6050:	4602      	mov	r2, r0
   d6052:	4620      	mov	r0, r4
    }
   d6054:	b002      	add	sp, #8
   d6056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d605a:	4718      	bx	r3
    }
   d605c:	b002      	add	sp, #8
   d605e:	bd10      	pop	{r4, pc}

000d6060 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6060:	6803      	ldr	r3, [r0, #0]
   d6062:	689b      	ldr	r3, [r3, #8]
   d6064:	4718      	bx	r3

000d6066 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6066:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6068:	210d      	movs	r1, #13
{
   d606a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d606c:	f7ff fff8 	bl	d6060 <_ZN5Print5printEc>
  n += print('\n');
   d6070:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6072:	4604      	mov	r4, r0
  n += print('\n');
   d6074:	4628      	mov	r0, r5
   d6076:	f7ff fff3 	bl	d6060 <_ZN5Print5printEc>
  return n;
}
   d607a:	4420      	add	r0, r4
   d607c:	bd38      	pop	{r3, r4, r5, pc}

000d607e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d607e:	b538      	push	{r3, r4, r5, lr}
   d6080:	4605      	mov	r5, r0
  return write(str);
   d6082:	f7ff ffdb 	bl	d603c <_ZN5Print5writeEPKc>
   d6086:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6088:	4628      	mov	r0, r5
   d608a:	f7ff ffec 	bl	d6066 <_ZN5Print7printlnEv>
  return n;
}
   d608e:	4420      	add	r0, r4
   d6090:	bd38      	pop	{r3, r4, r5, pc}

000d6092 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6092:	b530      	push	{r4, r5, lr}
   d6094:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6096:	2300      	movs	r3, #0
   d6098:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d609c:	2a01      	cmp	r2, #1
   d609e:	bf98      	it	ls
   d60a0:	220a      	movls	r2, #10
   d60a2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d60a4:	460d      	mov	r5, r1
   d60a6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d60aa:	fb01 5312 	mls	r3, r1, r2, r5
   d60ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d60b2:	2b09      	cmp	r3, #9
   d60b4:	bf94      	ite	ls
   d60b6:	3330      	addls	r3, #48	; 0x30
   d60b8:	3337      	addhi	r3, #55	; 0x37
   d60ba:	b2db      	uxtb	r3, r3
  } while(n);
   d60bc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d60be:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d60c2:	d9ef      	bls.n	d60a4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d60c4:	4621      	mov	r1, r4
   d60c6:	f7ff ffb9 	bl	d603c <_ZN5Print5writeEPKc>
}
   d60ca:	b00b      	add	sp, #44	; 0x2c
   d60cc:	bd30      	pop	{r4, r5, pc}

000d60ce <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d60ce:	b510      	push	{r4, lr}
   d60d0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d60d2:	f7ff fbf9 	bl	d58c8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d60d6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d60d8:	6823      	ldr	r3, [r4, #0]
   d60da:	4620      	mov	r0, r4
   d60dc:	695b      	ldr	r3, [r3, #20]
   d60de:	4798      	blx	r3
    if (c >= 0) return c;
   d60e0:	2800      	cmp	r0, #0
   d60e2:	da08      	bge.n	d60f6 <_ZN6Stream9timedReadEv+0x28>
   d60e4:	f7ff fbf0 	bl	d58c8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d60e8:	68e3      	ldr	r3, [r4, #12]
   d60ea:	1ac0      	subs	r0, r0, r3
   d60ec:	68a3      	ldr	r3, [r4, #8]
   d60ee:	4298      	cmp	r0, r3
   d60f0:	d3f2      	bcc.n	d60d8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d60f2:	f04f 30ff 	mov.w	r0, #4294967295
}
   d60f6:	bd10      	pop	{r4, pc}

000d60f8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d60f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60fa:	4606      	mov	r6, r0
   d60fc:	460d      	mov	r5, r1
   d60fe:	4617      	mov	r7, r2
  size_t count = 0;
   d6100:	2400      	movs	r4, #0
  while (count < length) {
   d6102:	42bc      	cmp	r4, r7
   d6104:	d007      	beq.n	d6116 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d6106:	4630      	mov	r0, r6
   d6108:	f7ff ffe1 	bl	d60ce <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d610c:	1e03      	subs	r3, r0, #0
   d610e:	db02      	blt.n	d6116 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d6110:	552b      	strb	r3, [r5, r4]
    count++;
   d6112:	3401      	adds	r4, #1
  while (count < length) {
   d6114:	e7f5      	b.n	d6102 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d6116:	4620      	mov	r0, r4
   d6118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d611a <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d611a:	2300      	movs	r3, #0
   d611c:	6840      	ldr	r0, [r0, #4]
   d611e:	461a      	mov	r2, r3
   d6120:	4619      	mov	r1, r3
   d6122:	f7ff bd7d 	b.w	d5c20 <network_on>
	...

000d6128 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6128:	4b01      	ldr	r3, [pc, #4]	; (d6130 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d612a:	4a02      	ldr	r2, [pc, #8]	; (d6134 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d612c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d612e:	4770      	bx	lr
   d6130:	2003e66c 	.word	0x2003e66c
   d6134:	000d79ac 	.word	0x000d79ac

000d6138 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6138:	4b02      	ldr	r3, [pc, #8]	; (d6144 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d613a:	681a      	ldr	r2, [r3, #0]
   d613c:	4b02      	ldr	r3, [pc, #8]	; (d6148 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d613e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6140:	4770      	bx	lr
   d6142:	bf00      	nop
   d6144:	2003e518 	.word	0x2003e518
   d6148:	2003e670 	.word	0x2003e670

000d614c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d614c:	2100      	movs	r1, #0
   d614e:	f7ff bd23 	b.w	d5b98 <system_delay_ms>

000d6152 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6152:	b510      	push	{r4, lr}
   d6154:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6156:	f7ff ff3d 	bl	d5fd4 <_ZNSt14_Function_baseD1Ev>
   d615a:	4620      	mov	r0, r4
   d615c:	bd10      	pop	{r4, pc}
	...

000d6160 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6160:	4803      	ldr	r0, [pc, #12]	; (d6170 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6162:	4a04      	ldr	r2, [pc, #16]	; (d6174 <_GLOBAL__sub_I_RGB+0x14>)
   d6164:	4904      	ldr	r1, [pc, #16]	; (d6178 <_GLOBAL__sub_I_RGB+0x18>)
   d6166:	2300      	movs	r3, #0
   d6168:	6083      	str	r3, [r0, #8]
   d616a:	f000 bf79 	b.w	d7060 <__aeabi_atexit>
   d616e:	bf00      	nop
   d6170:	2003e674 	.word	0x2003e674
   d6174:	2003e580 	.word	0x2003e580
   d6178:	000d6153 	.word	0x000d6153

000d617c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d617c:	4b01      	ldr	r3, [pc, #4]	; (d6184 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d617e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6180:	4770      	bx	lr
   d6182:	bf00      	nop
   d6184:	2003e51c 	.word	0x2003e51c

000d6188 <serialEventRun>:
{
   d6188:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d618a:	4b0b      	ldr	r3, [pc, #44]	; (d61b8 <serialEventRun+0x30>)
   d618c:	b143      	cbz	r3, d61a0 <serialEventRun+0x18>
   d618e:	f000 f97d 	bl	d648c <_Z16_fetch_usbserialv>
   d6192:	6803      	ldr	r3, [r0, #0]
   d6194:	691b      	ldr	r3, [r3, #16]
   d6196:	4798      	blx	r3
   d6198:	2800      	cmp	r0, #0
   d619a:	dd01      	ble.n	d61a0 <serialEventRun+0x18>
        serialEvent();
   d619c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d61a0:	4b06      	ldr	r3, [pc, #24]	; (d61bc <serialEventRun+0x34>)
   d61a2:	b143      	cbz	r3, d61b6 <serialEventRun+0x2e>
   d61a4:	f000 f9f0 	bl	d6588 <_Z22__fetch_global_Serial1v>
   d61a8:	6803      	ldr	r3, [r0, #0]
   d61aa:	691b      	ldr	r3, [r3, #16]
   d61ac:	4798      	blx	r3
   d61ae:	2800      	cmp	r0, #0
   d61b0:	dd01      	ble.n	d61b6 <serialEventRun+0x2e>
        serialEvent1();
   d61b2:	f3af 8000 	nop.w
}
   d61b6:	bd08      	pop	{r3, pc}
	...

000d61c0 <_post_loop>:
{
   d61c0:	b508      	push	{r3, lr}
	serialEventRun();
   d61c2:	f7ff ffe1 	bl	d6188 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d61c6:	f7ff fb7f 	bl	d58c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d61ca:	4b01      	ldr	r3, [pc, #4]	; (d61d0 <_post_loop+0x10>)
   d61cc:	6018      	str	r0, [r3, #0]
}
   d61ce:	bd08      	pop	{r3, pc}
   d61d0:	2003e7d4 	.word	0x2003e7d4

000d61d4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d61d4:	4802      	ldr	r0, [pc, #8]	; (d61e0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d61d6:	4a03      	ldr	r2, [pc, #12]	; (d61e4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d61d8:	4903      	ldr	r1, [pc, #12]	; (d61e8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d61da:	1a12      	subs	r2, r2, r0
   d61dc:	f001 b872 	b.w	d72c4 <memcpy>
   d61e0:	2003f400 	.word	0x2003f400
   d61e4:	2003f404 	.word	0x2003f404
   d61e8:	000d7d80 	.word	0x000d7d80

000d61ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d61ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d61ee:	2300      	movs	r3, #0
   d61f0:	9300      	str	r3, [sp, #0]
   d61f2:	461a      	mov	r2, r3
   d61f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d61f8:	f7ff fce8 	bl	d5bcc <system_ctrl_set_result>
}
   d61fc:	b003      	add	sp, #12
   d61fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6204 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6204:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6206:	8843      	ldrh	r3, [r0, #2]
   d6208:	2b0a      	cmp	r3, #10
   d620a:	d008      	beq.n	d621e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d620c:	2b50      	cmp	r3, #80	; 0x50
   d620e:	d10b      	bne.n	d6228 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6210:	4b09      	ldr	r3, [pc, #36]	; (d6238 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6212:	681b      	ldr	r3, [r3, #0]
   d6214:	b14b      	cbz	r3, d622a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6216:	b003      	add	sp, #12
   d6218:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d621c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d621e:	f7ff ffe5 	bl	d61ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6222:	b003      	add	sp, #12
   d6224:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6228:	2300      	movs	r3, #0
   d622a:	9300      	str	r3, [sp, #0]
   d622c:	461a      	mov	r2, r3
   d622e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6232:	f7ff fccb 	bl	d5bcc <system_ctrl_set_result>
}
   d6236:	e7f4      	b.n	d6222 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6238:	2003e688 	.word	0x2003e688

000d623c <module_user_init_hook>:
{
   d623c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d623e:	4c12      	ldr	r4, [pc, #72]	; (d6288 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6240:	4812      	ldr	r0, [pc, #72]	; (d628c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6242:	4d13      	ldr	r5, [pc, #76]	; (d6290 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6244:	2100      	movs	r1, #0
   d6246:	f7ff fd6b 	bl	d5d20 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d624a:	6823      	ldr	r3, [r4, #0]
   d624c:	42ab      	cmp	r3, r5
   d624e:	4b11      	ldr	r3, [pc, #68]	; (d6294 <module_user_init_hook+0x58>)
   d6250:	bf0c      	ite	eq
   d6252:	2201      	moveq	r2, #1
   d6254:	2200      	movne	r2, #0
   d6256:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6258:	d002      	beq.n	d6260 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d625a:	f7ff ffbb 	bl	d61d4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d625e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6260:	f7ff fb2a 	bl	d58b8 <HAL_RNG_GetRandomNumber>
   d6264:	4604      	mov	r4, r0
    srand(seed);
   d6266:	f001 f843 	bl	d72f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d626a:	4b0b      	ldr	r3, [pc, #44]	; (d6298 <module_user_init_hook+0x5c>)
   d626c:	b113      	cbz	r3, d6274 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d626e:	4620      	mov	r0, r4
   d6270:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6274:	2100      	movs	r1, #0
   d6276:	4808      	ldr	r0, [pc, #32]	; (d6298 <module_user_init_hook+0x5c>)
   d6278:	f7ff fd22 	bl	d5cc0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d627c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6280:	4806      	ldr	r0, [pc, #24]	; (d629c <module_user_init_hook+0x60>)
   d6282:	2100      	movs	r1, #0
   d6284:	f7ff bc98 	b.w	d5bb8 <system_ctrl_set_app_request_handler>
   d6288:	2003f400 	.word	0x2003f400
   d628c:	000d617d 	.word	0x000d617d
   d6290:	9a271c1e 	.word	0x9a271c1e
   d6294:	2003e684 	.word	0x2003e684
   d6298:	00000000 	.word	0x00000000
   d629c:	000d6205 	.word	0x000d6205

000d62a0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d62a0:	4770      	bx	lr

000d62a2 <_ZN9IPAddressD0Ev>:
   d62a2:	b510      	push	{r4, lr}
   d62a4:	2118      	movs	r1, #24
   d62a6:	4604      	mov	r4, r0
   d62a8:	f000 fedf 	bl	d706a <_ZdlPvj>
   d62ac:	4620      	mov	r0, r4
   d62ae:	bd10      	pop	{r4, pc}

000d62b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d62b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d62b2:	7d03      	ldrb	r3, [r0, #20]
   d62b4:	2b06      	cmp	r3, #6
{
   d62b6:	b08d      	sub	sp, #52	; 0x34
   d62b8:	460e      	mov	r6, r1
   d62ba:	f100 0704 	add.w	r7, r0, #4
   d62be:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d62c2:	d012      	beq.n	d62ea <_ZNK9IPAddress7printToER5Print+0x3a>
   d62c4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d62c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d62cc:	220a      	movs	r2, #10
   d62ce:	4630      	mov	r0, r6
   d62d0:	f7ff fedf 	bl	d6092 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d62d4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d62d6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d62d8:	d019      	beq.n	d630e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d62da:	2c00      	cmp	r4, #0
   d62dc:	d0f4      	beq.n	d62c8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d62de:	212e      	movs	r1, #46	; 0x2e
   d62e0:	4630      	mov	r0, r6
   d62e2:	f7ff febd 	bl	d6060 <_ZN5Print5printEc>
   d62e6:	4404      	add	r4, r0
   d62e8:	e7ee      	b.n	d62c8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d62ea:	232f      	movs	r3, #47	; 0x2f
   d62ec:	466a      	mov	r2, sp
   d62ee:	4639      	mov	r1, r7
   d62f0:	200a      	movs	r0, #10
		buf[0] = 0;
   d62f2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d62f6:	f7ff fb17 	bl	d5928 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d62fa:	4668      	mov	r0, sp
   d62fc:	f001 f826 	bl	d734c <strlen>
   d6300:	6833      	ldr	r3, [r6, #0]
   d6302:	4602      	mov	r2, r0
   d6304:	68db      	ldr	r3, [r3, #12]
   d6306:	4669      	mov	r1, sp
   d6308:	4630      	mov	r0, r6
   d630a:	4798      	blx	r3
   d630c:	4604      	mov	r4, r0
    }
    return n;
}
   d630e:	4620      	mov	r0, r4
   d6310:	b00d      	add	sp, #52	; 0x34
   d6312:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6314 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6314:	b510      	push	{r4, lr}
   d6316:	4b05      	ldr	r3, [pc, #20]	; (d632c <_ZN9IPAddressC1Ev+0x18>)
   d6318:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d631a:	2211      	movs	r2, #17
   d631c:	f840 3b04 	str.w	r3, [r0], #4
   d6320:	2100      	movs	r1, #0
   d6322:	f000 ffdd 	bl	d72e0 <memset>
}
   d6326:	4620      	mov	r0, r4
   d6328:	bd10      	pop	{r4, pc}
   d632a:	bf00      	nop
   d632c:	000d79d4 	.word	0x000d79d4

000d6330 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6330:	4603      	mov	r3, r0
   d6332:	4a07      	ldr	r2, [pc, #28]	; (d6350 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6334:	b510      	push	{r4, lr}
   d6336:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d633a:	f101 0210 	add.w	r2, r1, #16
   d633e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6342:	f843 4b04 	str.w	r4, [r3], #4
   d6346:	4291      	cmp	r1, r2
   d6348:	d1f9      	bne.n	d633e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d634a:	780a      	ldrb	r2, [r1, #0]
   d634c:	701a      	strb	r2, [r3, #0]
}
   d634e:	bd10      	pop	{r4, pc}
   d6350:	000d79d4 	.word	0x000d79d4

000d6354 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d6354:	7d03      	ldrb	r3, [r0, #20]
   d6356:	2b04      	cmp	r3, #4
   d6358:	d104      	bne.n	d6364 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d635a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d635c:	3800      	subs	r0, #0
   d635e:	bf18      	it	ne
   d6360:	2001      	movne	r0, #1
   d6362:	4770      	bx	lr
    } else if (version() == 6) {
   d6364:	2b06      	cmp	r3, #6
   d6366:	d107      	bne.n	d6378 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6368:	6843      	ldr	r3, [r0, #4]
   d636a:	b93b      	cbnz	r3, d637c <_ZNK9IPAddresscvbEv+0x28>
   d636c:	6883      	ldr	r3, [r0, #8]
   d636e:	b92b      	cbnz	r3, d637c <_ZNK9IPAddresscvbEv+0x28>
   d6370:	68c3      	ldr	r3, [r0, #12]
   d6372:	b91b      	cbnz	r3, d637c <_ZNK9IPAddresscvbEv+0x28>
   d6374:	6900      	ldr	r0, [r0, #16]
   d6376:	e7f1      	b.n	d635c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d6378:	2000      	movs	r0, #0
   d637a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d637c:	2001      	movs	r0, #1
}
   d637e:	4770      	bx	lr

000d6380 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6380:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6382:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6386:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d638a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d638e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6392:	2304      	movs	r3, #4
   d6394:	6041      	str	r1, [r0, #4]
   d6396:	7503      	strb	r3, [r0, #20]
}
   d6398:	bd10      	pop	{r4, pc}
	...

000d639c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d639c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d639e:	4d04      	ldr	r5, [pc, #16]	; (d63b0 <_ZN9IPAddressC1Ehhhh+0x14>)
   d63a0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d63a2:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d63a6:	9500      	str	r5, [sp, #0]
   d63a8:	f7ff ffea 	bl	d6380 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d63ac:	b003      	add	sp, #12
   d63ae:	bd30      	pop	{r4, r5, pc}
   d63b0:	000d79d4 	.word	0x000d79d4

000d63b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d63b4:	b513      	push	{r0, r1, r4, lr}
   d63b6:	4b05      	ldr	r3, [pc, #20]	; (d63cc <_ZN9IPAddressC1EPKh+0x18>)
   d63b8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d63ba:	78cb      	ldrb	r3, [r1, #3]
   d63bc:	9300      	str	r3, [sp, #0]
   d63be:	788b      	ldrb	r3, [r1, #2]
   d63c0:	784a      	ldrb	r2, [r1, #1]
   d63c2:	7809      	ldrb	r1, [r1, #0]
   d63c4:	f7ff ffdc 	bl	d6380 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d63c8:	b002      	add	sp, #8
   d63ca:	bd10      	pop	{r4, pc}
   d63cc:	000d79d4 	.word	0x000d79d4

000d63d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d63d0:	7441      	strb	r1, [r0, #17]
}
   d63d2:	4770      	bx	lr

000d63d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d63d4:	4770      	bx	lr

000d63d6 <_ZN9USBSerial4readEv>:
{
   d63d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d63d8:	2100      	movs	r1, #0
   d63da:	7c00      	ldrb	r0, [r0, #16]
   d63dc:	f7ff fbb4 	bl	d5b48 <HAL_USB_USART_Receive_Data>
}
   d63e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d63e4:	bd08      	pop	{r3, pc}

000d63e6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d63e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d63e8:	2101      	movs	r1, #1
   d63ea:	7c00      	ldrb	r0, [r0, #16]
   d63ec:	f7ff fbac 	bl	d5b48 <HAL_USB_USART_Receive_Data>
}
   d63f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d63f4:	bd08      	pop	{r3, pc}

000d63f6 <_ZN9USBSerial17availableForWriteEv>:
{
   d63f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d63f8:	7c00      	ldrb	r0, [r0, #16]
   d63fa:	f7ff fb9d 	bl	d5b38 <HAL_USB_USART_Available_Data_For_Write>
}
   d63fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6402:	bd08      	pop	{r3, pc}

000d6404 <_ZN9USBSerial9availableEv>:
{
   d6404:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6406:	7c00      	ldrb	r0, [r0, #16]
   d6408:	f7ff fb8e 	bl	d5b28 <HAL_USB_USART_Available_Data>
}
   d640c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6410:	bd08      	pop	{r3, pc}

000d6412 <_ZN9USBSerial5writeEh>:
{
   d6412:	b513      	push	{r0, r1, r4, lr}
   d6414:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6416:	7c00      	ldrb	r0, [r0, #16]
{
   d6418:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d641a:	f7ff fb8d 	bl	d5b38 <HAL_USB_USART_Available_Data_For_Write>
   d641e:	2800      	cmp	r0, #0
   d6420:	9901      	ldr	r1, [sp, #4]
   d6422:	dc01      	bgt.n	d6428 <_ZN9USBSerial5writeEh+0x16>
   d6424:	7c60      	ldrb	r0, [r4, #17]
   d6426:	b120      	cbz	r0, d6432 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6428:	7c20      	ldrb	r0, [r4, #16]
   d642a:	f7ff fb95 	bl	d5b58 <HAL_USB_USART_Send_Data>
   d642e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6432:	b002      	add	sp, #8
   d6434:	bd10      	pop	{r4, pc}

000d6436 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6436:	7c00      	ldrb	r0, [r0, #16]
   d6438:	f7ff bb96 	b.w	d5b68 <HAL_USB_USART_Flush_Data>

000d643c <_ZN9USBSerialD0Ev>:
   d643c:	b510      	push	{r4, lr}
   d643e:	2114      	movs	r1, #20
   d6440:	4604      	mov	r4, r0
   d6442:	f000 fe12 	bl	d706a <_ZdlPvj>
   d6446:	4620      	mov	r0, r4
   d6448:	bd10      	pop	{r4, pc}
	...

000d644c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d644c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d644e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6452:	4604      	mov	r4, r0
   d6454:	4608      	mov	r0, r1
   d6456:	2100      	movs	r1, #0
   d6458:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d645c:	4b04      	ldr	r3, [pc, #16]	; (d6470 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d645e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6460:	2301      	movs	r3, #1
  _serial = serial;
   d6462:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6464:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6466:	4611      	mov	r1, r2
   d6468:	f7ff fb4e 	bl	d5b08 <HAL_USB_USART_Init>
}
   d646c:	4620      	mov	r0, r4
   d646e:	bd10      	pop	{r4, pc}
   d6470:	000d79e8 	.word	0x000d79e8

000d6474 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6474:	7c00      	ldrb	r0, [r0, #16]
   d6476:	2200      	movs	r2, #0
   d6478:	f7ff bb4e 	b.w	d5b18 <HAL_USB_USART_Begin>

000d647c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d647c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d647e:	2214      	movs	r2, #20
{
   d6480:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6482:	2100      	movs	r1, #0
   d6484:	f000 ff2c 	bl	d72e0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6488:	4620      	mov	r0, r4
   d648a:	bd10      	pop	{r4, pc}

000d648c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d648c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d648e:	4c10      	ldr	r4, [pc, #64]	; (d64d0 <_Z16_fetch_usbserialv+0x44>)
{
   d6490:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6492:	a803      	add	r0, sp, #12
   d6494:	f7ff fff2 	bl	d647c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6498:	7821      	ldrb	r1, [r4, #0]
   d649a:	f3bf 8f5b 	dmb	ish
   d649e:	f011 0101 	ands.w	r1, r1, #1
   d64a2:	d111      	bne.n	d64c8 <_Z16_fetch_usbserialv+0x3c>
   d64a4:	4620      	mov	r0, r4
   d64a6:	9101      	str	r1, [sp, #4]
   d64a8:	f7fd fdfb 	bl	d40a2 <__cxa_guard_acquire>
   d64ac:	9901      	ldr	r1, [sp, #4]
   d64ae:	b158      	cbz	r0, d64c8 <_Z16_fetch_usbserialv+0x3c>
   d64b0:	aa03      	add	r2, sp, #12
   d64b2:	4808      	ldr	r0, [pc, #32]	; (d64d4 <_Z16_fetch_usbserialv+0x48>)
   d64b4:	f7ff ffca 	bl	d644c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d64b8:	4620      	mov	r0, r4
   d64ba:	f7fd fdf7 	bl	d40ac <__cxa_guard_release>
   d64be:	4a06      	ldr	r2, [pc, #24]	; (d64d8 <_Z16_fetch_usbserialv+0x4c>)
   d64c0:	4906      	ldr	r1, [pc, #24]	; (d64dc <_Z16_fetch_usbserialv+0x50>)
   d64c2:	4804      	ldr	r0, [pc, #16]	; (d64d4 <_Z16_fetch_usbserialv+0x48>)
   d64c4:	f000 fdcc 	bl	d7060 <__aeabi_atexit>
	return _usbserial;
}
   d64c8:	4802      	ldr	r0, [pc, #8]	; (d64d4 <_Z16_fetch_usbserialv+0x48>)
   d64ca:	b008      	add	sp, #32
   d64cc:	bd10      	pop	{r4, pc}
   d64ce:	bf00      	nop
   d64d0:	2003e68c 	.word	0x2003e68c
   d64d4:	2003e690 	.word	0x2003e690
   d64d8:	2003e580 	.word	0x2003e580
   d64dc:	000d63d5 	.word	0x000d63d5

000d64e0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d64e0:	4770      	bx	lr

000d64e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64e2:	7441      	strb	r1, [r0, #17]
}
   d64e4:	4770      	bx	lr

000d64e6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d64e6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d64e8:	7c00      	ldrb	r0, [r0, #16]
   d64ea:	f7ff fa6d 	bl	d59c8 <hal_usart_available_data_for_write>
}
   d64ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d64f2:	bd08      	pop	{r3, pc}

000d64f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d64f4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d64f6:	7c00      	ldrb	r0, [r0, #16]
   d64f8:	f7ff fa3e 	bl	d5978 <hal_usart_available>
}
   d64fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6500:	bd08      	pop	{r3, pc}

000d6502 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6502:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6504:	7c00      	ldrb	r0, [r0, #16]
   d6506:	f7ff fa47 	bl	d5998 <hal_usart_peek>
}
   d650a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d650e:	bd08      	pop	{r3, pc}

000d6510 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6510:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6512:	7c00      	ldrb	r0, [r0, #16]
   d6514:	f7ff fa38 	bl	d5988 <hal_usart_read>
}
   d6518:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d651c:	bd08      	pop	{r3, pc}

000d651e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d651e:	7c00      	ldrb	r0, [r0, #16]
   d6520:	f7ff ba42 	b.w	d59a8 <hal_usart_flush>

000d6524 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6524:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6526:	7c45      	ldrb	r5, [r0, #17]
{
   d6528:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d652a:	b12d      	cbz	r5, d6538 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d652c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d652e:	b003      	add	sp, #12
   d6530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6534:	f7ff ba18 	b.w	d5968 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6538:	7c00      	ldrb	r0, [r0, #16]
   d653a:	9101      	str	r1, [sp, #4]
   d653c:	f7ff fa44 	bl	d59c8 <hal_usart_available_data_for_write>
   d6540:	2800      	cmp	r0, #0
   d6542:	9901      	ldr	r1, [sp, #4]
   d6544:	dcf2      	bgt.n	d652c <_ZN11USARTSerial5writeEh+0x8>
}
   d6546:	4628      	mov	r0, r5
   d6548:	b003      	add	sp, #12
   d654a:	bd30      	pop	{r4, r5, pc}

000d654c <_ZN11USARTSerialD0Ev>:
   d654c:	b510      	push	{r4, lr}
   d654e:	2114      	movs	r1, #20
   d6550:	4604      	mov	r4, r0
   d6552:	f000 fd8a 	bl	d706a <_ZdlPvj>
   d6556:	4620      	mov	r0, r4
   d6558:	bd10      	pop	{r4, pc}
	...

000d655c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d655c:	b510      	push	{r4, lr}
   d655e:	f04f 0c00 	mov.w	ip, #0
   d6562:	4604      	mov	r4, r0
   d6564:	4608      	mov	r0, r1
   d6566:	4611      	mov	r1, r2
   d6568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d656c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6570:	4a04      	ldr	r2, [pc, #16]	; (d6584 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6572:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6574:	2201      	movs	r2, #1
  _serial = serial;
   d6576:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6578:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d657a:	461a      	mov	r2, r3
   d657c:	f7ff f9ec 	bl	d5958 <hal_usart_init>
}
   d6580:	4620      	mov	r0, r4
   d6582:	bd10      	pop	{r4, pc}
   d6584:	000d7a18 	.word	0x000d7a18

000d6588 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6588:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d658a:	4c0e      	ldr	r4, [pc, #56]	; (d65c4 <_Z22__fetch_global_Serial1v+0x3c>)
   d658c:	7821      	ldrb	r1, [r4, #0]
   d658e:	f3bf 8f5b 	dmb	ish
   d6592:	f011 0101 	ands.w	r1, r1, #1
   d6596:	d112      	bne.n	d65be <_Z22__fetch_global_Serial1v+0x36>
   d6598:	4620      	mov	r0, r4
   d659a:	9101      	str	r1, [sp, #4]
   d659c:	f7fd fd81 	bl	d40a2 <__cxa_guard_acquire>
   d65a0:	9901      	ldr	r1, [sp, #4]
   d65a2:	b160      	cbz	r0, d65be <_Z22__fetch_global_Serial1v+0x36>
   d65a4:	4a08      	ldr	r2, [pc, #32]	; (d65c8 <_Z22__fetch_global_Serial1v+0x40>)
   d65a6:	4b09      	ldr	r3, [pc, #36]	; (d65cc <_Z22__fetch_global_Serial1v+0x44>)
   d65a8:	4809      	ldr	r0, [pc, #36]	; (d65d0 <_Z22__fetch_global_Serial1v+0x48>)
   d65aa:	f7ff ffd7 	bl	d655c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d65ae:	4620      	mov	r0, r4
   d65b0:	f7fd fd7c 	bl	d40ac <__cxa_guard_release>
   d65b4:	4a07      	ldr	r2, [pc, #28]	; (d65d4 <_Z22__fetch_global_Serial1v+0x4c>)
   d65b6:	4908      	ldr	r1, [pc, #32]	; (d65d8 <_Z22__fetch_global_Serial1v+0x50>)
   d65b8:	4805      	ldr	r0, [pc, #20]	; (d65d0 <_Z22__fetch_global_Serial1v+0x48>)
   d65ba:	f000 fd51 	bl	d7060 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d65be:	4804      	ldr	r0, [pc, #16]	; (d65d0 <_Z22__fetch_global_Serial1v+0x48>)
   d65c0:	b002      	add	sp, #8
   d65c2:	bd10      	pop	{r4, pc}
   d65c4:	2003e6a4 	.word	0x2003e6a4
   d65c8:	2003e6a8 	.word	0x2003e6a8
   d65cc:	2003e72c 	.word	0x2003e72c
   d65d0:	2003e7b0 	.word	0x2003e7b0
   d65d4:	2003e580 	.word	0x2003e580
   d65d8:	000d64e1 	.word	0x000d64e1

000d65dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d65dc:	4770      	bx	lr

000d65de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d65de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65e0:	4606      	mov	r6, r0
   d65e2:	4615      	mov	r5, r2
   d65e4:	460c      	mov	r4, r1
   d65e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d65e8:	42bc      	cmp	r4, r7
   d65ea:	d006      	beq.n	d65fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d65ec:	6833      	ldr	r3, [r6, #0]
   d65ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   d65f2:	689b      	ldr	r3, [r3, #8]
   d65f4:	4630      	mov	r0, r6
   d65f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d65f8:	e7f6      	b.n	d65e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d65fa:	4628      	mov	r0, r5
   d65fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d65fe:	7c00      	ldrb	r0, [r0, #16]
   d6600:	2200      	movs	r2, #0
   d6602:	f7ff ba01 	b.w	d5a08 <hal_i2c_write>

000d6606 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6606:	7c00      	ldrb	r0, [r0, #16]
   d6608:	2100      	movs	r1, #0
   d660a:	f7ff ba05 	b.w	d5a18 <hal_i2c_available>

000d660e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d660e:	7c00      	ldrb	r0, [r0, #16]
   d6610:	2100      	movs	r1, #0
   d6612:	f7ff ba09 	b.w	d5a28 <hal_i2c_read>

000d6616 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6616:	7c00      	ldrb	r0, [r0, #16]
   d6618:	2100      	movs	r1, #0
   d661a:	f7ff ba0d 	b.w	d5a38 <hal_i2c_peek>

000d661e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d661e:	7c00      	ldrb	r0, [r0, #16]
   d6620:	2100      	movs	r1, #0
   d6622:	f7ff ba11 	b.w	d5a48 <hal_i2c_flush>

000d6626 <_ZN7TwoWireD0Ev>:
   d6626:	b510      	push	{r4, lr}
   d6628:	2114      	movs	r1, #20
   d662a:	4604      	mov	r4, r0
   d662c:	f000 fd1d 	bl	d706a <_ZdlPvj>
   d6630:	4620      	mov	r0, r4
   d6632:	bd10      	pop	{r4, pc}

000d6634 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6634:	b510      	push	{r4, lr}
   d6636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d663a:	4604      	mov	r4, r0
   d663c:	4608      	mov	r0, r1
   d663e:	2100      	movs	r1, #0
   d6640:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6644:	4b03      	ldr	r3, [pc, #12]	; (d6654 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6646:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6648:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d664a:	4611      	mov	r1, r2
   d664c:	f7ff fa0c 	bl	d5a68 <hal_i2c_init>
}
   d6650:	4620      	mov	r0, r4
   d6652:	bd10      	pop	{r4, pc}
   d6654:	000d7a48 	.word	0x000d7a48

000d6658 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6658:	2300      	movs	r3, #0
   d665a:	7c00      	ldrb	r0, [r0, #16]
   d665c:	461a      	mov	r2, r3
   d665e:	4619      	mov	r1, r3
   d6660:	f7ff b9ba 	b.w	d59d8 <hal_i2c_begin>

000d6664 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6666:	2200      	movs	r2, #0
   d6668:	2314      	movs	r3, #20
   d666a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d666e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6672:	780b      	ldrb	r3, [r1, #0]
   d6674:	f88d 3008 	strb.w	r3, [sp, #8]
   d6678:	684b      	ldr	r3, [r1, #4]
   d667a:	9303      	str	r3, [sp, #12]
   d667c:	68cb      	ldr	r3, [r1, #12]
   d667e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6680:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6682:	7a0b      	ldrb	r3, [r1, #8]
   d6684:	9305      	str	r3, [sp, #20]
   d6686:	a901      	add	r1, sp, #4
   d6688:	f7ff f9f6 	bl	d5a78 <hal_i2c_request_ex>
}
   d668c:	b007      	add	sp, #28
   d668e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6692 <_ZN7TwoWire11requestFromEhjh>:
{
   d6692:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6694:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6696:	f88d 1000 	strb.w	r1, [sp]
   d669a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d669e:	9103      	str	r1, [sp, #12]
   d66a0:	bf18      	it	ne
   d66a2:	2301      	movne	r3, #1
   d66a4:	4669      	mov	r1, sp
    size_ = size;
   d66a6:	9201      	str	r2, [sp, #4]
   d66a8:	f88d 3008 	strb.w	r3, [sp, #8]
   d66ac:	f7ff ffda 	bl	d6664 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d66b0:	b005      	add	sp, #20
   d66b2:	f85d fb04 	ldr.w	pc, [sp], #4

000d66b6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d66b6:	2301      	movs	r3, #1
   d66b8:	f7ff bfeb 	b.w	d6692 <_ZN7TwoWire11requestFromEhjh>

000d66bc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d66bc:	7c00      	ldrb	r0, [r0, #16]
   d66be:	2200      	movs	r2, #0
   d66c0:	f7ff b992 	b.w	d59e8 <hal_i2c_begin_transmission>

000d66c4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d66c4:	7c00      	ldrb	r0, [r0, #16]
   d66c6:	2200      	movs	r2, #0
   d66c8:	f7ff b996 	b.w	d59f8 <hal_i2c_end_transmission>

000d66cc <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d66cc:	2101      	movs	r1, #1
   d66ce:	f7ff bff9 	b.w	d66c4 <_ZN7TwoWire15endTransmissionEh>

000d66d2 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d66d2:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d66d4:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d66d6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d66da:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d66dc:	2201      	movs	r2, #1
   d66de:	f04f 33ff 	mov.w	r3, #4294967295
   d66e2:	f10d 0107 	add.w	r1, sp, #7
   d66e6:	47a0      	blx	r4
}
   d66e8:	b002      	add	sp, #8
   d66ea:	bd10      	pop	{r4, pc}

000d66ec <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d66ec:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d66ee:	6803      	ldr	r3, [r0, #0]
   d66f0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d66f2:	f04f 33ff 	mov.w	r3, #4294967295
   d66f6:	46a4      	mov	ip, r4
}
   d66f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d66fc:	4760      	bx	ip

000d66fe <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d66fe:	b513      	push	{r0, r1, r4, lr}
   d6700:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d6702:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6704:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d6708:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d670a:	f10d 0107 	add.w	r1, sp, #7
   d670e:	2201      	movs	r2, #1
   d6710:	47a0      	blx	r4
}
   d6712:	b002      	add	sp, #8
   d6714:	bd10      	pop	{r4, pc}

000d6716 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d6716:	4770      	bx	lr

000d6718 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6718:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d671a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d671c:	681a      	ldr	r2, [r3, #0]
   d671e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d6720:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d6722:	da10      	bge.n	d6746 <_ZN9TCPClient9connectedEv+0x2e>
   d6724:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6728:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d672c:	429a      	cmp	r2, r3
   d672e:	d10a      	bne.n	d6746 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d6730:	6803      	ldr	r3, [r0, #0]
   d6732:	691b      	ldr	r3, [r3, #16]
   d6734:	4798      	blx	r3
        if (!rv) {
   d6736:	4604      	mov	r4, r0
   d6738:	b928      	cbnz	r0, d6746 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d673a:	682b      	ldr	r3, [r5, #0]
   d673c:	4628      	mov	r0, r5
   d673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6740:	4798      	blx	r3
        rv = available();
   d6742:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d6744:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d6746:	2001      	movs	r0, #1
   d6748:	e7fc      	b.n	d6744 <_ZN9TCPClient9connectedEv+0x2c>

000d674a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d674a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d674c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d674e:	43c0      	mvns	r0, r0
   d6750:	0fc0      	lsrs	r0, r0, #31
   d6752:	4770      	bx	lr

000d6754 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6754:	4770      	bx	lr
	...

000d6758 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6758:	4b06      	ldr	r3, [pc, #24]	; (d6774 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d675a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d675c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d675e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6762:	d005      	beq.n	d6770 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6764:	4608      	mov	r0, r1
   d6766:	f000 fc85 	bl	d7074 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d676a:	2800      	cmp	r0, #0
	return nullptr;
   d676c:	bf08      	it	eq
   d676e:	2400      	moveq	r4, #0
      }
   d6770:	4620      	mov	r0, r4
   d6772:	bd10      	pop	{r4, pc}
   d6774:	000d79a4 	.word	0x000d79a4

000d6778 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6778:	b510      	push	{r4, lr}
   d677a:	21ac      	movs	r1, #172	; 0xac
   d677c:	4604      	mov	r4, r0
   d677e:	f000 fc74 	bl	d706a <_ZdlPvj>
   d6782:	4620      	mov	r0, r4
   d6784:	bd10      	pop	{r4, pc}

000d6786 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6786:	f7fd bc88 	b.w	d409a <_ZdlPv>

000d678a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d678a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d678e:	f04f 0800 	mov.w	r8, #0
   d6792:	b086      	sub	sp, #24
   d6794:	461d      	mov	r5, r3
   d6796:	f8c0 8004 	str.w	r8, [r0, #4]
   d679a:	4604      	mov	r4, r0
   d679c:	460e      	mov	r6, r1
   d679e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d67a0:	4641      	mov	r1, r8
   d67a2:	2210      	movs	r2, #16
   d67a4:	a802      	add	r0, sp, #8
   d67a6:	f000 fd9b 	bl	d72e0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d67aa:	1c6b      	adds	r3, r5, #1
   d67ac:	d009      	beq.n	d67c2 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d67ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d67b2:	fbb5 f3f0 	udiv	r3, r5, r0
   d67b6:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d67ba:	fb00 5313 	mls	r3, r0, r3, r5
   d67be:	4358      	muls	r0, r3
   d67c0:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d67c2:	6960      	ldr	r0, [r4, #20]
   d67c4:	2310      	movs	r3, #16
   d67c6:	9300      	str	r3, [sp, #0]
   d67c8:	6800      	ldr	r0, [r0, #0]
   d67ca:	ab02      	add	r3, sp, #8
   d67cc:	f241 0205 	movw	r2, #4101	; 0x1005
   d67d0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d67d4:	f7ff f958 	bl	d5a88 <sock_setsockopt>
    if (ret < 0) {
   d67d8:	2800      	cmp	r0, #0
   d67da:	da07      	bge.n	d67ec <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d67dc:	f7ff fa98 	bl	d5d10 <__errno>
   d67e0:	6803      	ldr	r3, [r0, #0]
   d67e2:	6063      	str	r3, [r4, #4]
        return 0;
   d67e4:	2000      	movs	r0, #0
}
   d67e6:	b006      	add	sp, #24
   d67e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d67ec:	6960      	ldr	r0, [r4, #20]
   d67ee:	2300      	movs	r3, #0
   d67f0:	6800      	ldr	r0, [r0, #0]
   d67f2:	463a      	mov	r2, r7
   d67f4:	4631      	mov	r1, r6
   d67f6:	f7ff f967 	bl	d5ac8 <sock_send>
    if (ret < 0) {
   d67fa:	1e03      	subs	r3, r0, #0
   d67fc:	dbee      	blt.n	d67dc <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d67fe:	4618      	mov	r0, r3
   d6800:	e7f1      	b.n	d67e6 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d6804 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d6804:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d6806:	6984      	ldr	r4, [r0, #24]
   d6808:	4b0a      	ldr	r3, [pc, #40]	; (d6834 <_ZN9TCPClientD1Ev+0x30>)
   d680a:	6003      	str	r3, [r0, #0]
   d680c:	4605      	mov	r5, r0
   d680e:	b17c      	cbz	r4, d6830 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d6810:	6863      	ldr	r3, [r4, #4]
   d6812:	3b01      	subs	r3, #1
   d6814:	6063      	str	r3, [r4, #4]
   d6816:	b95b      	cbnz	r3, d6830 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d6818:	6823      	ldr	r3, [r4, #0]
   d681a:	4620      	mov	r0, r4
   d681c:	689b      	ldr	r3, [r3, #8]
   d681e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6820:	68a3      	ldr	r3, [r4, #8]
   d6822:	3b01      	subs	r3, #1
   d6824:	60a3      	str	r3, [r4, #8]
   d6826:	b91b      	cbnz	r3, d6830 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d6828:	6823      	ldr	r3, [r4, #0]
   d682a:	4620      	mov	r0, r4
   d682c:	68db      	ldr	r3, [r3, #12]
   d682e:	4798      	blx	r3
   d6830:	4628      	mov	r0, r5
   d6832:	bd38      	pop	{r3, r4, r5, pc}
   d6834:	000d7aa4 	.word	0x000d7aa4

000d6838 <_ZN9TCPClientD0Ev>:
   d6838:	b510      	push	{r4, lr}
   d683a:	4604      	mov	r4, r0
   d683c:	f7ff ffe2 	bl	d6804 <_ZN9TCPClientD1Ev>
   d6840:	4620      	mov	r0, r4
   d6842:	211c      	movs	r1, #28
   d6844:	f000 fc11 	bl	d706a <_ZdlPvj>
   d6848:	4620      	mov	r0, r4
   d684a:	bd10      	pop	{r4, pc}

000d684c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d684c:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d684e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d6850:	4b05      	ldr	r3, [pc, #20]	; (d6868 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6852:	4604      	mov	r4, r0
   d6854:	358c      	adds	r5, #140	; 0x8c
   d6856:	f844 3b04 	str.w	r3, [r4], #4
   d685a:	4606      	mov	r6, r0
   d685c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d685e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6860:	682b      	ldr	r3, [r5, #0]
   d6862:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6864:	4630      	mov	r0, r6
   d6866:	bd70      	pop	{r4, r5, r6, pc}
   d6868:	000d79d4 	.word	0x000d79d4

000d686c <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d686c:	b510      	push	{r4, lr}
   d686e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6870:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6874:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6878:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d687a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d687c:	d005      	beq.n	d688a <_ZN9TCPClient4peekEv+0x1e>
   d687e:	6963      	ldr	r3, [r4, #20]
   d6880:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6884:	4413      	add	r3, r2
   d6886:	7918      	ldrb	r0, [r3, #4]
}
   d6888:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d688a:	6803      	ldr	r3, [r0, #0]
   d688c:	691b      	ldr	r3, [r3, #16]
   d688e:	4798      	blx	r3
   d6890:	2800      	cmp	r0, #0
   d6892:	d1f4      	bne.n	d687e <_ZN9TCPClient4peekEv+0x12>
   d6894:	f04f 30ff 	mov.w	r0, #4294967295
   d6898:	e7f6      	b.n	d6888 <_ZN9TCPClient4peekEv+0x1c>

000d689a <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d689a:	b510      	push	{r4, lr}
   d689c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d689e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d68a2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d68a6:	429a      	cmp	r2, r3
int TCPClient::read() {
   d68a8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d68aa:	d008      	beq.n	d68be <_ZN9TCPClient4readEv+0x24>
   d68ac:	6963      	ldr	r3, [r4, #20]
   d68ae:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d68b2:	1c51      	adds	r1, r2, #1
   d68b4:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d68b8:	4413      	add	r3, r2
   d68ba:	7918      	ldrb	r0, [r3, #4]
}
   d68bc:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d68be:	6803      	ldr	r3, [r0, #0]
   d68c0:	691b      	ldr	r3, [r3, #16]
   d68c2:	4798      	blx	r3
   d68c4:	2800      	cmp	r0, #0
   d68c6:	d1f1      	bne.n	d68ac <_ZN9TCPClient4readEv+0x12>
   d68c8:	f04f 30ff 	mov.w	r0, #4294967295
   d68cc:	e7f6      	b.n	d68bc <_ZN9TCPClient4readEv+0x22>

000d68ce <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d68ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68d0:	6943      	ldr	r3, [r0, #20]
   d68d2:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d68d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d68d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d68dc:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d68de:	4605      	mov	r5, r0
   d68e0:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d68e2:	d016      	beq.n	d6912 <_ZN9TCPClient4readEPhj+0x44>
   d68e4:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d68e6:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d68ea:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d68ee:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d68f0:	42bc      	cmp	r4, r7
   d68f2:	bf28      	it	cs
   d68f4:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d68f6:	3304      	adds	r3, #4
   d68f8:	4622      	mov	r2, r4
   d68fa:	4419      	add	r1, r3
   d68fc:	4630      	mov	r0, r6
   d68fe:	f000 fce1 	bl	d72c4 <memcpy>
   d6902:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6904:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6908:	4423      	add	r3, r4
   d690a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d690e:	4620      	mov	r0, r4
   d6910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d6912:	6803      	ldr	r3, [r0, #0]
   d6914:	691b      	ldr	r3, [r3, #16]
   d6916:	4798      	blx	r3
   d6918:	2800      	cmp	r0, #0
   d691a:	d1e3      	bne.n	d68e4 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d691c:	f04f 34ff 	mov.w	r4, #4294967295
   d6920:	e7f5      	b.n	d690e <_ZN9TCPClient4readEPhj+0x40>

000d6922 <_ZN9TCPClient12flush_bufferEv>:
   d6922:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6924:	2300      	movs	r3, #0
   d6926:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d692a:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d692c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d6930:	4770      	bx	lr

000d6932 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6936:	461f      	mov	r7, r3
    stop();
   d6938:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d693a:	460c      	mov	r4, r1
    stop();
   d693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d693e:	b08a      	sub	sp, #40	; 0x28
   d6940:	4605      	mov	r5, r0
   d6942:	4616      	mov	r6, r2
    stop();
   d6944:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6946:	7d23      	ldrb	r3, [r4, #20]
   d6948:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d694c:	2b04      	cmp	r3, #4
   d694e:	bf0c      	ite	eq
   d6950:	2002      	moveq	r0, #2
   d6952:	200a      	movne	r0, #10
   d6954:	2206      	movs	r2, #6
   d6956:	2101      	movs	r1, #1
   d6958:	f7ff f8be 	bl	d5ad8 <sock_socket>
   d695c:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6960:	696b      	ldr	r3, [r5, #20]
   d6962:	681b      	ldr	r3, [r3, #0]
   d6964:	2b00      	cmp	r3, #0
   d6966:	da08      	bge.n	d697a <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d6968:	682b      	ldr	r3, [r5, #0]
   d696a:	4628      	mov	r0, r5
   d696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d696e:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d6970:	4798      	blx	r3
}
   d6972:	4620      	mov	r0, r4
   d6974:	b00a      	add	sp, #40	; 0x28
   d6976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d697a:	4628      	mov	r0, r5
   d697c:	f7ff ffd1 	bl	d6922 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d6980:	b1b7      	cbz	r7, d69b0 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d6982:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6984:	a903      	add	r1, sp, #12
   d6986:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d6988:	9303      	str	r3, [sp, #12]
   d698a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d698e:	f7fe ff8b 	bl	d58a8 <if_index_to_name>
   d6992:	2800      	cmp	r0, #0
   d6994:	d1e8      	bne.n	d6968 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6996:	6968      	ldr	r0, [r5, #20]
   d6998:	2306      	movs	r3, #6
   d699a:	9300      	str	r3, [sp, #0]
   d699c:	6800      	ldr	r0, [r0, #0]
   d699e:	ab03      	add	r3, sp, #12
   d69a0:	f241 020b 	movw	r2, #4107	; 0x100b
   d69a4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d69a8:	f7ff f86e 	bl	d5a88 <sock_setsockopt>
   d69ac:	2800      	cmp	r0, #0
   d69ae:	d1db      	bne.n	d6968 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d69b0:	221c      	movs	r2, #28
   d69b2:	2100      	movs	r1, #0
   d69b4:	a803      	add	r0, sp, #12
   d69b6:	f000 fc93 	bl	d72e0 <memset>
    if (ip.version() == 4) {
   d69ba:	7d23      	ldrb	r3, [r4, #20]
   d69bc:	2b04      	cmp	r3, #4
   d69be:	d11d      	bne.n	d69fc <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d69c0:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d69c4:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d69c6:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d69ca:	f7fe ffbd 	bl	d5948 <inet_htons>
   d69ce:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d69d2:	6860      	ldr	r0, [r4, #4]
   d69d4:	f7fe ffb0 	bl	d5938 <inet_htonl>
   d69d8:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d69da:	696b      	ldr	r3, [r5, #20]
   d69dc:	221c      	movs	r2, #28
   d69de:	6818      	ldr	r0, [r3, #0]
   d69e0:	a903      	add	r1, sp, #12
   d69e2:	f7ff f861 	bl	d5aa8 <sock_connect>
   d69e6:	2800      	cmp	r0, #0
   d69e8:	d1be      	bne.n	d6968 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d69ea:	3404      	adds	r4, #4
   d69ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d69ee:	696d      	ldr	r5, [r5, #20]
   d69f0:	358c      	adds	r5, #140	; 0x8c
   d69f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d69f4:	6823      	ldr	r3, [r4, #0]
   d69f6:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d69f8:	2401      	movs	r4, #1
   d69fa:	e7ba      	b.n	d6972 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d69fc:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d6a00:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d6a02:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d6a06:	f7fe ff9f 	bl	d5948 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6a0a:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d6a0c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6a10:	1d23      	adds	r3, r4, #4
   d6a12:	f104 0714 	add.w	r7, r4, #20
   d6a16:	6818      	ldr	r0, [r3, #0]
   d6a18:	6859      	ldr	r1, [r3, #4]
   d6a1a:	4632      	mov	r2, r6
   d6a1c:	c203      	stmia	r2!, {r0, r1}
   d6a1e:	3308      	adds	r3, #8
   d6a20:	42bb      	cmp	r3, r7
   d6a22:	4616      	mov	r6, r2
   d6a24:	d1f7      	bne.n	d6a16 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d6a26:	e7d8      	b.n	d69da <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d6a28 <_ZN9TCPClient9availableEv>:
{
   d6a28:	b530      	push	{r4, r5, lr}
   d6a2a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d6a2c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d6a30:	b08b      	sub	sp, #44	; 0x2c
   d6a32:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d6a34:	b12b      	cbz	r3, d6a42 <_ZN9TCPClient9availableEv+0x1a>
   d6a36:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6a3a:	429a      	cmp	r2, r3
   d6a3c:	d101      	bne.n	d6a42 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d6a3e:	f7ff ff70 	bl	d6922 <_ZN9TCPClient12flush_bufferEv>
   d6a42:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d6a44:	6808      	ldr	r0, [r1, #0]
   d6a46:	2800      	cmp	r0, #0
   d6a48:	db18      	blt.n	d6a7c <_ZN9TCPClient9availableEv+0x54>
   d6a4a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d6a4e:	2d7f      	cmp	r5, #127	; 0x7f
   d6a50:	d814      	bhi.n	d6a7c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6a52:	3104      	adds	r1, #4
   d6a54:	2308      	movs	r3, #8
   d6a56:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6a5a:	4429      	add	r1, r5
   d6a5c:	f7ff f82c 	bl	d5ab8 <sock_recv>
            if (ret > 0) {
   d6a60:	2800      	cmp	r0, #0
   d6a62:	dd13      	ble.n	d6a8c <_ZN9TCPClient9availableEv+0x64>
   d6a64:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6a66:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6a6a:	b90a      	cbnz	r2, d6a70 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d6a6c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6a70:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d6a72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6a76:	4410      	add	r0, r2
   d6a78:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d6a7c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d6a7e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d6a82:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d6a86:	1ac0      	subs	r0, r0, r3
   d6a88:	b00b      	add	sp, #44	; 0x2c
   d6a8a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6a8c:	f7ff f940 	bl	d5d10 <__errno>
   d6a90:	6803      	ldr	r3, [r0, #0]
   d6a92:	2b0b      	cmp	r3, #11
   d6a94:	d0f2      	beq.n	d6a7c <_ZN9TCPClient9availableEv+0x54>
   d6a96:	f7ff f93b 	bl	d5d10 <__errno>
   d6a9a:	6803      	ldr	r3, [r0, #0]
   d6a9c:	2b0b      	cmp	r3, #11
   d6a9e:	d0ed      	beq.n	d6a7c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d6aa0:	2320      	movs	r3, #32
   d6aa2:	2500      	movs	r5, #0
   d6aa4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d6aa8:	f7ff f932 	bl	d5d10 <__errno>
   d6aac:	6803      	ldr	r3, [r0, #0]
   d6aae:	9301      	str	r3, [sp, #4]
   d6ab0:	4b08      	ldr	r3, [pc, #32]	; (d6ad4 <_ZN9TCPClient9availableEv+0xac>)
   d6ab2:	4909      	ldr	r1, [pc, #36]	; (d6ad8 <_ZN9TCPClient9availableEv+0xb0>)
   d6ab4:	9300      	str	r3, [sp, #0]
   d6ab6:	aa02      	add	r2, sp, #8
   d6ab8:	462b      	mov	r3, r5
   d6aba:	2032      	movs	r0, #50	; 0x32
   d6abc:	f7ff f85c 	bl	d5b78 <log_message>
                    sock_close(d_->sock);
   d6ac0:	6963      	ldr	r3, [r4, #20]
   d6ac2:	6818      	ldr	r0, [r3, #0]
   d6ac4:	f7fe ffe8 	bl	d5a98 <sock_close>
   d6ac8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6aca:	f04f 32ff 	mov.w	r2, #4294967295
   d6ace:	601a      	str	r2, [r3, #0]
   d6ad0:	e7d4      	b.n	d6a7c <_ZN9TCPClient9availableEv+0x54>
   d6ad2:	bf00      	nop
   d6ad4:	000d7a6f 	.word	0x000d7a6f
   d6ad8:	000d7a68 	.word	0x000d7a68

000d6adc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d6adc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6ade:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d6ae0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6ae2:	6818      	ldr	r0, [r3, #0]
   d6ae4:	2800      	cmp	r0, #0
   d6ae6:	db01      	blt.n	d6aec <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6ae8:	f7fe ffd6 	bl	d5a98 <sock_close>
   d6aec:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d6aee:	f04f 32ff 	mov.w	r2, #4294967295
   d6af2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d6af4:	6960      	ldr	r0, [r4, #20]
   d6af6:	2211      	movs	r2, #17
   d6af8:	2100      	movs	r1, #0
   d6afa:	308c      	adds	r0, #140	; 0x8c
   d6afc:	f000 fbf0 	bl	d72e0 <memset>
    flush_buffer();
   d6b00:	4620      	mov	r0, r4
}
   d6b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d6b06:	f7ff bf0c 	b.w	d6922 <_ZN9TCPClient12flush_bufferEv>

000d6b0a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d6b0a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6b0c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d6b0e:	4604      	mov	r4, r0
          total(0) {
   d6b10:	6001      	str	r1, [r0, #0]
   d6b12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d6b16:	3088      	adds	r0, #136	; 0x88
   d6b18:	f7ff fbfc 	bl	d6314 <_ZN9IPAddressC1Ev>
}
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	bd10      	pop	{r4, pc}

000d6b20 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d6b20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6b22:	2300      	movs	r3, #0
   d6b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b28:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d6b2c:	4a0e      	ldr	r2, [pc, #56]	; (d6b68 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d6b2e:	6103      	str	r3, [r0, #16]
   d6b30:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6b32:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d6b34:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6b36:	20ac      	movs	r0, #172	; 0xac
   d6b38:	9101      	str	r1, [sp, #4]
   d6b3a:	f7fd faaa 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6b3e:	1e05      	subs	r5, r0, #0
   d6b40:	f105 060c 	add.w	r6, r5, #12
   d6b44:	d008      	beq.n	d6b58 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d6b46:	2301      	movs	r3, #1
   d6b48:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6b4c:	4b07      	ldr	r3, [pc, #28]	; (d6b6c <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6b4e:	9901      	ldr	r1, [sp, #4]
   d6b50:	602b      	str	r3, [r5, #0]
   d6b52:	4630      	mov	r0, r6
   d6b54:	f7ff ffd9 	bl	d6b0a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d6b58:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d6b5a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d6b5e:	f7ff fee0 	bl	d6922 <_ZN9TCPClient12flush_bufferEv>
}
   d6b62:	b002      	add	sp, #8
   d6b64:	bd70      	pop	{r4, r5, r6, pc}
   d6b66:	bf00      	nop
   d6b68:	000d7aa4 	.word	0x000d7aa4
   d6b6c:	000d7a88 	.word	0x000d7a88

000d6b70 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d6b70:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6b72:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d6b76:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6b78:	f7ff ffd2 	bl	d6b20 <_ZN9TCPClientC1Ei>
}
   d6b7c:	4620      	mov	r0, r4
   d6b7e:	bd10      	pop	{r4, pc}

000d6b80 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d6b80:	b510      	push	{r4, lr}
   d6b82:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6b84:	6800      	ldr	r0, [r0, #0]
   d6b86:	2800      	cmp	r0, #0
   d6b88:	db01      	blt.n	d6b8e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6b8a:	f7fe ff85 	bl	d5a98 <sock_close>
    }
}
   d6b8e:	4620      	mov	r0, r4
   d6b90:	bd10      	pop	{r4, pc}

000d6b92 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d6b92:	300c      	adds	r0, #12
   d6b94:	f7ff bff4 	b.w	d6b80 <_ZN9TCPClient4DataD1Ev>

000d6b98 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6b9c:	4698      	mov	r8, r3
    stop();
   d6b9e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6ba0:	b093      	sub	sp, #76	; 0x4c
   d6ba2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6ba4:	2400      	movs	r4, #0
    stop();
   d6ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6ba8:	4606      	mov	r6, r0
   d6baa:	4617      	mov	r7, r2
    stop();
   d6bac:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6bae:	4628      	mov	r0, r5
   d6bb0:	466b      	mov	r3, sp
   d6bb2:	4622      	mov	r2, r4
   d6bb4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d6bb6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6bb8:	f7fe fe2e 	bl	d5818 <netdb_getaddrinfo>
   d6bbc:	4605      	mov	r5, r0
   d6bbe:	2800      	cmp	r0, #0
   d6bc0:	d163      	bne.n	d6c8a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6bc2:	9b00      	ldr	r3, [sp, #0]
   d6bc4:	2b00      	cmp	r3, #0
   d6bc6:	d04b      	beq.n	d6c60 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6bc8:	695b      	ldr	r3, [r3, #20]
   d6bca:	2b00      	cmp	r3, #0
   d6bcc:	d048      	beq.n	d6c60 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d6bce:	a806      	add	r0, sp, #24
   d6bd0:	f7ff fba0 	bl	d6314 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6bd4:	9b00      	ldr	r3, [sp, #0]
   d6bd6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6bd8:	7863      	ldrb	r3, [r4, #1]
   d6bda:	2b02      	cmp	r3, #2
   d6bdc:	d104      	bne.n	d6be8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6bde:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6be0:	a806      	add	r0, sp, #24
   d6be2:	f7ff f95c 	bl	d5e9e <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d6be6:	e026      	b.n	d6c36 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d6be8:	2b0a      	cmp	r3, #10
   d6bea:	d124      	bne.n	d6c36 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d6bec:	2211      	movs	r2, #17
   d6bee:	4629      	mov	r1, r5
   d6bf0:	a801      	add	r0, sp, #4
   d6bf2:	f000 fb75 	bl	d72e0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6bf6:	68a3      	ldr	r3, [r4, #8]
   d6bf8:	2b00      	cmp	r3, #0
   d6bfa:	d038      	beq.n	d6c6e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6bfc:	f104 0308 	add.w	r3, r4, #8
   d6c00:	f10d 0c04 	add.w	ip, sp, #4
   d6c04:	3418      	adds	r4, #24
   d6c06:	6818      	ldr	r0, [r3, #0]
   d6c08:	6859      	ldr	r1, [r3, #4]
   d6c0a:	4662      	mov	r2, ip
   d6c0c:	c203      	stmia	r2!, {r0, r1}
   d6c0e:	3308      	adds	r3, #8
   d6c10:	42a3      	cmp	r3, r4
   d6c12:	4694      	mov	ip, r2
   d6c14:	d1f7      	bne.n	d6c06 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d6c16:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6c18:	a901      	add	r1, sp, #4
   d6c1a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d6c1c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6c20:	f7ff fb86 	bl	d6330 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d6c24:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d6c28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6c2c:	ac07      	add	r4, sp, #28
   d6c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c30:	f8dc 3000 	ldr.w	r3, [ip]
   d6c34:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d6c36:	a806      	add	r0, sp, #24
   d6c38:	f7ff fb8c 	bl	d6354 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6c3c:	b180      	cbz	r0, d6c60 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d6c3e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d6c40:	ad07      	add	r5, sp, #28
   d6c42:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6c46:	4b12      	ldr	r3, [pc, #72]	; (d6c90 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d6c48:	930c      	str	r3, [sp, #48]	; 0x30
   d6c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c4c:	ac0d      	add	r4, sp, #52	; 0x34
   d6c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c50:	682b      	ldr	r3, [r5, #0]
   d6c52:	7023      	strb	r3, [r4, #0]
   d6c54:	463a      	mov	r2, r7
   d6c56:	4643      	mov	r3, r8
   d6c58:	a90c      	add	r1, sp, #48	; 0x30
   d6c5a:	4630      	mov	r0, r6
   d6c5c:	47c8      	blx	r9
   d6c5e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6c60:	9800      	ldr	r0, [sp, #0]
   d6c62:	f7fe fdd1 	bl	d5808 <netdb_freeaddrinfo>
}
   d6c66:	4628      	mov	r0, r5
   d6c68:	b013      	add	sp, #76	; 0x4c
   d6c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6c6e:	68e3      	ldr	r3, [r4, #12]
   d6c70:	2b00      	cmp	r3, #0
   d6c72:	d1c3      	bne.n	d6bfc <_ZN9TCPClient7connectEPKctm+0x64>
   d6c74:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6c78:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d6c7c:	f7fe fe5c 	bl	d5938 <inet_htonl>
   d6c80:	4581      	cmp	r9, r0
   d6c82:	d1bb      	bne.n	d6bfc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d6c84:	f104 0114 	add.w	r1, r4, #20
   d6c88:	e7aa      	b.n	d6be0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6c8a:	4625      	mov	r5, r4
   d6c8c:	e7e8      	b.n	d6c60 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6c8e:	bf00      	nop
   d6c90:	000d79d4 	.word	0x000d79d4

000d6c94 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6c94:	2200      	movs	r2, #0
   d6c96:	6840      	ldr	r0, [r0, #4]
   d6c98:	4611      	mov	r1, r2
   d6c9a:	f7fe bfb9 	b.w	d5c10 <network_ready>

000d6c9e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c9e:	2200      	movs	r2, #0
   d6ca0:	6840      	ldr	r0, [r0, #4]
   d6ca2:	4611      	mov	r1, r2
   d6ca4:	f7fe bfd4 	b.w	d5c50 <network_listening>

000d6ca8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6ca8:	2200      	movs	r2, #0
   d6caa:	6840      	ldr	r0, [r0, #4]
   d6cac:	4611      	mov	r1, r2
   d6cae:	f7fe bfdf 	b.w	d5c70 <network_get_listen_timeout>

000d6cb2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6cb2:	6840      	ldr	r0, [r0, #4]
   d6cb4:	2200      	movs	r2, #0
   d6cb6:	f7fe bfd3 	b.w	d5c60 <network_set_listen_timeout>

000d6cba <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6cba:	6840      	ldr	r0, [r0, #4]
   d6cbc:	2200      	movs	r2, #0
   d6cbe:	f081 0101 	eor.w	r1, r1, #1
   d6cc2:	f7fe bfbd 	b.w	d5c40 <network_listen>

000d6cc6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6cc6:	2300      	movs	r3, #0
   d6cc8:	6840      	ldr	r0, [r0, #4]
   d6cca:	461a      	mov	r2, r3
   d6ccc:	4619      	mov	r1, r3
   d6cce:	f7fe bfaf 	b.w	d5c30 <network_off>

000d6cd2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6cd2:	2200      	movs	r2, #0
   d6cd4:	6840      	ldr	r0, [r0, #4]
   d6cd6:	4611      	mov	r1, r2
   d6cd8:	f7fe bf8a 	b.w	d5bf0 <network_connecting>

000d6cdc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6cdc:	6840      	ldr	r0, [r0, #4]
   d6cde:	2200      	movs	r2, #0
   d6ce0:	2102      	movs	r1, #2
   d6ce2:	f7fe bf8d 	b.w	d5c00 <network_disconnect>

000d6ce6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6ce6:	2300      	movs	r3, #0
   d6ce8:	6840      	ldr	r0, [r0, #4]
   d6cea:	461a      	mov	r2, r3
   d6cec:	f7fe bf78 	b.w	d5be0 <network_connect>

000d6cf0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6cf0:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6cf2:	2204      	movs	r2, #4
   d6cf4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6cf6:	4a02      	ldr	r2, [pc, #8]	; (d6d00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6cf8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6cfa:	4770      	bx	lr
   d6cfc:	2003e7c4 	.word	0x2003e7c4
   d6d00:	000d7af0 	.word	0x000d7af0

000d6d04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6d04:	2300      	movs	r3, #0
   d6d06:	6840      	ldr	r0, [r0, #4]
   d6d08:	461a      	mov	r2, r3
   d6d0a:	f7fe bf69 	b.w	d5be0 <network_connect>

000d6d0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6d0e:	6840      	ldr	r0, [r0, #4]
   d6d10:	2200      	movs	r2, #0
   d6d12:	2102      	movs	r1, #2
   d6d14:	f7fe bf74 	b.w	d5c00 <network_disconnect>

000d6d18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6d18:	2200      	movs	r2, #0
   d6d1a:	6840      	ldr	r0, [r0, #4]
   d6d1c:	4611      	mov	r1, r2
   d6d1e:	f7fe bf67 	b.w	d5bf0 <network_connecting>

000d6d22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6d22:	2200      	movs	r2, #0
   d6d24:	6840      	ldr	r0, [r0, #4]
   d6d26:	4611      	mov	r1, r2
   d6d28:	f7fe bf72 	b.w	d5c10 <network_ready>

000d6d2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6d2c:	2300      	movs	r3, #0
   d6d2e:	6840      	ldr	r0, [r0, #4]
   d6d30:	461a      	mov	r2, r3
   d6d32:	4619      	mov	r1, r3
   d6d34:	f7fe bf74 	b.w	d5c20 <network_on>

000d6d38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6d38:	2300      	movs	r3, #0
   d6d3a:	6840      	ldr	r0, [r0, #4]
   d6d3c:	461a      	mov	r2, r3
   d6d3e:	4619      	mov	r1, r3
   d6d40:	f7fe bf76 	b.w	d5c30 <network_off>

000d6d44 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6d44:	6840      	ldr	r0, [r0, #4]
   d6d46:	2100      	movs	r1, #0
   d6d48:	f7fe bf9a 	b.w	d5c80 <network_is_on>

000d6d4c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6d4c:	6840      	ldr	r0, [r0, #4]
   d6d4e:	2100      	movs	r1, #0
   d6d50:	f7fe bf9e 	b.w	d5c90 <network_is_off>

000d6d54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6d54:	6840      	ldr	r0, [r0, #4]
   d6d56:	2200      	movs	r2, #0
   d6d58:	f081 0101 	eor.w	r1, r1, #1
   d6d5c:	f7fe bf70 	b.w	d5c40 <network_listen>

000d6d60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6d60:	6840      	ldr	r0, [r0, #4]
   d6d62:	2200      	movs	r2, #0
   d6d64:	f7fe bf7c 	b.w	d5c60 <network_set_listen_timeout>

000d6d68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6d68:	2200      	movs	r2, #0
   d6d6a:	6840      	ldr	r0, [r0, #4]
   d6d6c:	4611      	mov	r1, r2
   d6d6e:	f7fe bf7f 	b.w	d5c70 <network_get_listen_timeout>

000d6d72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6d72:	2200      	movs	r2, #0
   d6d74:	6840      	ldr	r0, [r0, #4]
   d6d76:	4611      	mov	r1, r2
   d6d78:	f7fe bf6a 	b.w	d5c50 <network_listening>

000d6d7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6d80:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6d82:	b095      	sub	sp, #84	; 0x54
   d6d84:	4616      	mov	r6, r2
   d6d86:	460d      	mov	r5, r1
   d6d88:	4607      	mov	r7, r0
    IPAddress addr;
   d6d8a:	f7ff fac3 	bl	d6314 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6d8e:	4621      	mov	r1, r4
   d6d90:	2218      	movs	r2, #24
   d6d92:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6d94:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6d96:	f000 faa3 	bl	d72e0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6d9a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6d9c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6da0:	4621      	mov	r1, r4
   d6da2:	466b      	mov	r3, sp
   d6da4:	aa0c      	add	r2, sp, #48	; 0x30
   d6da6:	4630      	mov	r0, r6
   d6da8:	f7fe fd36 	bl	d5818 <netdb_getaddrinfo>
    if (!r) {
   d6dac:	4604      	mov	r4, r0
   d6dae:	2800      	cmp	r0, #0
   d6db0:	d14c      	bne.n	d6e4c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6db2:	4602      	mov	r2, r0
   d6db4:	2101      	movs	r1, #1
   d6db6:	6868      	ldr	r0, [r5, #4]
   d6db8:	f7fe ff2a 	bl	d5c10 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6dbc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6dbe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6dc0:	4622      	mov	r2, r4
   d6dc2:	6868      	ldr	r0, [r5, #4]
   d6dc4:	f7fe ff24 	bl	d5c10 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6dc8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6dca:	4681      	mov	r9, r0
        bool ok = false;
   d6dcc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6dce:	2e00      	cmp	r6, #0
   d6dd0:	d03c      	beq.n	d6e4c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6dd2:	2900      	cmp	r1, #0
   d6dd4:	d13a      	bne.n	d6e4c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6dd6:	6873      	ldr	r3, [r6, #4]
   d6dd8:	2b02      	cmp	r3, #2
   d6dda:	d003      	beq.n	d6de4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6ddc:	2b0a      	cmp	r3, #10
   d6dde:	d011      	beq.n	d6e04 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6de0:	69f6      	ldr	r6, [r6, #28]
   d6de2:	e7f4      	b.n	d6dce <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6de4:	f1b8 0f00 	cmp.w	r8, #0
   d6de8:	d00a      	beq.n	d6e00 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6dea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6dec:	a806      	add	r0, sp, #24
   d6dee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6df0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6df2:	f7ff fadf 	bl	d63b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6df8:	1d3c      	adds	r4, r7, #4
   d6dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6dfc:	682b      	ldr	r3, [r5, #0]
   d6dfe:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6e00:	4641      	mov	r1, r8
   d6e02:	e7ed      	b.n	d6de0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6e04:	f1b9 0f00 	cmp.w	r9, #0
   d6e08:	d101      	bne.n	d6e0e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6e0a:	4649      	mov	r1, r9
   d6e0c:	e7e8      	b.n	d6de0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6e0e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6e10:	2210      	movs	r2, #16
   d6e12:	a801      	add	r0, sp, #4
   d6e14:	f000 fa64 	bl	d72e0 <memset>
                    a.v = 6;
   d6e18:	2306      	movs	r3, #6
   d6e1a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6e1e:	ad01      	add	r5, sp, #4
   d6e20:	f104 0308 	add.w	r3, r4, #8
   d6e24:	3418      	adds	r4, #24
   d6e26:	6818      	ldr	r0, [r3, #0]
   d6e28:	6859      	ldr	r1, [r3, #4]
   d6e2a:	462a      	mov	r2, r5
   d6e2c:	c203      	stmia	r2!, {r0, r1}
   d6e2e:	3308      	adds	r3, #8
   d6e30:	42a3      	cmp	r3, r4
   d6e32:	4615      	mov	r5, r2
   d6e34:	d1f7      	bne.n	d6e26 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6e36:	a901      	add	r1, sp, #4
   d6e38:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6e3a:	ad07      	add	r5, sp, #28
   d6e3c:	f7ff fa78 	bl	d6330 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e42:	1d3c      	adds	r4, r7, #4
   d6e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e46:	682b      	ldr	r3, [r5, #0]
   d6e48:	7023      	strb	r3, [r4, #0]
   d6e4a:	e7de      	b.n	d6e0a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6e4c:	9800      	ldr	r0, [sp, #0]
   d6e4e:	f7fe fcdb 	bl	d5808 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6e52:	4638      	mov	r0, r7
   d6e54:	b015      	add	sp, #84	; 0x54
   d6e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6e5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6e5c:	4b02      	ldr	r3, [pc, #8]	; (d6e68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6e5e:	4a03      	ldr	r2, [pc, #12]	; (d6e6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6e60:	601a      	str	r2, [r3, #0]
   d6e62:	2200      	movs	r2, #0
   d6e64:	605a      	str	r2, [r3, #4]

} // spark
   d6e66:	4770      	bx	lr
   d6e68:	2003e7cc 	.word	0x2003e7cc
   d6e6c:	000d7b2c 	.word	0x000d7b2c

000d6e70 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6e70:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6e72:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6e74:	d902      	bls.n	d6e7c <pinAvailable+0xc>
    return false;
   d6e76:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6e78:	b002      	add	sp, #8
   d6e7a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6e7c:	f1a0 030b 	sub.w	r3, r0, #11
   d6e80:	2b02      	cmp	r3, #2
   d6e82:	d81a      	bhi.n	d6eba <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6e84:	4c17      	ldr	r4, [pc, #92]	; (d6ee4 <pinAvailable+0x74>)
   d6e86:	7821      	ldrb	r1, [r4, #0]
   d6e88:	f3bf 8f5b 	dmb	ish
   d6e8c:	f011 0101 	ands.w	r1, r1, #1
   d6e90:	d10b      	bne.n	d6eaa <pinAvailable+0x3a>
   d6e92:	4620      	mov	r0, r4
   d6e94:	9101      	str	r1, [sp, #4]
   d6e96:	f7fd f904 	bl	d40a2 <__cxa_guard_acquire>
   d6e9a:	9901      	ldr	r1, [sp, #4]
   d6e9c:	b128      	cbz	r0, d6eaa <pinAvailable+0x3a>
   d6e9e:	4812      	ldr	r0, [pc, #72]	; (d6ee8 <pinAvailable+0x78>)
   d6ea0:	f7fe ff84 	bl	d5dac <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6ea4:	4620      	mov	r0, r4
   d6ea6:	f7fd f901 	bl	d40ac <__cxa_guard_release>
   d6eaa:	4b0f      	ldr	r3, [pc, #60]	; (d6ee8 <pinAvailable+0x78>)
   d6eac:	7818      	ldrb	r0, [r3, #0]
   d6eae:	f7fe fe23 	bl	d5af8 <hal_spi_is_enabled>
   d6eb2:	2800      	cmp	r0, #0
   d6eb4:	d1df      	bne.n	d6e76 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6eb6:	2001      	movs	r0, #1
   d6eb8:	e7de      	b.n	d6e78 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6eba:	2801      	cmp	r0, #1
   d6ebc:	d809      	bhi.n	d6ed2 <pinAvailable+0x62>
   d6ebe:	f000 f8a7 	bl	d7010 <_Z19__fetch_global_Wirev>
   d6ec2:	2100      	movs	r1, #0
   d6ec4:	7c00      	ldrb	r0, [r0, #16]
   d6ec6:	f7fe fdc7 	bl	d5a58 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6eca:	f080 0001 	eor.w	r0, r0, #1
   d6ece:	b2c0      	uxtb	r0, r0
   d6ed0:	e7d2      	b.n	d6e78 <pinAvailable+0x8>
   d6ed2:	3809      	subs	r0, #9
   d6ed4:	2801      	cmp	r0, #1
   d6ed6:	d8ee      	bhi.n	d6eb6 <pinAvailable+0x46>
   d6ed8:	f7ff fb56 	bl	d6588 <_Z22__fetch_global_Serial1v>
   d6edc:	7c00      	ldrb	r0, [r0, #16]
   d6ede:	f7fe fd6b 	bl	d59b8 <hal_usart_is_enabled>
   d6ee2:	e7f2      	b.n	d6eca <pinAvailable+0x5a>
   d6ee4:	2003e644 	.word	0x2003e644
   d6ee8:	2003e648 	.word	0x2003e648

000d6eec <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6eec:	2823      	cmp	r0, #35	; 0x23
{
   d6eee:	b538      	push	{r3, r4, r5, lr}
   d6ef0:	4604      	mov	r4, r0
   d6ef2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6ef4:	d80a      	bhi.n	d6f0c <pinMode+0x20>
   d6ef6:	29ff      	cmp	r1, #255	; 0xff
   d6ef8:	d008      	beq.n	d6f0c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6efa:	f7ff ffb9 	bl	d6e70 <pinAvailable>
   d6efe:	b128      	cbz	r0, d6f0c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6f00:	4629      	mov	r1, r5
   d6f02:	4620      	mov	r0, r4
}
   d6f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6f08:	f7fe bc96 	b.w	d5838 <HAL_Pin_Mode>
}
   d6f0c:	bd38      	pop	{r3, r4, r5, pc}

000d6f0e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6f0e:	b538      	push	{r3, r4, r5, lr}
   d6f10:	4604      	mov	r4, r0
   d6f12:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6f14:	f7fe fc98 	bl	d5848 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6f18:	28ff      	cmp	r0, #255	; 0xff
   d6f1a:	d010      	beq.n	d6f3e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6f1c:	2806      	cmp	r0, #6
   d6f1e:	d804      	bhi.n	d6f2a <digitalWrite+0x1c>
   d6f20:	234d      	movs	r3, #77	; 0x4d
   d6f22:	fa23 f000 	lsr.w	r0, r3, r0
   d6f26:	07c3      	lsls	r3, r0, #31
   d6f28:	d409      	bmi.n	d6f3e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6f2a:	4620      	mov	r0, r4
   d6f2c:	f7ff ffa0 	bl	d6e70 <pinAvailable>
   d6f30:	b128      	cbz	r0, d6f3e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6f32:	4629      	mov	r1, r5
   d6f34:	4620      	mov	r0, r4
}
   d6f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6f3a:	f7fe bc8d 	b.w	d5858 <HAL_GPIO_Write>
}
   d6f3e:	bd38      	pop	{r3, r4, r5, pc}

000d6f40 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6f40:	b510      	push	{r4, lr}
   d6f42:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6f44:	f7fe fc80 	bl	d5848 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6f48:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6f4a:	b2db      	uxtb	r3, r3
   d6f4c:	2b01      	cmp	r3, #1
   d6f4e:	d908      	bls.n	d6f62 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6f50:	4620      	mov	r0, r4
   d6f52:	f7ff ff8d 	bl	d6e70 <pinAvailable>
   d6f56:	b120      	cbz	r0, d6f62 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6f58:	4620      	mov	r0, r4
}
   d6f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6f5e:	f7fe bc83 	b.w	d5868 <HAL_GPIO_Read>
}
   d6f62:	2000      	movs	r0, #0
   d6f64:	bd10      	pop	{r4, pc}

000d6f66 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6f66:	280d      	cmp	r0, #13
{
   d6f68:	b510      	push	{r4, lr}
   d6f6a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6f6c:	bf9c      	itt	ls
   d6f6e:	340e      	addls	r4, #14
   d6f70:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6f72:	4620      	mov	r0, r4
   d6f74:	f7ff ff7c 	bl	d6e70 <pinAvailable>
   d6f78:	b150      	cbz	r0, d6f90 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6f7a:	2103      	movs	r1, #3
   d6f7c:	4620      	mov	r0, r4
   d6f7e:	f7fe fc53 	bl	d5828 <HAL_Validate_Pin_Function>
   d6f82:	2803      	cmp	r0, #3
   d6f84:	d104      	bne.n	d6f90 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6f86:	4620      	mov	r0, r4
}
   d6f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6f8c:	f7fe bc7c 	b.w	d5888 <hal_adc_read>
}
   d6f90:	2000      	movs	r0, #0
   d6f92:	bd10      	pop	{r4, pc}

000d6f94 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6f94:	b538      	push	{r3, r4, r5, lr}
   d6f96:	4604      	mov	r4, r0
   d6f98:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6f9a:	f7ff ff69 	bl	d6e70 <pinAvailable>
   d6f9e:	b1f0      	cbz	r0, d6fde <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6fa0:	2104      	movs	r1, #4
   d6fa2:	4620      	mov	r0, r4
   d6fa4:	f7fe fc40 	bl	d5828 <HAL_Validate_Pin_Function>
   d6fa8:	2804      	cmp	r0, #4
   d6faa:	d105      	bne.n	d6fb8 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6fac:	b2a9      	uxth	r1, r5
   d6fae:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d6fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d6fb4:	f7fe bc60 	b.w	d5878 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6fb8:	2102      	movs	r1, #2
   d6fba:	4620      	mov	r0, r4
   d6fbc:	f7fe fc34 	bl	d5828 <HAL_Validate_Pin_Function>
   d6fc0:	2802      	cmp	r0, #2
   d6fc2:	d10c      	bne.n	d6fde <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6fc4:	4620      	mov	r0, r4
   d6fc6:	f7fe fc3f 	bl	d5848 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6fca:	2801      	cmp	r0, #1
   d6fcc:	d001      	beq.n	d6fd2 <_Z11analogWritetm+0x3e>
   d6fce:	2804      	cmp	r0, #4
   d6fd0:	d105      	bne.n	d6fde <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d6fd2:	4629      	mov	r1, r5
   d6fd4:	4620      	mov	r0, r4
}
   d6fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d6fda:	f7fe bc5d 	b.w	d5898 <hal_pwm_write_ext>
}
   d6fde:	bd38      	pop	{r3, r4, r5, pc}

000d6fe0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6fe0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6fe2:	2300      	movs	r3, #0
   d6fe4:	2520      	movs	r5, #32
   d6fe6:	8043      	strh	r3, [r0, #2]
   d6fe8:	2314      	movs	r3, #20
{
   d6fea:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6fec:	8003      	strh	r3, [r0, #0]
   d6fee:	6085      	str	r5, [r0, #8]
   d6ff0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6ff2:	4906      	ldr	r1, [pc, #24]	; (d700c <_Z17acquireWireBufferv+0x2c>)
   d6ff4:	4628      	mov	r0, r5
   d6ff6:	f000 f83a 	bl	d706e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6ffa:	4904      	ldr	r1, [pc, #16]	; (d700c <_Z17acquireWireBufferv+0x2c>)
	};
   d6ffc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6ffe:	4628      	mov	r0, r5
   d7000:	f000 f835 	bl	d706e <_ZnajRKSt9nothrow_t>
	};
   d7004:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7006:	4620      	mov	r0, r4
   d7008:	bd38      	pop	{r3, r4, r5, pc}
   d700a:	bf00      	nop
   d700c:	000d7b60 	.word	0x000d7b60

000d7010 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7010:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7012:	4d0f      	ldr	r5, [pc, #60]	; (d7050 <_Z19__fetch_global_Wirev+0x40>)
   d7014:	7829      	ldrb	r1, [r5, #0]
   d7016:	f3bf 8f5b 	dmb	ish
   d701a:	f011 0401 	ands.w	r4, r1, #1
{
   d701e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7020:	d113      	bne.n	d704a <_Z19__fetch_global_Wirev+0x3a>
   d7022:	4628      	mov	r0, r5
   d7024:	f7fd f83d 	bl	d40a2 <__cxa_guard_acquire>
   d7028:	b178      	cbz	r0, d704a <_Z19__fetch_global_Wirev+0x3a>
   d702a:	a801      	add	r0, sp, #4
   d702c:	f7ff ffd8 	bl	d6fe0 <_Z17acquireWireBufferv>
   d7030:	aa01      	add	r2, sp, #4
   d7032:	4621      	mov	r1, r4
   d7034:	4807      	ldr	r0, [pc, #28]	; (d7054 <_Z19__fetch_global_Wirev+0x44>)
   d7036:	f7ff fafd 	bl	d6634 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d703a:	4628      	mov	r0, r5
   d703c:	f7fd f836 	bl	d40ac <__cxa_guard_release>
   d7040:	4a05      	ldr	r2, [pc, #20]	; (d7058 <_Z19__fetch_global_Wirev+0x48>)
   d7042:	4906      	ldr	r1, [pc, #24]	; (d705c <_Z19__fetch_global_Wirev+0x4c>)
   d7044:	4803      	ldr	r0, [pc, #12]	; (d7054 <_Z19__fetch_global_Wirev+0x44>)
   d7046:	f000 f80b 	bl	d7060 <__aeabi_atexit>
	return wire;
}
   d704a:	4802      	ldr	r0, [pc, #8]	; (d7054 <_Z19__fetch_global_Wirev+0x44>)
   d704c:	b007      	add	sp, #28
   d704e:	bd30      	pop	{r4, r5, pc}
   d7050:	2003e7d8 	.word	0x2003e7d8
   d7054:	2003e7dc 	.word	0x2003e7dc
   d7058:	2003e580 	.word	0x2003e580
   d705c:	000d65dd 	.word	0x000d65dd

000d7060 <__aeabi_atexit>:
   d7060:	460b      	mov	r3, r1
   d7062:	4601      	mov	r1, r0
   d7064:	4618      	mov	r0, r3
   d7066:	f000 b91f 	b.w	d72a8 <__cxa_atexit>

000d706a <_ZdlPvj>:
   d706a:	f7fd b816 	b.w	d409a <_ZdlPv>

000d706e <_ZnajRKSt9nothrow_t>:
   d706e:	f7fd b812 	b.w	d4096 <_Znaj>
	...

000d7074 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7074:	4901      	ldr	r1, [pc, #4]	; (d707c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7076:	f000 b8f9 	b.w	d726c <_ZNKSt9type_infoeqERKS_>
   d707a:	bf00      	nop
   d707c:	000d7b7c 	.word	0x000d7b7c

000d7080 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7080:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7082:	2400      	movs	r4, #0
   d7084:	2310      	movs	r3, #16
   d7086:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d708a:	6803      	ldr	r3, [r0, #0]
   d708c:	9400      	str	r4, [sp, #0]
   d708e:	699e      	ldr	r6, [r3, #24]
   d7090:	f88d 4004 	strb.w	r4, [sp, #4]
   d7094:	4615      	mov	r5, r2
   d7096:	466b      	mov	r3, sp
   d7098:	6812      	ldr	r2, [r2, #0]
   d709a:	47b0      	blx	r6
   d709c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d70a0:	f003 0306 	and.w	r3, r3, #6
   d70a4:	2b06      	cmp	r3, #6
   d70a6:	bf03      	ittte	eq
   d70a8:	9b00      	ldreq	r3, [sp, #0]
   d70aa:	602b      	streq	r3, [r5, #0]
   d70ac:	2001      	moveq	r0, #1
   d70ae:	4620      	movne	r0, r4
   d70b0:	b004      	add	sp, #16
   d70b2:	bd70      	pop	{r4, r5, r6, pc}

000d70b4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d70b4:	9800      	ldr	r0, [sp, #0]
   d70b6:	4290      	cmp	r0, r2
   d70b8:	bf14      	ite	ne
   d70ba:	2001      	movne	r0, #1
   d70bc:	2006      	moveq	r0, #6
   d70be:	4770      	bx	lr

000d70c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d70c0:	b510      	push	{r4, lr}
   d70c2:	4b03      	ldr	r3, [pc, #12]	; (d70d0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d70c4:	6003      	str	r3, [r0, #0]
   d70c6:	4604      	mov	r4, r0
   d70c8:	f000 f8cd 	bl	d7266 <_ZNSt9type_infoD1Ev>
   d70cc:	4620      	mov	r0, r4
   d70ce:	bd10      	pop	{r4, pc}
   d70d0:	000d7bbc 	.word	0x000d7bbc

000d70d4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d70d4:	b510      	push	{r4, lr}
   d70d6:	4604      	mov	r4, r0
   d70d8:	f7ff fff2 	bl	d70c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d70dc:	4620      	mov	r0, r4
   d70de:	2108      	movs	r1, #8
   d70e0:	f7ff ffc3 	bl	d706a <_ZdlPvj>
   d70e4:	4620      	mov	r0, r4
   d70e6:	bd10      	pop	{r4, pc}

000d70e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d70e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d70ec:	461f      	mov	r7, r3
   d70ee:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d70f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d70f6:	4598      	cmp	r8, r3
   d70f8:	4606      	mov	r6, r0
   d70fa:	4615      	mov	r5, r2
   d70fc:	d107      	bne.n	d710e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d70fe:	9907      	ldr	r1, [sp, #28]
   d7100:	f000 f8b4 	bl	d726c <_ZNKSt9type_infoeqERKS_>
   d7104:	b118      	cbz	r0, d710e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7106:	7165      	strb	r5, [r4, #5]
   d7108:	2000      	movs	r0, #0
   d710a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d710e:	4639      	mov	r1, r7
   d7110:	4630      	mov	r0, r6
   d7112:	f000 f8ab 	bl	d726c <_ZNKSt9type_infoeqERKS_>
   d7116:	2800      	cmp	r0, #0
   d7118:	d0f6      	beq.n	d7108 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d711a:	2301      	movs	r3, #1
   d711c:	f8c4 8000 	str.w	r8, [r4]
   d7120:	7125      	strb	r5, [r4, #4]
   d7122:	71a3      	strb	r3, [r4, #6]
   d7124:	e7f0      	b.n	d7108 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7126 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7126:	b538      	push	{r3, r4, r5, lr}
   d7128:	4615      	mov	r5, r2
   d712a:	461c      	mov	r4, r3
   d712c:	f000 f89e 	bl	d726c <_ZNKSt9type_infoeqERKS_>
   d7130:	b120      	cbz	r0, d713c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7132:	2308      	movs	r3, #8
   d7134:	60e3      	str	r3, [r4, #12]
   d7136:	2306      	movs	r3, #6
   d7138:	6025      	str	r5, [r4, #0]
   d713a:	7123      	strb	r3, [r4, #4]
   d713c:	bd38      	pop	{r3, r4, r5, pc}

000d713e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d713e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7140:	4605      	mov	r5, r0
   d7142:	460c      	mov	r4, r1
   d7144:	9201      	str	r2, [sp, #4]
   d7146:	461e      	mov	r6, r3
   d7148:	f000 f890 	bl	d726c <_ZNKSt9type_infoeqERKS_>
   d714c:	b950      	cbnz	r0, d7164 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d714e:	2e03      	cmp	r6, #3
   d7150:	d808      	bhi.n	d7164 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7152:	6823      	ldr	r3, [r4, #0]
   d7154:	9a01      	ldr	r2, [sp, #4]
   d7156:	695b      	ldr	r3, [r3, #20]
   d7158:	4629      	mov	r1, r5
   d715a:	4620      	mov	r0, r4
   d715c:	b002      	add	sp, #8
   d715e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7162:	4718      	bx	r3
   d7164:	b002      	add	sp, #8
   d7166:	bd70      	pop	{r4, r5, r6, pc}

000d7168 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7168:	b510      	push	{r4, lr}
   d716a:	4b03      	ldr	r3, [pc, #12]	; (d7178 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d716c:	6003      	str	r3, [r0, #0]
   d716e:	4604      	mov	r4, r0
   d7170:	f7ff ffa6 	bl	d70c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7174:	4620      	mov	r0, r4
   d7176:	bd10      	pop	{r4, pc}
   d7178:	000d7c1c 	.word	0x000d7c1c

000d717c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d717c:	b510      	push	{r4, lr}
   d717e:	4604      	mov	r4, r0
   d7180:	f7ff fff2 	bl	d7168 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7184:	4620      	mov	r0, r4
   d7186:	210c      	movs	r1, #12
   d7188:	f7ff ff6f 	bl	d706a <_ZdlPvj>
   d718c:	4620      	mov	r0, r4
   d718e:	bd10      	pop	{r4, pc}

000d7190 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7192:	9f08      	ldr	r7, [sp, #32]
   d7194:	4297      	cmp	r7, r2
   d7196:	4605      	mov	r5, r0
   d7198:	460e      	mov	r6, r1
   d719a:	4614      	mov	r4, r2
   d719c:	d00a      	beq.n	d71b4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d719e:	68a8      	ldr	r0, [r5, #8]
   d71a0:	6802      	ldr	r2, [r0, #0]
   d71a2:	9708      	str	r7, [sp, #32]
   d71a4:	6a15      	ldr	r5, [r2, #32]
   d71a6:	4631      	mov	r1, r6
   d71a8:	4622      	mov	r2, r4
   d71aa:	46ac      	mov	ip, r5
   d71ac:	b003      	add	sp, #12
   d71ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d71b2:	4760      	bx	ip
   d71b4:	4619      	mov	r1, r3
   d71b6:	9301      	str	r3, [sp, #4]
   d71b8:	f000 f858 	bl	d726c <_ZNKSt9type_infoeqERKS_>
   d71bc:	9b01      	ldr	r3, [sp, #4]
   d71be:	2800      	cmp	r0, #0
   d71c0:	d0ed      	beq.n	d719e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d71c2:	2006      	movs	r0, #6
   d71c4:	b003      	add	sp, #12
   d71c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d71c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d71c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d71cc:	460d      	mov	r5, r1
   d71ce:	4619      	mov	r1, r3
   d71d0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d71d4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d71d8:	4681      	mov	r9, r0
   d71da:	4617      	mov	r7, r2
   d71dc:	4698      	mov	r8, r3
   d71de:	f000 f845 	bl	d726c <_ZNKSt9type_infoeqERKS_>
   d71e2:	b190      	cbz	r0, d720a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d71e4:	2d00      	cmp	r5, #0
   d71e6:	6034      	str	r4, [r6, #0]
   d71e8:	7137      	strb	r7, [r6, #4]
   d71ea:	db09      	blt.n	d7200 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d71ec:	1961      	adds	r1, r4, r5
   d71ee:	458a      	cmp	sl, r1
   d71f0:	bf0c      	ite	eq
   d71f2:	2106      	moveq	r1, #6
   d71f4:	2101      	movne	r1, #1
   d71f6:	71b1      	strb	r1, [r6, #6]
   d71f8:	2000      	movs	r0, #0
   d71fa:	b001      	add	sp, #4
   d71fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7200:	3502      	adds	r5, #2
   d7202:	d1f9      	bne.n	d71f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7204:	2301      	movs	r3, #1
   d7206:	71b3      	strb	r3, [r6, #6]
   d7208:	e7f6      	b.n	d71f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d720a:	4554      	cmp	r4, sl
   d720c:	d106      	bne.n	d721c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d720e:	4659      	mov	r1, fp
   d7210:	4648      	mov	r0, r9
   d7212:	f000 f82b 	bl	d726c <_ZNKSt9type_infoeqERKS_>
   d7216:	b108      	cbz	r0, d721c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7218:	7177      	strb	r7, [r6, #5]
   d721a:	e7ed      	b.n	d71f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d721c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7220:	6803      	ldr	r3, [r0, #0]
   d7222:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7226:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d722a:	69dc      	ldr	r4, [r3, #28]
   d722c:	463a      	mov	r2, r7
   d722e:	4643      	mov	r3, r8
   d7230:	4629      	mov	r1, r5
   d7232:	46a4      	mov	ip, r4
   d7234:	b001      	add	sp, #4
   d7236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d723a:	4760      	bx	ip

000d723c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d723c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7240:	4607      	mov	r7, r0
   d7242:	460c      	mov	r4, r1
   d7244:	4615      	mov	r5, r2
   d7246:	461e      	mov	r6, r3
   d7248:	f7ff ff6d 	bl	d7126 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d724c:	b948      	cbnz	r0, d7262 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d724e:	68b8      	ldr	r0, [r7, #8]
   d7250:	6803      	ldr	r3, [r0, #0]
   d7252:	699f      	ldr	r7, [r3, #24]
   d7254:	462a      	mov	r2, r5
   d7256:	4633      	mov	r3, r6
   d7258:	4621      	mov	r1, r4
   d725a:	46bc      	mov	ip, r7
   d725c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7260:	4760      	bx	ip
   d7262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7266 <_ZNSt9type_infoD1Ev>:
   d7266:	4770      	bx	lr

000d7268 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7268:	2000      	movs	r0, #0
   d726a:	4770      	bx	lr

000d726c <_ZNKSt9type_infoeqERKS_>:
   d726c:	4281      	cmp	r1, r0
   d726e:	b508      	push	{r3, lr}
   d7270:	d00e      	beq.n	d7290 <_ZNKSt9type_infoeqERKS_+0x24>
   d7272:	6840      	ldr	r0, [r0, #4]
   d7274:	7803      	ldrb	r3, [r0, #0]
   d7276:	2b2a      	cmp	r3, #42	; 0x2a
   d7278:	d00c      	beq.n	d7294 <_ZNKSt9type_infoeqERKS_+0x28>
   d727a:	6849      	ldr	r1, [r1, #4]
   d727c:	780b      	ldrb	r3, [r1, #0]
   d727e:	2b2a      	cmp	r3, #42	; 0x2a
   d7280:	bf08      	it	eq
   d7282:	3101      	addeq	r1, #1
   d7284:	f000 f858 	bl	d7338 <strcmp>
   d7288:	fab0 f080 	clz	r0, r0
   d728c:	0940      	lsrs	r0, r0, #5
   d728e:	bd08      	pop	{r3, pc}
   d7290:	2001      	movs	r0, #1
   d7292:	e7fc      	b.n	d728e <_ZNKSt9type_infoeqERKS_+0x22>
   d7294:	2000      	movs	r0, #0
   d7296:	e7fa      	b.n	d728e <_ZNKSt9type_infoeqERKS_+0x22>

000d7298 <atoi>:
   d7298:	220a      	movs	r2, #10
   d729a:	2100      	movs	r1, #0
   d729c:	f000 b8ec 	b.w	d7478 <strtol>

000d72a0 <atol>:
   d72a0:	220a      	movs	r2, #10
   d72a2:	2100      	movs	r1, #0
   d72a4:	f000 b8e8 	b.w	d7478 <strtol>

000d72a8 <__cxa_atexit>:
   d72a8:	b510      	push	{r4, lr}
   d72aa:	4c05      	ldr	r4, [pc, #20]	; (d72c0 <__cxa_atexit+0x18>)
   d72ac:	4613      	mov	r3, r2
   d72ae:	b12c      	cbz	r4, d72bc <__cxa_atexit+0x14>
   d72b0:	460a      	mov	r2, r1
   d72b2:	4601      	mov	r1, r0
   d72b4:	2002      	movs	r0, #2
   d72b6:	f3af 8000 	nop.w
   d72ba:	bd10      	pop	{r4, pc}
   d72bc:	4620      	mov	r0, r4
   d72be:	e7fc      	b.n	d72ba <__cxa_atexit+0x12>
   d72c0:	00000000 	.word	0x00000000

000d72c4 <memcpy>:
   d72c4:	440a      	add	r2, r1
   d72c6:	4291      	cmp	r1, r2
   d72c8:	f100 33ff 	add.w	r3, r0, #4294967295
   d72cc:	d100      	bne.n	d72d0 <memcpy+0xc>
   d72ce:	4770      	bx	lr
   d72d0:	b510      	push	{r4, lr}
   d72d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d72d6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d72da:	4291      	cmp	r1, r2
   d72dc:	d1f9      	bne.n	d72d2 <memcpy+0xe>
   d72de:	bd10      	pop	{r4, pc}

000d72e0 <memset>:
   d72e0:	4402      	add	r2, r0
   d72e2:	4603      	mov	r3, r0
   d72e4:	4293      	cmp	r3, r2
   d72e6:	d100      	bne.n	d72ea <memset+0xa>
   d72e8:	4770      	bx	lr
   d72ea:	f803 1b01 	strb.w	r1, [r3], #1
   d72ee:	e7f9      	b.n	d72e4 <memset+0x4>

000d72f0 <srand>:
   d72f0:	b538      	push	{r3, r4, r5, lr}
   d72f2:	4b0d      	ldr	r3, [pc, #52]	; (d7328 <srand+0x38>)
   d72f4:	681d      	ldr	r5, [r3, #0]
   d72f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d72f8:	4604      	mov	r4, r0
   d72fa:	b97b      	cbnz	r3, d731c <srand+0x2c>
   d72fc:	2018      	movs	r0, #24
   d72fe:	f7fe fce7 	bl	d5cd0 <malloc>
   d7302:	4a0a      	ldr	r2, [pc, #40]	; (d732c <srand+0x3c>)
   d7304:	4b0a      	ldr	r3, [pc, #40]	; (d7330 <srand+0x40>)
   d7306:	63a8      	str	r0, [r5, #56]	; 0x38
   d7308:	e9c0 2300 	strd	r2, r3, [r0]
   d730c:	4b09      	ldr	r3, [pc, #36]	; (d7334 <srand+0x44>)
   d730e:	6083      	str	r3, [r0, #8]
   d7310:	230b      	movs	r3, #11
   d7312:	8183      	strh	r3, [r0, #12]
   d7314:	2201      	movs	r2, #1
   d7316:	2300      	movs	r3, #0
   d7318:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d731c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d731e:	2200      	movs	r2, #0
   d7320:	611c      	str	r4, [r3, #16]
   d7322:	615a      	str	r2, [r3, #20]
   d7324:	bd38      	pop	{r3, r4, r5, pc}
   d7326:	bf00      	nop
   d7328:	2003e51c 	.word	0x2003e51c
   d732c:	abcd330e 	.word	0xabcd330e
   d7330:	e66d1234 	.word	0xe66d1234
   d7334:	0005deec 	.word	0x0005deec

000d7338 <strcmp>:
   d7338:	f810 2b01 	ldrb.w	r2, [r0], #1
   d733c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7340:	2a01      	cmp	r2, #1
   d7342:	bf28      	it	cs
   d7344:	429a      	cmpcs	r2, r3
   d7346:	d0f7      	beq.n	d7338 <strcmp>
   d7348:	1ad0      	subs	r0, r2, r3
   d734a:	4770      	bx	lr

000d734c <strlen>:
   d734c:	4603      	mov	r3, r0
   d734e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7352:	2a00      	cmp	r2, #0
   d7354:	d1fb      	bne.n	d734e <strlen+0x2>
   d7356:	1a18      	subs	r0, r3, r0
   d7358:	3801      	subs	r0, #1
   d735a:	4770      	bx	lr

000d735c <strncpy>:
   d735c:	b510      	push	{r4, lr}
   d735e:	3901      	subs	r1, #1
   d7360:	4603      	mov	r3, r0
   d7362:	b132      	cbz	r2, d7372 <strncpy+0x16>
   d7364:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7368:	f803 4b01 	strb.w	r4, [r3], #1
   d736c:	3a01      	subs	r2, #1
   d736e:	2c00      	cmp	r4, #0
   d7370:	d1f7      	bne.n	d7362 <strncpy+0x6>
   d7372:	441a      	add	r2, r3
   d7374:	2100      	movs	r1, #0
   d7376:	4293      	cmp	r3, r2
   d7378:	d100      	bne.n	d737c <strncpy+0x20>
   d737a:	bd10      	pop	{r4, pc}
   d737c:	f803 1b01 	strb.w	r1, [r3], #1
   d7380:	e7f9      	b.n	d7376 <strncpy+0x1a>
	...

000d7384 <_strtol_l.isra.0>:
   d7384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7388:	4e3a      	ldr	r6, [pc, #232]	; (d7474 <_strtol_l.isra.0+0xf0>)
   d738a:	4686      	mov	lr, r0
   d738c:	468c      	mov	ip, r1
   d738e:	4660      	mov	r0, ip
   d7390:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7394:	5da5      	ldrb	r5, [r4, r6]
   d7396:	f015 0508 	ands.w	r5, r5, #8
   d739a:	d1f8      	bne.n	d738e <_strtol_l.isra.0+0xa>
   d739c:	2c2d      	cmp	r4, #45	; 0x2d
   d739e:	d133      	bne.n	d7408 <_strtol_l.isra.0+0x84>
   d73a0:	f89c 4000 	ldrb.w	r4, [ip]
   d73a4:	f04f 0801 	mov.w	r8, #1
   d73a8:	f100 0c02 	add.w	ip, r0, #2
   d73ac:	2b00      	cmp	r3, #0
   d73ae:	d05c      	beq.n	d746a <_strtol_l.isra.0+0xe6>
   d73b0:	2b10      	cmp	r3, #16
   d73b2:	d10c      	bne.n	d73ce <_strtol_l.isra.0+0x4a>
   d73b4:	2c30      	cmp	r4, #48	; 0x30
   d73b6:	d10a      	bne.n	d73ce <_strtol_l.isra.0+0x4a>
   d73b8:	f89c 0000 	ldrb.w	r0, [ip]
   d73bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d73c0:	2858      	cmp	r0, #88	; 0x58
   d73c2:	d14d      	bne.n	d7460 <_strtol_l.isra.0+0xdc>
   d73c4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d73c8:	2310      	movs	r3, #16
   d73ca:	f10c 0c02 	add.w	ip, ip, #2
   d73ce:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d73d2:	3f01      	subs	r7, #1
   d73d4:	2600      	movs	r6, #0
   d73d6:	fbb7 f9f3 	udiv	r9, r7, r3
   d73da:	4630      	mov	r0, r6
   d73dc:	fb03 7a19 	mls	sl, r3, r9, r7
   d73e0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d73e4:	2d09      	cmp	r5, #9
   d73e6:	d818      	bhi.n	d741a <_strtol_l.isra.0+0x96>
   d73e8:	462c      	mov	r4, r5
   d73ea:	42a3      	cmp	r3, r4
   d73ec:	dd24      	ble.n	d7438 <_strtol_l.isra.0+0xb4>
   d73ee:	1c75      	adds	r5, r6, #1
   d73f0:	d007      	beq.n	d7402 <_strtol_l.isra.0+0x7e>
   d73f2:	4581      	cmp	r9, r0
   d73f4:	d31d      	bcc.n	d7432 <_strtol_l.isra.0+0xae>
   d73f6:	d101      	bne.n	d73fc <_strtol_l.isra.0+0x78>
   d73f8:	45a2      	cmp	sl, r4
   d73fa:	db1a      	blt.n	d7432 <_strtol_l.isra.0+0xae>
   d73fc:	fb00 4003 	mla	r0, r0, r3, r4
   d7400:	2601      	movs	r6, #1
   d7402:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7406:	e7eb      	b.n	d73e0 <_strtol_l.isra.0+0x5c>
   d7408:	2c2b      	cmp	r4, #43	; 0x2b
   d740a:	bf08      	it	eq
   d740c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7410:	46a8      	mov	r8, r5
   d7412:	bf08      	it	eq
   d7414:	f100 0c02 	addeq.w	ip, r0, #2
   d7418:	e7c8      	b.n	d73ac <_strtol_l.isra.0+0x28>
   d741a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d741e:	2d19      	cmp	r5, #25
   d7420:	d801      	bhi.n	d7426 <_strtol_l.isra.0+0xa2>
   d7422:	3c37      	subs	r4, #55	; 0x37
   d7424:	e7e1      	b.n	d73ea <_strtol_l.isra.0+0x66>
   d7426:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d742a:	2d19      	cmp	r5, #25
   d742c:	d804      	bhi.n	d7438 <_strtol_l.isra.0+0xb4>
   d742e:	3c57      	subs	r4, #87	; 0x57
   d7430:	e7db      	b.n	d73ea <_strtol_l.isra.0+0x66>
   d7432:	f04f 36ff 	mov.w	r6, #4294967295
   d7436:	e7e4      	b.n	d7402 <_strtol_l.isra.0+0x7e>
   d7438:	1c73      	adds	r3, r6, #1
   d743a:	d106      	bne.n	d744a <_strtol_l.isra.0+0xc6>
   d743c:	2322      	movs	r3, #34	; 0x22
   d743e:	f8ce 3000 	str.w	r3, [lr]
   d7442:	4638      	mov	r0, r7
   d7444:	b942      	cbnz	r2, d7458 <_strtol_l.isra.0+0xd4>
   d7446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d744a:	f1b8 0f00 	cmp.w	r8, #0
   d744e:	d000      	beq.n	d7452 <_strtol_l.isra.0+0xce>
   d7450:	4240      	negs	r0, r0
   d7452:	2a00      	cmp	r2, #0
   d7454:	d0f7      	beq.n	d7446 <_strtol_l.isra.0+0xc2>
   d7456:	b10e      	cbz	r6, d745c <_strtol_l.isra.0+0xd8>
   d7458:	f10c 31ff 	add.w	r1, ip, #4294967295
   d745c:	6011      	str	r1, [r2, #0]
   d745e:	e7f2      	b.n	d7446 <_strtol_l.isra.0+0xc2>
   d7460:	2430      	movs	r4, #48	; 0x30
   d7462:	2b00      	cmp	r3, #0
   d7464:	d1b3      	bne.n	d73ce <_strtol_l.isra.0+0x4a>
   d7466:	2308      	movs	r3, #8
   d7468:	e7b1      	b.n	d73ce <_strtol_l.isra.0+0x4a>
   d746a:	2c30      	cmp	r4, #48	; 0x30
   d746c:	d0a4      	beq.n	d73b8 <_strtol_l.isra.0+0x34>
   d746e:	230a      	movs	r3, #10
   d7470:	e7ad      	b.n	d73ce <_strtol_l.isra.0+0x4a>
   d7472:	bf00      	nop
   d7474:	000d7c56 	.word	0x000d7c56

000d7478 <strtol>:
   d7478:	4613      	mov	r3, r2
   d747a:	460a      	mov	r2, r1
   d747c:	4601      	mov	r1, r0
   d747e:	4802      	ldr	r0, [pc, #8]	; (d7488 <strtol+0x10>)
   d7480:	6800      	ldr	r0, [r0, #0]
   d7482:	f7ff bf7f 	b.w	d7384 <_strtol_l.isra.0>
   d7486:	bf00      	nop
   d7488:	2003e51c 	.word	0x2003e51c

000d748c <dynalib_user>:
   d748c:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d749c:	00000000 25006925 7000696c 73697261     ....%i.%li.paris
   d74ac:	006e6900 0074756f 006d7770 61007764     .in.out.pwm.dw.a
   d74bc:	49440077 395f7953 51735261 74796e48     w.DISy_9aRsQHnyt
   d74cc:	76746d38 3068585a 2d547239 37796474     8mtvZXh09rT-tdy7
   d74dc:	74005232 6f72506a 696d6978 74007974     2R.tjProximity.t
   d74ec:	626d416a 746e6569 62616c00 6568742e     jAmbient.lab.the
   d74fc:	2e6c6377 006d6f63                       wcl.com.

000d7504 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d7504:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d7514:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d7524:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d7534:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d7544:	32203531 20313230 353a3231 31353a32     15 2021 12:52:51
   d7554:	00000000 54514d04 06000454 7349514d     .....MQTT...MQIs
   d7564:	00037064                                dp..

000d7568 <_ZL22BlynkReadHandlerVector>:
   d7568:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7578:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7588:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7598:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d75a8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d75b8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d75c8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d75d8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d75e8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d75f8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7608:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7618:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7628:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7638:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7648:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7658:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7668:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7678:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7688:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7698:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d76a8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d76b8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d76c8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d76d8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d76e8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d76f8:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7708:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7718:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7728:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7738:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7748:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..
   d7758:	000d57d9 000d57d9 000d57d9 000d57d9     .W...W...W...W..

000d7768 <_ZL23BlynkWriteHandlerVector>:
   d7768:	000d57db 000d41ad 000d57db 000d57db     .W...A...W...W..
   d7778:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7788:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7798:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d77a8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d77b8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d77c8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d77d8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d77e8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d77f8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7808:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7818:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7828:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7838:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7848:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7858:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7868:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7878:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7888:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7898:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d78a8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d78b8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d78c8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d78d8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d78e8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d78f8:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7908:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7918:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7928:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7938:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7948:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..
   d7958:	000d57db 000d57db 000d57db 000d57db     .W...W...W...W..

000d7968 <_ZTVN5spark13EthernetClassE>:
	...
   d7970:	000d5d8f 000d5d85 000d5d7b 000d5d71     .]...]..{]..q]..
   d7980:	000d5d65 000d5d59 000d6d45 000d6d4d     e]..Y]..Em..Mm..
   d7990:	000d5d4d 000d5d45 000d5d3b 000d5d31     M]..E]..;]..1]..
   d79a0:	000d6d7d                                }m..

000d79a4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d79ac:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d79bc:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d79cc <_ZTV9IPAddress>:
	...
   d79d4:	000d62b1 000d62a1 000d62a3              .b...b...b..

000d79e0 <_ZTV9USBSerial>:
	...
   d79e8:	000d63d5 000d643d 000d6413 000d6011     .c..=d...d...`..
   d79f8:	000d6405 000d63d7 000d63e7 000d6437     .d...c...c..7d..
   d7a08:	000d63f7 000d63d1                       .c...c..

000d7a10 <_ZTV11USARTSerial>:
	...
   d7a18:	000d64e1 000d654d 000d6525 000d6011     .d..Me..%e...`..
   d7a28:	000d64f5 000d6511 000d6503 000d651f     .d...e...e...e..
   d7a38:	000d64e3 000d64e7                       .d...d..

000d7a40 <_ZTV7TwoWire>:
	...
   d7a48:	000d65dd 000d6627 000d65ff 000d65df     .e..'f...e...e..
   d7a58:	000d6607 000d660f 000d6617 000d661f     .f...f...f...f..
   d7a68:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d7a78:	203d2072 00006425                       r = %d..

000d7a80 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7a88:	000d6755 000d6779 000d6b93 000d6787     Ug..yg...k...g..
   d7a98:	000d6759                                Yg..

000d7a9c <_ZTV9TCPClient>:
	...
   d7aa4:	000d6805 000d6839 000d66d3 000d66ed     .h..9h...f...f..
   d7ab4:	000d6a29 000d689b 000d686d 000d6717     )j...h..mh...g..
   d7ac4:	000d6933 000d6b99 000d68cf 000d6add     3i...k...h...j..
   d7ad4:	000d6719 000d674b 000d66ff 000d678b     .g..Kg...f...g..
   d7ae4:	000d684d                                Mh..

000d7ae8 <_ZTVN5spark9WiFiClassE>:
	...
   d7af0:	000d6ce7 000d6cdd 000d6cd3 000d6c95     .l...l...l...l..
   d7b00:	000d611b 000d6cc7 000d6d45 000d6d4d     .a...l..Em..Mm..
   d7b10:	000d6cbb 000d6cb3 000d6ca9 000d6c9f     .l...l...l...l..
   d7b20:	000d6d7d                                }m..

000d7b24 <_ZTVN5spark12NetworkClassE>:
	...
   d7b2c:	000d6d05 000d6d0f 000d6d19 000d6d23     .m...m...m..#m..
   d7b3c:	000d6d2d 000d6d39 000d6d45 000d6d4d     -m..9m..Em..Mm..
   d7b4c:	000d6d55 000d6d61 000d6d69 000d6d73     Um..am..im..sm..
   d7b5c:	000d6d7d                                }m..

000d7b60 <_ZSt7nothrow>:
	...

000d7b61 <_ZTSSt19_Sp_make_shared_tag>:
   d7b61:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d7b71:	5f646572 00676174                        red_tag....

000d7b7c <_ZTISt19_Sp_make_shared_tag>:
   d7b7c:	000d7bbc 000d7b61                       .{..a{..

000d7b84 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d7b84:	000d7c1c 000d7b90 000d7c40              .|...{..@|..

000d7b90 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d7b90:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d7ba0:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d7bb0:	00000045                                E...

000d7bb4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d7bb4:	00000000 000d7b84 000d70c1 000d70d5     .....{...p...p..
   d7bc4:	000d7269 000d7269 000d713f 000d7081     ir..ir..?q...p..
   d7bd4:	000d7127 000d70e9 000d70b5              'q...p...p..

000d7be0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d7be0:	000d7c1c 000d7bec 000d7b84              .|...{...{..

000d7bec <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d7bec:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d7bfc:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d7c0c:	456f666e 00000000                       nfoE....

000d7c14 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d7c14:	00000000 000d7be0 000d7169 000d717d     .....{..iq..}q..
   d7c24:	000d7269 000d7269 000d713f 000d7081     ir..ir..?q...p..
   d7c34:	000d723d 000d71c9 000d7191              =r...q...q..

000d7c40 <_ZTISt9type_info>:
   d7c40:	000d7bbc 000d7c48                       .{..H|..

000d7c48 <_ZTSSt9type_info>:
   d7c48:	74397453 5f657079 6f666e69               St9type_info.

000d7c55 <_ctype_>:
   d7c55:	20202000 20202020 28282020 20282828     .         ((((( 
   d7c65:	20202020 20202020 20202020 20202020                     
   d7c75:	10108820 10101010 10101010 10101010      ...............
   d7c85:	04040410 04040404 10040404 10101010     ................
   d7c95:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7ca5:	01010101 01010101 01010101 10101010     ................
   d7cb5:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7cc5:	02020202 02020202 02020202 10101010     ................
   d7cd5:	00000020 00000000 00000000 00000000      ...............
	...

000d7d56 <link_const_variable_data_end>:
	...

000d7d58 <link_constructors_location>:
   d7d58:	000d4b69 	.word	0x000d4b69
   d7d5c:	000d5d99 	.word	0x000d5d99
   d7d60:	000d5de1 	.word	0x000d5de1
   d7d64:	000d5fe9 	.word	0x000d5fe9
   d7d68:	000d6129 	.word	0x000d6129
   d7d6c:	000d6139 	.word	0x000d6139
   d7d70:	000d6161 	.word	0x000d6161
   d7d74:	000d6cf1 	.word	0x000d6cf1
   d7d78:	000d6e5d 	.word	0x000d6e5d

000d7d7c <link_constructors_end>:
   d7d7c:	00000000 	.word	0x00000000
